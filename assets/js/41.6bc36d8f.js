(window.webpackJsonp=window.webpackJsonp||[]).push([[41],{373:function(t,s,a){"use strict";a.r(s);var n=a(8),e=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"_1-根据经纬度计算距离"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-根据经纬度计算距离"}},[t._v("#")]),t._v(" 1.根据经纬度计算距离")]),t._v(" "),s("div",{staticClass:"language-mysql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("mysql> SELECT ST_Distance_Sphere(ST_GeomFromText('POINT(120.26457 30.18534)'), ST_GeomFromText('POINT(120.2428550 30.2035350)')) distance;\n+--------------------+\n| distance           |\n+--------------------+\n| 2906.6838888890456 |\n+--------------------+\n1 row in set (0.01 sec)\n")])])]),s("h2",{attrs:{id:"_2-json数据类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-json数据类型"}},[t._v("#")]),t._v(" 2.JSON数据类型")]),t._v(" "),s("h3",{attrs:{id:"_2-1相关函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-1相关函数"}},[t._v("#")]),t._v(" 2.1相关函数")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("函数名称")]),t._v(" "),s("th",[t._v("描述")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("JSON_ARRAY")]),t._v(" "),s("td",[t._v("创建一个JSON数组")])]),t._v(" "),s("tr",[s("td",[t._v("JSON_OBJECT")]),t._v(" "),s("td",[t._v("创建一个JSON对象")])]),t._v(" "),s("tr",[s("td",[t._v("JSON_ARRAY_APPEND")]),t._v(" "),s("td",[t._v("在数组末尾添加一个元素")])]),t._v(" "),s("tr",[s("td",[t._v("JSON_ARRAY_INSERT")]),t._v(" "),s("td",[t._v("在指定位置插入一个元素到一个数组中")])]),t._v(" "),s("tr",[s("td",[t._v("JSON_CONTAINS")]),t._v(" "),s("td",[t._v("检查JSON文本是否包含指定路径对应的值")])]),t._v(" "),s("tr",[s("td",[t._v("JSON_CONTAINS_PATH")]),t._v(" "),s("td",[t._v("检查JSON文本是否包含指定路径")])]),t._v(" "),s("tr",[s("td",[t._v("JSON_DEPTH")]),t._v(" "),s("td",[t._v("返回JSON文本的最大深度")])]),t._v(" "),s("tr",[s("td",[t._v("JSON_EXTRACT")]),t._v(" "),s("td",[t._v("从JSON文本中提取数据")])]),t._v(" "),s("tr",[s("td",[t._v("JSON_INSERT")]),t._v(" "),s("td",[t._v("插入数据到JSON文本中指定位置")])]),t._v(" "),s("tr",[s("td",[t._v("JSON_KEYS")]),t._v(" "),s("td",[t._v("返回JSON对象的所有键")])]),t._v(" "),s("tr",[s("td",[t._v("JSON_LENGTH")]),t._v(" "),s("td",[t._v("返回JSON文本中的元素个数")])]),t._v(" "),s("tr",[s("td",[t._v("JSON_MERGE")]),t._v(" "),s("td",[t._v("合并两个或更多JSON文本")])]),t._v(" "),s("tr",[s("td",[t._v("JSON_OBJECTAGG")]),t._v(" "),s("td",[t._v("返回值为JSON类型的聚合函数")])]),t._v(" "),s("tr",[s("td",[t._v("JSON_OVERLAPS")]),t._v(" "),s("td",[t._v("检查两个JSON文本是否有重叠")])]),t._v(" "),s("tr",[s("td",[t._v("JSON_PRETTY")]),t._v(" "),s("td",[t._v("将JSON文本格式化并美化")])]),t._v(" "),s("tr",[s("td",[t._v("JSON_QUOTE")]),t._v(" "),s("td",[t._v("对JSON文本中的字符串添加引号")])]),t._v(" "),s("tr",[s("td",[t._v("JSON_REMOVE")]),t._v(" "),s("td",[t._v("从JSON文本中移除指定的键")])]),t._v(" "),s("tr",[s("td",[t._v("JSON_REPLACE")]),t._v(" "),s("td",[t._v("用新值替换JSON文本中的指定键")])]),t._v(" "),s("tr",[s("td",[t._v("JSON_SEARCH")]),t._v(" "),s("td",[t._v("在JSON文本中搜索指定的值，并返回其路径")])]),t._v(" "),s("tr",[s("td",[t._v("JSON_SET")]),t._v(" "),s("td",[t._v("设置JSON文本中指定路径对应的值")])]),t._v(" "),s("tr",[s("td",[t._v("JSON_STORAGE_FREE")]),t._v(" "),s("td",[t._v("释放JSON值占用的存储空间")])]),t._v(" "),s("tr",[s("td",[t._v("JSON_STORAGE_SIZE")]),t._v(" "),s("td",[t._v("返回JSON值所占用的存储空间大小")])]),t._v(" "),s("tr",[s("td",[t._v("JSON_TABLE")]),t._v(" "),s("td",[t._v("从JSON文本中提取数据，并存储为关系型表格的形式")])]),t._v(" "),s("tr",[s("td",[t._v("JSON_TYPE")]),t._v(" "),s("td",[t._v("返回JSON值的类型")])])])]),t._v(" "),s("h3",{attrs:{id:"_1-json-array-创建一个json数组"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-json-array-创建一个json数组"}},[t._v("#")]),t._v(" 1.JSON_ARRAY 创建一个JSON数组")]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("--函数 JSON_ARRAY([val[, val] ...])")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("--示例")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" JSON_ARRAY"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"a"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"b"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"c"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AS")]),t._v(" json_arr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('--返回结果   ["a", "b", "c"]')]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 注：这里并不要求数组内元素数据类型一致")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" JSON_ARRAY"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"a"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"b"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"c"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AS")]),t._v(" json_arr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('--返回结果   ["a", "b", "c", 1, 2, 3]')]),t._v("\n")])])]),s("h3",{attrs:{id:"_2-json-object-创建一个json对象"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-json-object-创建一个json对象"}},[t._v("#")]),t._v(" 2.JSON_OBJECT 创建一个JSON对象")]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("--函数 JSON_OBJECT([key, val[, key, val] ...])")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("--示例")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" JSON_OBJECT"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'name'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'张三'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'age'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'gender'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'male'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" json_obj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('--返回结果   {"age": 20, "name": "张三", "gender": "male"}')]),t._v("\n")])])]),s("h3",{attrs:{id:"_3-json-array-append在数组末尾添加一个元素"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-json-array-append在数组末尾添加一个元素"}},[t._v("#")]),t._v(" 3.JSON_ARRAY_APPEND在数组末尾添加一个元素")]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("--函数 JSON_ARRAY_APPEND(json_doc, path, val[, path, val] ...)")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("--示例")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" JSON_ARRAY_APPEND"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("JSON_ARRAY"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"a"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"b"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"c"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"$"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"**"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" json_arr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('--返回结果  ["a", "b", "c", 1, 2, 3, "**"]')]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" JSON_ARRAY_APPEND"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("JSON_ARRAY"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"a"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"b"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"c"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"$[0]"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"**"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" json_arr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('--返回结果  [["a", "**"], "b", "c", 1, 2, 3]')]),t._v("\n")])])]),s("p",[t._v("其中，参数解释如下：")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("json_doc")]),t._v("：需要修改的 JSON 文档；")]),t._v(" "),s("li",[s("code",[t._v("path")]),t._v("：要追加元素的路径；")]),t._v(" "),s("li",[s("code",[t._v("val")]),t._v("：要追加的值。")])]),t._v(" "),s("p",[t._v("其返回值为修改后的 JSON 文档，如果原 JSON 文档不是合法的 JSON 数组，则返回 "),s("code",[t._v("NULL")]),t._v("。")]),t._v(" "),s("p",[t._v("注意，"),s("code",[t._v("'$'")]),t._v(" 表示向数组末尾添加元素，如果要指定其他位置，则需要使用对应的索引，例如 "),s("code",[t._v("$[0]")]),t._v(" 表示向数组第一个元素前添加一个新元素")]),t._v(" "),s("h3",{attrs:{id:"_4-json-array-insert在指定位置插入一个元素到一个数组中"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-json-array-insert在指定位置插入一个元素到一个数组中"}},[t._v("#")]),t._v(" 4.JSON_ARRAY_INSERT在指定位置插入一个元素到一个数组中")]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("--函数 JSON_ARRAY_INSERT(json_doc, path, val[, path, val] ...)")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("--示例")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" JSON_ARRAY_INSERT"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("JSON_ARRAY"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"a"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"b"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"c"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"$[1]"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"**"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" json_arr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('--返回结果  ["a", "**", "b", "c", 1, 2, 3]')]),t._v("\n")])])]),s("p",[t._v("其中，参数解释如下：")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("json_doc")]),t._v("：需要修改的 JSON 文档；")]),t._v(" "),s("li",[s("code",[t._v("path")]),t._v("：要插入元素的路径；")]),t._v(" "),s("li",[s("code",[t._v("val")]),t._v("：要插入的值。")])]),t._v(" "),s("p",[t._v("其返回值为修改后的 JSON 文档，如果原 JSON 文档不是合法的 JSON 数组，则返回 "),s("code",[t._v("NULL")]),t._v("。")]),t._v(" "),s("p",[t._v("注意，"),s("code",[t._v("'$[1]'")]),t._v(" 表示向数组第二个元素前添加一个新元素，如果要指定其他位置，则需要使用对应的索引。")]),t._v(" "),s("h3",{attrs:{id:"_5-json-contains-检查json文本是否包含指定路径对应的值"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-json-contains-检查json文本是否包含指定路径对应的值"}},[t._v("#")]),t._v(" 5.JSON_CONTAINS  检查JSON文本是否包含指定路径对应的值")]),t._v(" "),s("p",[s("code",[t._v("JSON_CONTAINS")]),t._v(" 是 MySQL 中的一个 JSON 函数，用于判断 JSON 文档中是否包含指定的值或对象。以下是其语法：")]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("--函数 JSON_CONTAINS(json_doc, val[, path])")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" test_json "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" JSON_CONTAINS"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token identifier"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v("json_array"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'3'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("其中，参数解释如下：")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("json_doc")]),t._v("：需要查找的 JSON 文档；")]),t._v(" "),s("li",[s("code",[t._v("val")]),t._v("：要查找的值或对象；")]),t._v(" "),s("li",[s("code",[t._v("path")]),t._v("：可选，指定要查找的路径。")])]),t._v(" "),s("p",[t._v("其返回值为 "),s("code",[t._v("1")]),t._v(" 或 "),s("code",[t._v("0")]),t._v("，分别表示找到和未找到。")]),t._v(" "),s("p",[t._v("以下是一个示例，假设表 "),s("code",[t._v("student")]),t._v(" 中的字段 "),s("code",[t._v("grades")]),t._v(" 是一个 JSON 数组，我们要判断该数组中是否包含成绩 80：")]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" JSON_CONTAINS"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("grades"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("80")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" student "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" id "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("如果数组中包含成绩 80，则返回 "),s("code",[t._v("1")]),t._v("，否则返回 "),s("code",[t._v("0")]),t._v("。")]),t._v(" "),s("p",[t._v("注意，如果要查找的是一个对象，可以在 "),s("code",[t._v("val")]),t._v(" 参数中直接传入一个 JSON 对象，例如：")]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" JSON_CONTAINS"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("data")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('\'{"name": "Tom", "age": 18}\'')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'$.students'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" class "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" id "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("以上语句表示查找表 "),s("code",[t._v("class")]),t._v(" 中的 "),s("code",[t._v("data")]),t._v(" 字段中名为 "),s("code",[t._v("students")]),t._v(" 的 JSON 数组中是否包含一个名字为 "),s("code",[t._v("Tom")]),t._v("，年龄为 "),s("code",[t._v("18")]),t._v(" 的对象。如果包含，则返回 "),s("code",[t._v("1")]),t._v("，否则返回 "),s("code",[t._v("0")]),t._v("。")]),t._v(" "),s("h3",{attrs:{id:"分组后用逗号分隔"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#分组后用逗号分隔"}},[t._v("#")]),t._v(" 分组后用逗号分隔")]),t._v(" "),s("p",[t._v("假设A表中有以下两个字段：user_id和age。要将A表中的user_id用逗号分隔，按age字段进行分组，可以使用MySQL的GROUP_CONCAT函数实现。具体的SQL语句如下所示：")]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[t._v("Copy CodeSELECT age"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" GROUP_CONCAT"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("user_id SEPARATOR "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("','")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AS")]),t._v(" user_ids\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" A\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("GROUP")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("BY")]),t._v(" age"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("在这条SQL语句中，先选择了age字段和使用GROUP_CONCAT函数连接user_id，使用“,”作为分隔符，并将其命名为user_ids，然后根据age字段进行分组。")]),t._v(" "),s("p",[t._v("执行完这条SQL语句之后，会返回一个结果集，其中每一行代表一个分组，包含该分组的age值和该分组内的所有user_id，用逗号分隔。")]),t._v(" "),s("h3",{attrs:{id:"分组后抓换为json数组"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#分组后抓换为json数组"}},[t._v("#")]),t._v(" 分组后抓换为json数组")]),t._v(" "),s("p",[t._v("要将A表中的user_id设置为JSON数组，按age字段进行分组，可以使用MySQL的GROUP_CONCAT函数和JSON_ARRAY函数实现。具体的SQL语句如下所示：")]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[t._v("Copy CodeSELECT age"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" CONCAT"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'['")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" GROUP_CONCAT"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("JSON_QUOTE"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("user_id"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("']'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AS")]),t._v(" user_ids\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" A\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("GROUP")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("BY")]),t._v(" age"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("在这条SQL语句中，先选择了age字段和使用GROUP_CONCAT函数连接使用JSON_QUOTE函数处理过的user_id，并在最终结果外包裹了一个中括号“[]”，使用CONCAT函数实现字符串拼接，将其命名为user_ids，然后根据age字段进行分组。")]),t._v(" "),s("p",[t._v("执行完这条SQL语句之后，会返回一个结果集，其中每一行代表一个分组，包含该分组的age值和该分组内的所有user_id，用JSON数组形式表示。")])])}),[],!1,null,null,null);s.default=e.exports}}]);