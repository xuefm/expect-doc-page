(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{351:function(a,s,t){"use strict";t.r(s);var r=t(8),e=Object(r.a)({},(function(){var a=this,s=a._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h3",{attrs:{id:"创建容器时"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#创建容器时"}},[a._v("#")]),a._v(" 创建容器时")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" run "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("--restart")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("always \n")])])]),s("p",[s("strong",[a._v("--restart")]),a._v("具体参数值详细信息：")]),a._v(" "),s("p",[s("strong",[a._v("no")]),a._v(" - 容器退出时，不重启容器；")]),a._v(" "),s("p",[s("strong",[a._v("on-failure")]),a._v(" - 只有在非0状态退出时才从新启动容器；")]),a._v(" "),s("p",[s("strong",[a._v("always")]),a._v(" - 无论退出状态是如何，都重启容器；")]),a._v(" "),s("p",[a._v("还可以在使用on - failure策略时，指定Docker将尝试重新启动容器的最大次数。默认情况下，Docker将尝试永远重新启动容器。")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" run "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("--restart")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("on-failure:10 \n")])])]),s("h3",{attrs:{id:"容器已经创建后"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#容器已经创建后"}},[a._v("#")]),a._v(" 容器已经创建后")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" update "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("--restart")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("always 容器id/容器名\n")])])])])}),[],!1,null,null,null);s.default=e.exports}}]);