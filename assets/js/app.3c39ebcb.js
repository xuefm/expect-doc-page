(window.webpackJsonp=window.webpackJsonp||[]).push([[0],[]]);!function(n){function e(e){for(var r,i,s=e[0],c=e[1],l=e[2],u=0,d=[];u<s.length;u++)i=s[u],Object.prototype.hasOwnProperty.call(o,i)&&o[i]&&d.push(o[i][0]),o[i]=0;for(r in c)Object.prototype.hasOwnProperty.call(c,r)&&(n[r]=c[r]);for(p&&p(e);d.length;)d.shift()();return a.push.apply(a,l||[]),t()}function t(){for(var n,e=0;e<a.length;e++){for(var t=a[e],r=!0,s=1;s<t.length;s++){var c=t[s];0!==o[c]&&(r=!1)}r&&(a.splice(e--,1),n=i(i.s=t[0]))}return n}var r={},o={1:0},a=[];function i(e){if(r[e])return r[e].exports;var t=r[e]={i:e,l:!1,exports:{}};return n[e].call(t.exports,t,t.exports,i),t.l=!0,t.exports}i.e=function(n){var e=[],t=o[n];if(0!==t)if(t)e.push(t[2]);else{var r=new Promise((function(e,r){t=o[n]=[e,r]}));e.push(t[2]=r);var a,s=document.createElement("script");s.charset="utf-8",s.timeout=120,i.nc&&s.setAttribute("nonce",i.nc),s.src=function(n){return i.p+"assets/js/"+({}[n]||n)+"."+{2:"ae98dc89",3:"41eb3994",4:"6569a06f",5:"6fcc49e5",6:"dc329c5d",7:"3732bb4b",8:"637c301d",9:"f19b618e",10:"506057a2",11:"dc23df73",12:"4afdb86d",13:"b606c2ba",14:"f1bb483d",15:"64463b11",16:"2b8c633b",17:"f691e205",18:"e45d8d7b",19:"ec2d569b",20:"54fb757d",21:"b535450f",22:"b7001b1a",23:"31642206",24:"d3b19ca4",25:"5b25af73",26:"51d8de20",27:"4ad0c4d6",28:"b12df333",29:"38b89721",30:"709dedf3",31:"39c32dc9",32:"3815e065",33:"19c54249",34:"a92b1d99",35:"cd27aef7",36:"bbfb8561",37:"c9289f5c",38:"2cd1988d",39:"1736034c",40:"e799be0b",41:"4a6ea06d",42:"4d634863",43:"fa1873a2",44:"a5c28ae5",45:"a0aeba6b",46:"9190efab",47:"e9059c20",48:"03828589",49:"8400854c",50:"47686115",51:"26d15496",52:"3f0b0866",53:"cb1a78d4",54:"ac21981f",55:"ce54493e",56:"0d543b80",57:"47a4ec9f",58:"131a6095",59:"e50886c9",60:"f6e3e31c",61:"f0c70f95",62:"6337d851"}[n]+".js"}(n);var c=new Error;a=function(e){s.onerror=s.onload=null,clearTimeout(l);var t=o[n];if(0!==t){if(t){var r=e&&("load"===e.type?"missing":e.type),a=e&&e.target&&e.target.src;c.message="Loading chunk "+n+" failed.\n("+r+": "+a+")",c.name="ChunkLoadError",c.type=r,c.request=a,t[1](c)}o[n]=void 0}};var l=setTimeout((function(){a({type:"timeout",target:s})}),12e4);s.onerror=s.onload=a,document.head.appendChild(s)}return Promise.all(e)},i.m=n,i.c=r,i.d=function(n,e,t){i.o(n,e)||Object.defineProperty(n,e,{enumerable:!0,get:t})},i.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},i.t=function(n,e){if(1&e&&(n=i(n)),8&e)return n;if(4&e&&"object"==typeof n&&n&&n.__esModule)return n;var t=Object.create(null);if(i.r(t),Object.defineProperty(t,"default",{enumerable:!0,value:n}),2&e&&"string"!=typeof n)for(var r in n)i.d(t,r,function(e){return n[e]}.bind(null,r));return t},i.n=function(n){var e=n&&n.__esModule?function(){return n.default}:function(){return n};return i.d(e,"a",e),e},i.o=function(n,e){return Object.prototype.hasOwnProperty.call(n,e)},i.p="/expect-doc-page",i.oe=function(n){throw console.error(n),n};var s=window.webpackJsonp=window.webpackJsonp||[],c=s.push.bind(s);s.push=e,s=s.slice();for(var l=0;l<s.length;l++)e(s[l]);var p=c;a.push([104,0]),t()}([function(n,e,t){"use strict";var r=function(n){return n&&n.Math===Math&&n};n.exports=r("object"==typeof globalThis&&globalThis)||r("object"==typeof window&&window)||r("object"==typeof self&&self)||r("object"==typeof global&&global)||r("object"==typeof this&&this)||function(){return this}()||Function("return this")()},function(n,e,t){"use strict";var r="object"==typeof document&&document.all;n.exports=void 0===r&&void 0!==r?function(n){return"function"==typeof n||n===r}:function(n){return"function"==typeof n}},function(n,e,t){"use strict";var r=t(26),o=Function.prototype,a=o.call,i=r&&o.bind.bind(a,a);n.exports=r?i:function(n){return function(){return a.apply(n,arguments)}}},function(n,e,t){"use strict";n.exports=function(n){try{return!!n()}catch(n){return!0}}},function(n,e,t){"use strict";var r=t(3);n.exports=!r((function(){return 7!==Object.defineProperty({},1,{get:function(){return 7}})[1]}))},function(n,e){var t=Array.isArray;n.exports=t},function(n,e,t){"use strict";var r=t(1);n.exports=function(n){return"object"==typeof n?null!==n:r(n)}},function(n,e,t){var r=t(68),o="object"==typeof self&&self&&self.Object===Object&&self,a=r||o||Function("return this")();n.exports=a},function(n,e,t){"use strict";function r(n,e,t,r,o,a,i,s){var c,l="function"==typeof n?n.options:n;if(e&&(l.render=e,l.staticRenderFns=t,l._compiled=!0),r&&(l.functional=!0),a&&(l._scopeId="data-v-"+a),i?(c=function(n){(n=n||this.$vnode&&this.$vnode.ssrContext||this.parent&&this.parent.$vnode&&this.parent.$vnode.ssrContext)||"undefined"==typeof __VUE_SSR_CONTEXT__||(n=__VUE_SSR_CONTEXT__),o&&o.call(this,n),n&&n._registeredComponents&&n._registeredComponents.add(i)},l._ssrRegister=c):o&&(c=s?function(){o.call(this,(l.functional?this.parent:this).$root.$options.shadowRoot)}:o),c)if(l.functional){l._injectStyles=c;var p=l.render;l.render=function(n,e){return c.call(e),p(n,e)}}else{var u=l.beforeCreate;l.beforeCreate=u?[].concat(u,c):[c]}return{exports:n,options:l}}t.d(e,"a",(function(){return r}))},function(n,e,t){"use strict";var r=t(2),o=t(31),a=r({}.hasOwnProperty);n.exports=Object.hasOwn||function(n,e){return a(o(n),e)}},function(n,e,t){var r=t(163),o=t(166);n.exports=function(n,e){var t=o(n,e);return r(t)?t:void 0}},function(n,e,t){"use strict";t.d(e,"e",(function(){return r})),t.d(e,"b",(function(){return a})),t.d(e,"j",(function(){return i})),t.d(e,"g",(function(){return c})),t.d(e,"h",(function(){return l})),t.d(e,"i",(function(){return p})),t.d(e,"c",(function(){return u})),t.d(e,"f",(function(){return d})),t.d(e,"l",(function(){return m})),t.d(e,"m",(function(){return f})),t.d(e,"d",(function(){return g})),t.d(e,"k",(function(){return v})),t.d(e,"n",(function(){return b})),t.d(e,"a",(function(){return x}));t(16);const r=/#.*$/,o=/\.(md|html)$/,a=/\/$/,i=/^[a-z]+:/i;function s(n){return decodeURI(n).replace(r,"").replace(o,"")}function c(n){return i.test(n)}function l(n){return/^mailto:/.test(n)}function p(n){return/^tel:/.test(n)}function u(n){if(c(n))return n;if(!n)return"404";const e=n.match(r),t=e?e[0]:"",o=s(n);return a.test(o)?n:o+".html"+t}function d(n,e){const t=n.hash,o=function(n){const e=n&&n.match(r);if(e)return e[0]}(e);if(o&&t!==o)return!1;return s(n.path)===s(e)}function m(n,e,t){if(c(e))return{type:"external",path:e};t&&(e=function(n,e,t){const r=n.charAt(0);if("/"===r)return n;if("?"===r||"#"===r)return e+n;const o=e.split("/");t&&o[o.length-1]||o.pop();const a=n.replace(/^\//,"").split("/");for(let n=0;n<a.length;n++){const e=a[n];".."===e?o.pop():"."!==e&&o.push(e)}""!==o[0]&&o.unshift("");return o.join("/")}(e,t));const r=s(e);for(let e=0;e<n.length;e++)if(s(n[e].regularPath)===r)return Object.assign({},n[e],{type:"page",path:u(n[e].path)});return console.error(`[vuepress] No matching page found for sidebar item "${e}"`),{}}function f(n,e,t,r){const{pages:o,themeConfig:a}=t,i=r&&a.locales&&a.locales[r]||a;if("auto"===(n.frontmatter.sidebar||i.sidebar||a.sidebar))return h(n);const s=i.sidebar||a.sidebar;if(s){const{base:t,config:r}=function(n,e){if(Array.isArray(e))return{base:"/",config:e};for(const r in e)if(0===(t=n,/(\.html|\/)$/.test(t)?t:t+"/").indexOf(encodeURI(r)))return{base:r,config:e[r]};var t;return{}}(e,s);return"auto"===r?h(n):r?r.map(n=>function n(e,t,r,o=1){if("string"==typeof e)return m(t,e,r);if(Array.isArray(e))return Object.assign(m(t,e[0],r),{title:e[1]});{o>3&&console.error("[vuepress] detected a too deep nested sidebar group.");const a=e.children||[];return 0===a.length&&e.path?Object.assign(m(t,e.path,r),{title:e.title}):{type:"group",path:e.path,title:e.title,sidebarDepth:e.sidebarDepth,initialOpenGroupIndex:e.initialOpenGroupIndex,children:a.map(e=>n(e,t,r,o+1)),collapsable:!1!==e.collapsable}}}(n,o,t)):[]}return[]}function h(n){const e=g(n.headers||[]);return[{type:"group",collapsable:!1,title:n.title,path:null,children:e.map(e=>({type:"auto",title:e.title,basePath:n.path,path:n.path+"#"+e.slug,children:e.children||[]}))}]}function g(n){let e;return(n=n.map(n=>Object.assign({},n))).forEach(n=>{2===n.level?e=n:e&&(e.children||(e.children=[])).push(n)}),n.filter(n=>2===n.level)}function v(n){return Object.assign(n,{type:n.items&&n.items.length?"links":"link"})}function b(n){return Object.prototype.toString.call(n).match(/\[object (.*?)\]/)[1].toLowerCase()}function y(n){let e=n.frontmatter.date||n.lastUpdated||new Date,t=new Date(e);return"Invalid Date"==t&&e&&(t=new Date(e.replace(/-/g,"/"))),t.getTime()}function x(n,e){return y(e)-y(n)}},function(n,e){n.exports=function(n){return null!=n&&"object"==typeof n}},function(n,e,t){var r=t(15),o=t(148),a=t(149),i=r?r.toStringTag:void 0;n.exports=function(n){return null==n?void 0===n?"[object Undefined]":"[object Null]":i&&i in Object(n)?o(n):a(n)}},function(n,e,t){"use strict";var r=t(4),o=t(17),a=t(34);n.exports=r?function(n,e,t){return o.f(n,e,a(1,t))}:function(n,e,t){return n[e]=t,n}},function(n,e,t){var r=t(7).Symbol;n.exports=r},function(n,e,t){"use strict";var r=t(25),o=t(31),a=t(32),i=t(142),s=t(144);r({target:"Array",proto:!0,arity:1,forced:t(3)((function(){return 4294967297!==[].push.call({length:4294967296},1)}))||!function(){try{Object.defineProperty([],"length",{writable:!1}).push()}catch(n){return n instanceof TypeError}}()},{push:function(n){var e=o(this),t=a(e),r=arguments.length;s(t+r);for(var c=0;c<r;c++)e[t]=arguments[c],t++;return i(e,t),t}})},function(n,e,t){"use strict";var r=t(4),o=t(63),a=t(99),i=t(47),s=t(54),c=TypeError,l=Object.defineProperty,p=Object.getOwnPropertyDescriptor;e.f=r?a?function(n,e,t){if(i(n),e=s(e),i(t),"function"==typeof n&&"prototype"===e&&"value"in t&&"writable"in t&&!t.writable){var r=p(n,e);r&&r.writable&&(n[e]=t.value,t={configurable:"configurable"in t?t.configurable:r.configurable,enumerable:"enumerable"in t?t.enumerable:r.enumerable,writable:!1})}return l(n,e,t)}:l:function(n,e,t){if(i(n),e=s(e),i(t),o)try{return l(n,e,t)}catch(n){}if("get"in t||"set"in t)throw new c("Accessors not supported");return"value"in t&&(n[e]=t.value),n}},function(n,e,t){"use strict";var r=t(2),o=r({}.toString),a=r("".slice);n.exports=function(n){return a(o(n),8,-1)}},function(n,e,t){var r=t(153),o=t(154),a=t(155),i=t(156),s=t(157);function c(n){var e=-1,t=null==n?0:n.length;for(this.clear();++e<t;){var r=n[e];this.set(r[0],r[1])}}c.prototype.clear=r,c.prototype.delete=o,c.prototype.get=a,c.prototype.has=i,c.prototype.set=s,n.exports=c},function(n,e,t){var r=t(70);n.exports=function(n,e){for(var t=n.length;t--;)if(r(n[t][0],e))return t;return-1}},function(n,e,t){var r=t(10)(Object,"create");n.exports=r},function(n,e,t){var r=t(175);n.exports=function(n,e){var t=n.__data__;return r(e)?t["string"==typeof e?"string":"hash"]:t.map}},function(n,e,t){var r=t(45);n.exports=function(n){if("string"==typeof n||r(n))return n;var e=n+"";return"0"==e&&1/n==-1/0?"-0":e}},function(n,e,t){var r,o;
/* NProgress, (c) 2013, 2014 Rico Sta. Cruz - http://ricostacruz.com/nprogress
 * @license MIT */void 0===(o="function"==typeof(r=function(){var n,e,t={version:"0.2.0"},r=t.settings={minimum:.08,easing:"ease",positionUsing:"",speed:200,trickle:!0,trickleRate:.02,trickleSpeed:800,showSpinner:!0,barSelector:'[role="bar"]',spinnerSelector:'[role="spinner"]',parent:"body",template:'<div class="bar" role="bar"><div class="peg"></div></div><div class="spinner" role="spinner"><div class="spinner-icon"></div></div>'};function o(n,e,t){return n<e?e:n>t?t:n}function a(n){return 100*(-1+n)}t.configure=function(n){var e,t;for(e in n)void 0!==(t=n[e])&&n.hasOwnProperty(e)&&(r[e]=t);return this},t.status=null,t.set=function(n){var e=t.isStarted();n=o(n,r.minimum,1),t.status=1===n?null:n;var c=t.render(!e),l=c.querySelector(r.barSelector),p=r.speed,u=r.easing;return c.offsetWidth,i((function(e){""===r.positionUsing&&(r.positionUsing=t.getPositioningCSS()),s(l,function(n,e,t){var o;return(o="translate3d"===r.positionUsing?{transform:"translate3d("+a(n)+"%,0,0)"}:"translate"===r.positionUsing?{transform:"translate("+a(n)+"%,0)"}:{"margin-left":a(n)+"%"}).transition="all "+e+"ms "+t,o}(n,p,u)),1===n?(s(c,{transition:"none",opacity:1}),c.offsetWidth,setTimeout((function(){s(c,{transition:"all "+p+"ms linear",opacity:0}),setTimeout((function(){t.remove(),e()}),p)}),p)):setTimeout(e,p)})),this},t.isStarted=function(){return"number"==typeof t.status},t.start=function(){t.status||t.set(0);var n=function(){setTimeout((function(){t.status&&(t.trickle(),n())}),r.trickleSpeed)};return r.trickle&&n(),this},t.done=function(n){return n||t.status?t.inc(.3+.5*Math.random()).set(1):this},t.inc=function(n){var e=t.status;return e?("number"!=typeof n&&(n=(1-e)*o(Math.random()*e,.1,.95)),e=o(e+n,0,.994),t.set(e)):t.start()},t.trickle=function(){return t.inc(Math.random()*r.trickleRate)},n=0,e=0,t.promise=function(r){return r&&"resolved"!==r.state()?(0===e&&t.start(),n++,e++,r.always((function(){0==--e?(n=0,t.done()):t.set((n-e)/n)})),this):this},t.render=function(n){if(t.isRendered())return document.getElementById("nprogress");l(document.documentElement,"nprogress-busy");var e=document.createElement("div");e.id="nprogress",e.innerHTML=r.template;var o,i=e.querySelector(r.barSelector),c=n?"-100":a(t.status||0),p=document.querySelector(r.parent);return s(i,{transition:"all 0 linear",transform:"translate3d("+c+"%,0,0)"}),r.showSpinner||(o=e.querySelector(r.spinnerSelector))&&d(o),p!=document.body&&l(p,"nprogress-custom-parent"),p.appendChild(e),e},t.remove=function(){p(document.documentElement,"nprogress-busy"),p(document.querySelector(r.parent),"nprogress-custom-parent");var n=document.getElementById("nprogress");n&&d(n)},t.isRendered=function(){return!!document.getElementById("nprogress")},t.getPositioningCSS=function(){var n=document.body.style,e="WebkitTransform"in n?"Webkit":"MozTransform"in n?"Moz":"msTransform"in n?"ms":"OTransform"in n?"O":"";return e+"Perspective"in n?"translate3d":e+"Transform"in n?"translate":"margin"};var i=function(){var n=[];function e(){var t=n.shift();t&&t(e)}return function(t){n.push(t),1==n.length&&e()}}(),s=function(){var n=["Webkit","O","Moz","ms"],e={};function t(t){return t=t.replace(/^-ms-/,"ms-").replace(/-([\da-z])/gi,(function(n,e){return e.toUpperCase()})),e[t]||(e[t]=function(e){var t=document.body.style;if(e in t)return e;for(var r,o=n.length,a=e.charAt(0).toUpperCase()+e.slice(1);o--;)if((r=n[o]+a)in t)return r;return e}(t))}function r(n,e,r){e=t(e),n.style[e]=r}return function(n,e){var t,o,a=arguments;if(2==a.length)for(t in e)void 0!==(o=e[t])&&e.hasOwnProperty(t)&&r(n,t,o);else r(n,a[1],a[2])}}();function c(n,e){return("string"==typeof n?n:u(n)).indexOf(" "+e+" ")>=0}function l(n,e){var t=u(n),r=t+e;c(t,e)||(n.className=r.substring(1))}function p(n,e){var t,r=u(n);c(n,e)&&(t=r.replace(" "+e+" "," "),n.className=t.substring(1,t.length-1))}function u(n){return(" "+(n.className||"")+" ").replace(/\s+/gi," ")}function d(n){n&&n.parentNode&&n.parentNode.removeChild(n)}return t})?r.call(e,t,e,n):r)||(n.exports=o)},function(n,e,t){"use strict";var r=t(0),o=t(52).f,a=t(14),i=t(95),s=t(37),c=t(64),l=t(123);n.exports=function(n,e){var t,p,u,d,m,f=n.target,h=n.global,g=n.stat;if(t=h?r:g?r[f]||s(f,{}):r[f]&&r[f].prototype)for(p in e){if(d=e[p],u=n.dontCallGetSet?(m=o(t,p))&&m.value:t[p],!l(h?p:f+(g?".":"#")+p,n.forced)&&void 0!==u){if(typeof d==typeof u)continue;c(d,u)}(n.sham||u&&u.sham)&&a(d,"sham",!0),i(t,p,d,n)}}},function(n,e,t){"use strict";var r=t(3);n.exports=!r((function(){var n=function(){}.bind();return"function"!=typeof n||n.hasOwnProperty("prototype")}))},function(n,e,t){"use strict";var r=t(48),o=t(35);n.exports=function(n){return r(o(n))}},function(n,e,t){"use strict";var r=t(0),o=t(1),a=function(n){return o(n)?n:void 0};n.exports=function(n,e){return arguments.length<2?a(r[n]):r[n]&&r[n][e]}},function(n,e,t){"use strict";var r=t(1),o=t(110),a=TypeError;n.exports=function(n){if(r(n))return n;throw new a(o(n)+" is not a function")}},function(n,e,t){"use strict";var r=t(0),o=t(60),a=t(9),i=t(62),s=t(58),c=t(57),l=r.Symbol,p=o("wks"),u=c?l.for||l:l&&l.withoutSetter||i;n.exports=function(n){return a(p,n)||(p[n]=s&&a(l,n)?l[n]:u("Symbol."+n)),p[n]}},function(n,e,t){"use strict";var r=t(35),o=Object;n.exports=function(n){return o(r(n))}},function(n,e,t){"use strict";var r=t(121);n.exports=function(n){return r(n.length)}},function(n,e,t){"use strict";var r=t(26),o=Function.prototype.call;n.exports=r?o.bind(o):function(){return o.apply(o,arguments)}},function(n,e,t){"use strict";n.exports=function(n,e){return{enumerable:!(1&n),configurable:!(2&n),writable:!(4&n),value:e}}},function(n,e,t){"use strict";var r=t(53),o=TypeError;n.exports=function(n){if(r(n))throw new o("Can't call method on "+n);return n}},function(n,e,t){"use strict";var r=t(61),o=t(0),a=t(37),i=n.exports=o["__core-js_shared__"]||a("__core-js_shared__",{});(i.versions||(i.versions=[])).push({version:"3.36.1",mode:r?"pure":"global",copyright:"© 2014-2024 Denis Pushkarev (zloirock.ru)",license:"https://github.com/zloirock/core-js/blob/v3.36.1/LICENSE",source:"https://github.com/zloirock/core-js"})},function(n,e,t){"use strict";var r=t(0),o=Object.defineProperty;n.exports=function(n,e){try{o(r,n,{value:e,configurable:!0,writable:!0})}catch(t){r[n]=e}return e}},function(n,e,t){var r=t(147),o=t(12),a=Object.prototype,i=a.hasOwnProperty,s=a.propertyIsEnumerable,c=r(function(){return arguments}())?r:function(n){return o(n)&&i.call(n,"callee")&&!s.call(n,"callee")};n.exports=c},function(n,e,t){var r=t(10)(t(7),"Map");n.exports=r},function(n,e){n.exports=function(n){var e=typeof n;return null!=n&&("object"==e||"function"==e)}},function(n,e,t){var r=t(167),o=t(174),a=t(176),i=t(177),s=t(178);function c(n){var e=-1,t=null==n?0:n.length;for(this.clear();++e<t;){var r=n[e];this.set(r[0],r[1])}}c.prototype.clear=r,c.prototype.delete=o,c.prototype.get=a,c.prototype.has=i,c.prototype.set=s,n.exports=c},function(n,e){n.exports=function(n){var e=-1,t=Array(n.size);return n.forEach((function(n){t[++e]=n})),t}},function(n,e){n.exports=function(n){return"number"==typeof n&&n>-1&&n%1==0&&n<=9007199254740991}},function(n,e,t){var r=t(5),o=t(45),a=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,i=/^\w*$/;n.exports=function(n,e){if(r(n))return!1;var t=typeof n;return!("number"!=t&&"symbol"!=t&&"boolean"!=t&&null!=n&&!o(n))||(i.test(n)||!a.test(n)||null!=e&&n in Object(e))}},function(n,e,t){var r=t(13),o=t(12);n.exports=function(n){return"symbol"==typeof n||o(n)&&"[object Symbol]"==r(n)}},function(n,e){n.exports=function(n){return n}},function(n,e,t){"use strict";var r=t(6),o=String,a=TypeError;n.exports=function(n){if(r(n))return n;throw new a(o(n)+" is not an object")}},function(n,e,t){"use strict";var r=t(2),o=t(3),a=t(18),i=Object,s=r("".split);n.exports=o((function(){return!i("z").propertyIsEnumerable(0)}))?function(n){return"String"===a(n)?s(n,""):i(n)}:i},function(n,e,t){"use strict";n.exports={}},function(n,e){n.exports=function(n){return n.webpackPolyfill||(n.deprecate=function(){},n.paths=[],n.children||(n.children=[]),Object.defineProperty(n,"loaded",{enumerable:!0,get:function(){return n.l}}),Object.defineProperty(n,"id",{enumerable:!0,get:function(){return n.i}}),n.webpackPolyfill=1),n}},function(n,e){var t=/^\s+|\s+$/g,r=/^[-+]0x[0-9a-f]+$/i,o=/^0b[01]+$/i,a=/^0o[0-7]+$/i,i=parseInt,s="object"==typeof global&&global&&global.Object===Object&&global,c="object"==typeof self&&self&&self.Object===Object&&self,l=s||c||Function("return this")(),p=Object.prototype.toString,u=Math.max,d=Math.min,m=function(){return l.Date.now()};function f(n){var e=typeof n;return!!n&&("object"==e||"function"==e)}function h(n){if("number"==typeof n)return n;if(function(n){return"symbol"==typeof n||function(n){return!!n&&"object"==typeof n}(n)&&"[object Symbol]"==p.call(n)}(n))return NaN;if(f(n)){var e="function"==typeof n.valueOf?n.valueOf():n;n=f(e)?e+"":e}if("string"!=typeof n)return 0===n?n:+n;n=n.replace(t,"");var s=o.test(n);return s||a.test(n)?i(n.slice(2),s?2:8):r.test(n)?NaN:+n}n.exports=function(n,e,t){var r,o,a,i,s,c,l=0,p=!1,g=!1,v=!0;if("function"!=typeof n)throw new TypeError("Expected a function");function b(e){var t=r,a=o;return r=o=void 0,l=e,i=n.apply(a,t)}function y(n){return l=n,s=setTimeout(_,e),p?b(n):i}function x(n){var t=n-c;return void 0===c||t>=e||t<0||g&&n-l>=a}function _(){var n=m();if(x(n))return w(n);s=setTimeout(_,function(n){var t=e-(n-c);return g?d(t,a-(n-l)):t}(n))}function w(n){return s=void 0,v&&r?b(n):(r=o=void 0,i)}function k(){var n=m(),t=x(n);if(r=arguments,o=this,c=n,t){if(void 0===s)return y(c);if(g)return s=setTimeout(_,e),b(c)}return void 0===s&&(s=setTimeout(_,e)),i}return e=h(e)||0,f(t)&&(p=!!t.leading,a=(g="maxWait"in t)?u(h(t.maxWait)||0,e):a,v="trailing"in t?!!t.trailing:v),k.cancel=function(){void 0!==s&&clearTimeout(s),l=0,r=c=o=s=void 0},k.flush=function(){return void 0===s?i:w(m())},k}},function(n,e,t){"use strict";var r=t(4),o=t(33),a=t(106),i=t(34),s=t(27),c=t(54),l=t(9),p=t(63),u=Object.getOwnPropertyDescriptor;e.f=r?u:function(n,e){if(n=s(n),e=c(e),p)try{return u(n,e)}catch(n){}if(l(n,e))return i(!o(a.f,n,e),n[e])}},function(n,e,t){"use strict";n.exports=function(n){return null==n}},function(n,e,t){"use strict";var r=t(107),o=t(55);n.exports=function(n){var e=r(n,"string");return o(e)?e:e+""}},function(n,e,t){"use strict";var r=t(28),o=t(1),a=t(56),i=t(57),s=Object;n.exports=i?function(n){return"symbol"==typeof n}:function(n){var e=r("Symbol");return o(e)&&a(e.prototype,s(n))}},function(n,e,t){"use strict";var r=t(2);n.exports=r({}.isPrototypeOf)},function(n,e,t){"use strict";var r=t(58);n.exports=r&&!Symbol.sham&&"symbol"==typeof Symbol.iterator},function(n,e,t){"use strict";var r=t(59),o=t(3),a=t(0).String;n.exports=!!Object.getOwnPropertySymbols&&!o((function(){var n=Symbol("symbol detection");return!a(n)||!(Object(n)instanceof Symbol)||!Symbol.sham&&r&&r<41}))},function(n,e,t){"use strict";var r,o,a=t(0),i=t(108),s=a.process,c=a.Deno,l=s&&s.versions||c&&c.version,p=l&&l.v8;p&&(o=(r=p.split("."))[0]>0&&r[0]<4?1:+(r[0]+r[1])),!o&&i&&(!(r=i.match(/Edge\/(\d+)/))||r[1]>=74)&&(r=i.match(/Chrome\/(\d+)/))&&(o=+r[1]),n.exports=o},function(n,e,t){"use strict";var r=t(36);n.exports=function(n,e){return r[n]||(r[n]=e||{})}},function(n,e,t){"use strict";n.exports=!1},function(n,e,t){"use strict";var r=t(2),o=0,a=Math.random(),i=r(1..toString);n.exports=function(n){return"Symbol("+(void 0===n?"":n)+")_"+i(++o+a,36)}},function(n,e,t){"use strict";var r=t(4),o=t(3),a=t(98);n.exports=!r&&!o((function(){return 7!==Object.defineProperty(a("div"),"a",{get:function(){return 7}}).a}))},function(n,e,t){"use strict";var r=t(9),o=t(116),a=t(52),i=t(17);n.exports=function(n,e,t){for(var s=o(e),c=i.f,l=a.f,p=0;p<s.length;p++){var u=s[p];r(n,u)||t&&r(t,u)||c(n,u,l(e,u))}}},function(n,e,t){"use strict";var r=t(120);n.exports=function(n){var e=+n;return e!=e||0===e?0:r(e)}},function(n,e,t){"use strict";var r=t(130),o=t(6),a=t(35),i=t(131);n.exports=Object.setPrototypeOf||("__proto__"in{}?function(){var n,e=!1,t={};try{(n=r(Object.prototype,"__proto__","set"))(t,[]),e=t instanceof Array}catch(n){}return function(t,r){return a(t),i(r),o(t)?(e?n(t,r):t.__proto__=r,t):t}}():void 0)},function(n,e){n.exports=function(n,e){for(var t=-1,r=e.length,o=n.length;++t<r;)n[o+t]=e[t];return n}},function(n,e){var t="object"==typeof global&&global&&global.Object===Object&&global;n.exports=t},function(n,e,t){var r=t(19),o=t(158),a=t(159),i=t(160),s=t(161),c=t(162);function l(n){var e=this.__data__=new r(n);this.size=e.size}l.prototype.clear=o,l.prototype.delete=a,l.prototype.get=i,l.prototype.has=s,l.prototype.set=c,n.exports=l},function(n,e){n.exports=function(n,e){return n===e||n!=n&&e!=e}},function(n,e,t){var r=t(13),o=t(40);n.exports=function(n){if(!o(n))return!1;var e=r(n);return"[object Function]"==e||"[object GeneratorFunction]"==e||"[object AsyncFunction]"==e||"[object Proxy]"==e}},function(n,e){var t=Function.prototype.toString;n.exports=function(n){if(null!=n){try{return t.call(n)}catch(n){}try{return n+""}catch(n){}}return""}},function(n,e,t){var r=t(179),o=t(12);n.exports=function n(e,t,a,i,s){return e===t||(null==e||null==t||!o(e)&&!o(t)?e!=e&&t!=t:r(e,t,a,i,n,s))}},function(n,e,t){var r=t(75),o=t(182),a=t(76);n.exports=function(n,e,t,i,s,c){var l=1&t,p=n.length,u=e.length;if(p!=u&&!(l&&u>p))return!1;var d=c.get(n),m=c.get(e);if(d&&m)return d==e&&m==n;var f=-1,h=!0,g=2&t?new r:void 0;for(c.set(n,e),c.set(e,n);++f<p;){var v=n[f],b=e[f];if(i)var y=l?i(b,v,f,e,n,c):i(v,b,f,n,e,c);if(void 0!==y){if(y)continue;h=!1;break}if(g){if(!o(e,(function(n,e){if(!a(g,e)&&(v===n||s(v,n,t,i,c)))return g.push(e)}))){h=!1;break}}else if(v!==b&&!s(v,b,t,i,c)){h=!1;break}}return c.delete(n),c.delete(e),h}},function(n,e,t){var r=t(41),o=t(180),a=t(181);function i(n){var e=-1,t=null==n?0:n.length;for(this.__data__=new r;++e<t;)this.add(n[e])}i.prototype.add=i.prototype.push=o,i.prototype.has=a,n.exports=i},function(n,e){n.exports=function(n,e){return n.has(e)}},function(n,e,t){var r=t(192),o=t(198),a=t(81);n.exports=function(n){return a(n)?r(n):o(n)}},function(n,e,t){(function(n){var r=t(7),o=t(194),a=e&&!e.nodeType&&e,i=a&&"object"==typeof n&&n&&!n.nodeType&&n,s=i&&i.exports===a?r.Buffer:void 0,c=(s?s.isBuffer:void 0)||o;n.exports=c}).call(this,t(50)(n))},function(n,e){var t=/^(?:0|[1-9]\d*)$/;n.exports=function(n,e){var r=typeof n;return!!(e=null==e?9007199254740991:e)&&("number"==r||"symbol"!=r&&t.test(n))&&n>-1&&n%1==0&&n<e}},function(n,e,t){var r=t(195),o=t(196),a=t(197),i=a&&a.isTypedArray,s=i?o(i):r;n.exports=s},function(n,e,t){var r=t(71),o=t(43);n.exports=function(n){return null!=n&&o(n.length)&&!r(n)}},function(n,e,t){var r=t(10)(t(7),"Set");n.exports=r},function(n,e,t){var r=t(40);n.exports=function(n){return n==n&&!r(n)}},function(n,e){n.exports=function(n,e){return function(t){return null!=t&&(t[n]===e&&(void 0!==e||n in Object(t)))}}},function(n,e,t){var r=t(86),o=t(23);n.exports=function(n,e){for(var t=0,a=(e=r(e,n)).length;null!=n&&t<a;)n=n[o(e[t++])];return t&&t==a?n:void 0}},function(n,e,t){var r=t(5),o=t(44),a=t(209),i=t(212);n.exports=function(n,e){return r(n)?n:o(n,e)?[n]:a(i(n))}},function(n,e,t){},function(n,e,t){},function(n,e,t){},function(n,e,t){},function(n,e,t){var r=t(145),o=t(150),a=t(221),i=t(229),s=t(238),c=t(103),l=a((function(n){var e=c(n);return s(e)&&(e=void 0),i(r(n,1,s,!0),o(e,2))}));n.exports=l},function(n,e,t){"use strict";
/*!
 * escape-html
 * Copyright(c) 2012-2013 TJ Holowaychuk
 * Copyright(c) 2015 Andreas Lubbe
 * Copyright(c) 2015 Tiancheng "Timothy" Gu
 * MIT Licensed
 */var r=/["'&<>]/;n.exports=function(n){var e,t=""+n,o=r.exec(t);if(!o)return t;var a="",i=0,s=0;for(i=o.index;i<t.length;i++){switch(t.charCodeAt(i)){case 34:e="&quot;";break;case 38:e="&amp;";break;case 39:e="&#39;";break;case 60:e="&lt;";break;case 62:e="&gt;";break;default:continue}s!==i&&(a+=t.substring(s,i)),s=i+1,a+=e}return s!==i?a+t.substring(s,i):a}},function(n,e,t){"use strict";t.r(e);var r={name:"CodeBlock",props:{title:{type:String,required:!0},active:{type:Boolean,default:!1}}},o=(t(241),t(8)),a=Object(o.a)(r,(function(){return(0,this._self._c)("div",{staticClass:"theme-code-block",class:{"theme-code-block__active":this.active}},[this._t("default")],2)}),[],!1,null,"4f1e9d0c",null);e.default=a.exports},function(n,e,t){"use strict";t.r(e);var r={name:"CodeGroup",data:()=>({codeTabs:[],activeCodeTabIndex:-1}),watch:{activeCodeTabIndex(n){this.codeTabs.forEach(n=>{n.elm.classList.remove("theme-code-block__active")}),this.codeTabs[n].elm.classList.add("theme-code-block__active")}},mounted(){this.codeTabs=(this.$slots.default||[]).filter(n=>Boolean(n.componentOptions)).map((n,e)=>(""===n.componentOptions.propsData.active&&(this.activeCodeTabIndex=e),{title:n.componentOptions.propsData.title,elm:n.elm})),-1===this.activeCodeTabIndex&&this.codeTabs.length>0&&(this.activeCodeTabIndex=0)},methods:{changeCodeTab(n){this.activeCodeTabIndex=n}}},o=(t(242),t(8)),a=Object(o.a)(r,(function(){var n=this,e=n._self._c;return e("div",{staticClass:"theme-code-group"},[e("div",{staticClass:"theme-code-group__nav"},[e("ul",{staticClass:"theme-code-group__ul"},n._l(n.codeTabs,(function(t,r){return e("li",{key:t.title,staticClass:"theme-code-group__li"},[e("button",{staticClass:"theme-code-group__nav-tab",class:{"theme-code-group__nav-tab-active":r===n.activeCodeTabIndex},on:{click:function(e){return n.changeCodeTab(r)}}},[n._v("\n            "+n._s(t.title)+"\n          ")])])})),0)]),n._v(" "),n._t("default"),n._v(" "),n.codeTabs.length<1?e("pre",{staticClass:"pre-blank"},[n._v("// Make sure to add code blocks to your code group")]):n._e()],2)}),[],!1,null,"2f5f1757",null);e.default=a.exports},function(n,e,t){"use strict";var r=t(1),o=t(17),a=t(100),i=t(37);n.exports=function(n,e,t,s){s||(s={});var c=s.enumerable,l=void 0!==s.name?s.name:e;if(r(t)&&a(t,l,s),s.global)c?n[e]=t:i(e,t);else{try{s.unsafe?n[e]&&(c=!0):delete n[e]}catch(n){}c?n[e]=t:o.f(n,e,{value:t,enumerable:!1,configurable:!s.nonConfigurable,writable:!s.nonWritable})}return n}},function(n,e,t){"use strict";n.exports=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"]},function(n,e,t){"use strict";var r=t(136),o=String;n.exports=function(n){if("Symbol"===r(n))throw new TypeError("Cannot convert a Symbol value to a string");return o(n)}},function(n,e,t){"use strict";var r=t(0),o=t(6),a=r.document,i=o(a)&&o(a.createElement);n.exports=function(n){return i?a.createElement(n):{}}},function(n,e,t){"use strict";var r=t(4),o=t(3);n.exports=r&&o((function(){return 42!==Object.defineProperty((function(){}),"prototype",{value:42,writable:!1}).prototype}))},function(n,e,t){"use strict";var r=t(2),o=t(3),a=t(1),i=t(9),s=t(4),c=t(112).CONFIGURABLE,l=t(113),p=t(114),u=p.enforce,d=p.get,m=String,f=Object.defineProperty,h=r("".slice),g=r("".replace),v=r([].join),b=s&&!o((function(){return 8!==f((function(){}),"length",{value:8}).length})),y=String(String).split("String"),x=n.exports=function(n,e,t){"Symbol("===h(m(e),0,7)&&(e="["+g(m(e),/^Symbol\(([^)]*)\).*$/,"$1")+"]"),t&&t.getter&&(e="get "+e),t&&t.setter&&(e="set "+e),(!i(n,"name")||c&&n.name!==e)&&(s?f(n,"name",{value:e,configurable:!0}):n.name=e),b&&t&&i(t,"arity")&&n.length!==t.arity&&f(n,"length",{value:t.arity});try{t&&i(t,"constructor")&&t.constructor?s&&f(n,"prototype",{writable:!1}):n.prototype&&(n.prototype=void 0)}catch(n){}var r=u(n);return i(r,"source")||(r.source=v(y,"string"==typeof e?e:"")),n};Function.prototype.toString=x((function(){return a(this)&&d(this).source||l(this)}),"toString")},function(n,e,t){"use strict";var r=t(60),o=t(62),a=r("keys");n.exports=function(n){return a[n]||(a[n]=o(n))}},function(n,e,t){"use strict";var r=t(2),o=t(9),a=t(27),i=t(118).indexOf,s=t(49),c=r([].push);n.exports=function(n,e){var t,r=a(n),l=0,p=[];for(t in r)!o(s,t)&&o(r,t)&&c(p,t);for(;e.length>l;)o(r,t=e[l++])&&(~i(p,t)||c(p,t));return p}},function(n,e){n.exports=function(n){var e=null==n?0:n.length;return e?n[e-1]:void 0}},function(n,e,t){n.exports=t(247)},function(n,e,t){"use strict";var r=t(25),o=t(124).left,a=t(125),i=t(59);r({target:"Array",proto:!0,forced:!t(126)&&i>79&&i<83||!a("reduce")},{reduce:function(n){var e=arguments.length;return o(this,n,e,e>1?arguments[1]:void 0)}})},function(n,e,t){"use strict";var r={}.propertyIsEnumerable,o=Object.getOwnPropertyDescriptor,a=o&&!r.call({1:2},1);e.f=a?function(n){var e=o(this,n);return!!e&&e.enumerable}:r},function(n,e,t){"use strict";var r=t(33),o=t(6),a=t(55),i=t(109),s=t(111),c=t(30),l=TypeError,p=c("toPrimitive");n.exports=function(n,e){if(!o(n)||a(n))return n;var t,c=i(n,p);if(c){if(void 0===e&&(e="default"),t=r(c,n,e),!o(t)||a(t))return t;throw new l("Can't convert object to primitive value")}return void 0===e&&(e="number"),s(n,e)}},function(n,e,t){"use strict";n.exports="undefined"!=typeof navigator&&String(navigator.userAgent)||""},function(n,e,t){"use strict";var r=t(29),o=t(53);n.exports=function(n,e){var t=n[e];return o(t)?void 0:r(t)}},function(n,e,t){"use strict";var r=String;n.exports=function(n){try{return r(n)}catch(n){return"Object"}}},function(n,e,t){"use strict";var r=t(33),o=t(1),a=t(6),i=TypeError;n.exports=function(n,e){var t,s;if("string"===e&&o(t=n.toString)&&!a(s=r(t,n)))return s;if(o(t=n.valueOf)&&!a(s=r(t,n)))return s;if("string"!==e&&o(t=n.toString)&&!a(s=r(t,n)))return s;throw new i("Can't convert object to primitive value")}},function(n,e,t){"use strict";var r=t(4),o=t(9),a=Function.prototype,i=r&&Object.getOwnPropertyDescriptor,s=o(a,"name"),c=s&&"something"===function(){}.name,l=s&&(!r||r&&i(a,"name").configurable);n.exports={EXISTS:s,PROPER:c,CONFIGURABLE:l}},function(n,e,t){"use strict";var r=t(2),o=t(1),a=t(36),i=r(Function.toString);o(a.inspectSource)||(a.inspectSource=function(n){return i(n)}),n.exports=a.inspectSource},function(n,e,t){"use strict";var r,o,a,i=t(115),s=t(0),c=t(6),l=t(14),p=t(9),u=t(36),d=t(101),m=t(49),f=s.TypeError,h=s.WeakMap;if(i||u.state){var g=u.state||(u.state=new h);g.get=g.get,g.has=g.has,g.set=g.set,r=function(n,e){if(g.has(n))throw new f("Object already initialized");return e.facade=n,g.set(n,e),e},o=function(n){return g.get(n)||{}},a=function(n){return g.has(n)}}else{var v=d("state");m[v]=!0,r=function(n,e){if(p(n,v))throw new f("Object already initialized");return e.facade=n,l(n,v,e),e},o=function(n){return p(n,v)?n[v]:{}},a=function(n){return p(n,v)}}n.exports={set:r,get:o,has:a,enforce:function(n){return a(n)?o(n):r(n,{})},getterFor:function(n){return function(e){var t;if(!c(e)||(t=o(e)).type!==n)throw new f("Incompatible receiver, "+n+" required");return t}}}},function(n,e,t){"use strict";var r=t(0),o=t(1),a=r.WeakMap;n.exports=o(a)&&/native code/.test(String(a))},function(n,e,t){"use strict";var r=t(28),o=t(2),a=t(117),i=t(122),s=t(47),c=o([].concat);n.exports=r("Reflect","ownKeys")||function(n){var e=a.f(s(n)),t=i.f;return t?c(e,t(n)):e}},function(n,e,t){"use strict";var r=t(102),o=t(96).concat("length","prototype");e.f=Object.getOwnPropertyNames||function(n){return r(n,o)}},function(n,e,t){"use strict";var r=t(27),o=t(119),a=t(32),i=function(n){return function(e,t,i){var s=r(e),c=a(s);if(0===c)return!n&&-1;var l,p=o(i,c);if(n&&t!=t){for(;c>p;)if((l=s[p++])!=l)return!0}else for(;c>p;p++)if((n||p in s)&&s[p]===t)return n||p||0;return!n&&-1}};n.exports={includes:i(!0),indexOf:i(!1)}},function(n,e,t){"use strict";var r=t(65),o=Math.max,a=Math.min;n.exports=function(n,e){var t=r(n);return t<0?o(t+e,0):a(t,e)}},function(n,e,t){"use strict";var r=Math.ceil,o=Math.floor;n.exports=Math.trunc||function(n){var e=+n;return(e>0?o:r)(e)}},function(n,e,t){"use strict";var r=t(65),o=Math.min;n.exports=function(n){var e=r(n);return e>0?o(e,9007199254740991):0}},function(n,e,t){"use strict";e.f=Object.getOwnPropertySymbols},function(n,e,t){"use strict";var r=t(3),o=t(1),a=/#|\.prototype\./,i=function(n,e){var t=c[s(n)];return t===p||t!==l&&(o(e)?r(e):!!e)},s=i.normalize=function(n){return String(n).replace(a,".").toLowerCase()},c=i.data={},l=i.NATIVE="N",p=i.POLYFILL="P";n.exports=i},function(n,e,t){"use strict";var r=t(29),o=t(31),a=t(48),i=t(32),s=TypeError,c="Reduce of empty array with no initial value",l=function(n){return function(e,t,l,p){var u=o(e),d=a(u),m=i(u);if(r(t),0===m&&l<2)throw new s(c);var f=n?m-1:0,h=n?-1:1;if(l<2)for(;;){if(f in d){p=d[f],f+=h;break}if(f+=h,n?f<0:m<=f)throw new s(c)}for(;n?f>=0:m>f;f+=h)f in d&&(p=t(p,d[f],f,u));return p}};n.exports={left:l(!1),right:l(!0)}},function(n,e,t){"use strict";var r=t(3);n.exports=function(n,e){var t=[][n];return!!t&&r((function(){t.call(null,e||function(){return 1},1)}))}},function(n,e,t){"use strict";var r=t(0),o=t(18);n.exports="process"===o(r.process)},function(n,e,t){"use strict";var r=t(25),o=t(0),a=t(128),i=t(129),s=o.WebAssembly,c=7!==new Error("e",{cause:7}).cause,l=function(n,e){var t={};t[n]=i(n,e,c),r({global:!0,constructor:!0,arity:1,forced:c},t)},p=function(n,e){if(s&&s[n]){var t={};t[n]=i("WebAssembly."+n,e,c),r({target:"WebAssembly",stat:!0,constructor:!0,arity:1,forced:c},t)}};l("Error",(function(n){return function(e){return a(n,this,arguments)}})),l("EvalError",(function(n){return function(e){return a(n,this,arguments)}})),l("RangeError",(function(n){return function(e){return a(n,this,arguments)}})),l("ReferenceError",(function(n){return function(e){return a(n,this,arguments)}})),l("SyntaxError",(function(n){return function(e){return a(n,this,arguments)}})),l("TypeError",(function(n){return function(e){return a(n,this,arguments)}})),l("URIError",(function(n){return function(e){return a(n,this,arguments)}})),p("CompileError",(function(n){return function(e){return a(n,this,arguments)}})),p("LinkError",(function(n){return function(e){return a(n,this,arguments)}})),p("RuntimeError",(function(n){return function(e){return a(n,this,arguments)}}))},function(n,e,t){"use strict";var r=t(26),o=Function.prototype,a=o.apply,i=o.call;n.exports="object"==typeof Reflect&&Reflect.apply||(r?i.bind(a):function(){return i.apply(a,arguments)})},function(n,e,t){"use strict";var r=t(28),o=t(9),a=t(14),i=t(56),s=t(66),c=t(64),l=t(133),p=t(134),u=t(135),d=t(138),m=t(139),f=t(4),h=t(61);n.exports=function(n,e,t,g){var v=g?2:1,b=n.split("."),y=b[b.length-1],x=r.apply(null,b);if(x){var _=x.prototype;if(!h&&o(_,"cause")&&delete _.cause,!t)return x;var w=r("Error"),k=e((function(n,e){var t=u(g?e:n,void 0),r=g?new x(n):new x;return void 0!==t&&a(r,"message",t),m(r,k,r.stack,2),this&&i(_,this)&&p(r,this,k),arguments.length>v&&d(r,arguments[v]),r}));if(k.prototype=_,"Error"!==y?s?s(k,w):c(k,w,{name:!0}):f&&"stackTraceLimit"in x&&(l(k,x,"stackTraceLimit"),l(k,x,"prepareStackTrace")),c(k,x),!h)try{_.name!==y&&a(_,"name",y),_.constructor=k}catch(n){}return k}}},function(n,e,t){"use strict";var r=t(2),o=t(29);n.exports=function(n,e,t){try{return r(o(Object.getOwnPropertyDescriptor(n,e)[t]))}catch(n){}}},function(n,e,t){"use strict";var r=t(132),o=String,a=TypeError;n.exports=function(n){if(r(n))return n;throw new a("Can't set "+o(n)+" as a prototype")}},function(n,e,t){"use strict";var r=t(6);n.exports=function(n){return r(n)||null===n}},function(n,e,t){"use strict";var r=t(17).f;n.exports=function(n,e,t){t in n||r(n,t,{configurable:!0,get:function(){return e[t]},set:function(n){e[t]=n}})}},function(n,e,t){"use strict";var r=t(1),o=t(6),a=t(66);n.exports=function(n,e,t){var i,s;return a&&r(i=e.constructor)&&i!==t&&o(s=i.prototype)&&s!==t.prototype&&a(n,s),n}},function(n,e,t){"use strict";var r=t(97);n.exports=function(n,e){return void 0===n?arguments.length<2?"":e:r(n)}},function(n,e,t){"use strict";var r=t(137),o=t(1),a=t(18),i=t(30)("toStringTag"),s=Object,c="Arguments"===a(function(){return arguments}());n.exports=r?a:function(n){var e,t,r;return void 0===n?"Undefined":null===n?"Null":"string"==typeof(t=function(n,e){try{return n[e]}catch(n){}}(e=s(n),i))?t:c?a(e):"Object"===(r=a(e))&&o(e.callee)?"Arguments":r}},function(n,e,t){"use strict";var r={};r[t(30)("toStringTag")]="z",n.exports="[object z]"===String(r)},function(n,e,t){"use strict";var r=t(6),o=t(14);n.exports=function(n,e){r(e)&&"cause"in e&&o(n,"cause",e.cause)}},function(n,e,t){"use strict";var r=t(14),o=t(140),a=t(141),i=Error.captureStackTrace;n.exports=function(n,e,t,s){a&&(i?i(n,e):r(n,"stack",o(t,s)))}},function(n,e,t){"use strict";var r=t(2),o=Error,a=r("".replace),i=String(new o("zxcasd").stack),s=/\n\s*at [^:]*:[^\n]*/,c=s.test(i);n.exports=function(n,e){if(c&&"string"==typeof n&&!o.prepareStackTrace)for(;e--;)n=a(n,s,"");return n}},function(n,e,t){"use strict";var r=t(3),o=t(34);n.exports=!r((function(){var n=new Error("a");return!("stack"in n)||(Object.defineProperty(n,"stack",o(1,7)),7!==n.stack)}))},function(n,e,t){"use strict";var r=t(4),o=t(143),a=TypeError,i=Object.getOwnPropertyDescriptor,s=r&&!function(){if(void 0!==this)return!0;try{Object.defineProperty([],"length",{writable:!1}).length=1}catch(n){return n instanceof TypeError}}();n.exports=s?function(n,e){if(o(n)&&!i(n,"length").writable)throw new a("Cannot set read only .length");return n.length=e}:function(n,e){return n.length=e}},function(n,e,t){"use strict";var r=t(18);n.exports=Array.isArray||function(n){return"Array"===r(n)}},function(n,e,t){"use strict";var r=TypeError;n.exports=function(n){if(n>9007199254740991)throw r("Maximum allowed index exceeded");return n}},function(n,e,t){var r=t(67),o=t(146);n.exports=function n(e,t,a,i,s){var c=-1,l=e.length;for(a||(a=o),s||(s=[]);++c<l;){var p=e[c];t>0&&a(p)?t>1?n(p,t-1,a,i,s):r(s,p):i||(s[s.length]=p)}return s}},function(n,e,t){var r=t(15),o=t(38),a=t(5),i=r?r.isConcatSpreadable:void 0;n.exports=function(n){return a(n)||o(n)||!!(i&&n&&n[i])}},function(n,e,t){var r=t(13),o=t(12);n.exports=function(n){return o(n)&&"[object Arguments]"==r(n)}},function(n,e,t){var r=t(15),o=Object.prototype,a=o.hasOwnProperty,i=o.toString,s=r?r.toStringTag:void 0;n.exports=function(n){var e=a.call(n,s),t=n[s];try{n[s]=void 0;var r=!0}catch(n){}var o=i.call(n);return r&&(e?n[s]=t:delete n[s]),o}},function(n,e){var t=Object.prototype.toString;n.exports=function(n){return t.call(n)}},function(n,e,t){var r=t(151),o=t(207),a=t(46),i=t(5),s=t(218);n.exports=function(n){return"function"==typeof n?n:null==n?a:"object"==typeof n?i(n)?o(n[0],n[1]):r(n):s(n)}},function(n,e,t){var r=t(152),o=t(206),a=t(84);n.exports=function(n){var e=o(n);return 1==e.length&&e[0][2]?a(e[0][0],e[0][1]):function(t){return t===n||r(t,n,e)}}},function(n,e,t){var r=t(69),o=t(73);n.exports=function(n,e,t,a){var i=t.length,s=i,c=!a;if(null==n)return!s;for(n=Object(n);i--;){var l=t[i];if(c&&l[2]?l[1]!==n[l[0]]:!(l[0]in n))return!1}for(;++i<s;){var p=(l=t[i])[0],u=n[p],d=l[1];if(c&&l[2]){if(void 0===u&&!(p in n))return!1}else{var m=new r;if(a)var f=a(u,d,p,n,e,m);if(!(void 0===f?o(d,u,3,a,m):f))return!1}}return!0}},function(n,e){n.exports=function(){this.__data__=[],this.size=0}},function(n,e,t){var r=t(20),o=Array.prototype.splice;n.exports=function(n){var e=this.__data__,t=r(e,n);return!(t<0)&&(t==e.length-1?e.pop():o.call(e,t,1),--this.size,!0)}},function(n,e,t){var r=t(20);n.exports=function(n){var e=this.__data__,t=r(e,n);return t<0?void 0:e[t][1]}},function(n,e,t){var r=t(20);n.exports=function(n){return r(this.__data__,n)>-1}},function(n,e,t){var r=t(20);n.exports=function(n,e){var t=this.__data__,o=r(t,n);return o<0?(++this.size,t.push([n,e])):t[o][1]=e,this}},function(n,e,t){var r=t(19);n.exports=function(){this.__data__=new r,this.size=0}},function(n,e){n.exports=function(n){var e=this.__data__,t=e.delete(n);return this.size=e.size,t}},function(n,e){n.exports=function(n){return this.__data__.get(n)}},function(n,e){n.exports=function(n){return this.__data__.has(n)}},function(n,e,t){var r=t(19),o=t(39),a=t(41);n.exports=function(n,e){var t=this.__data__;if(t instanceof r){var i=t.__data__;if(!o||i.length<199)return i.push([n,e]),this.size=++t.size,this;t=this.__data__=new a(i)}return t.set(n,e),this.size=t.size,this}},function(n,e,t){var r=t(71),o=t(164),a=t(40),i=t(72),s=/^\[object .+?Constructor\]$/,c=Function.prototype,l=Object.prototype,p=c.toString,u=l.hasOwnProperty,d=RegExp("^"+p.call(u).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$");n.exports=function(n){return!(!a(n)||o(n))&&(r(n)?d:s).test(i(n))}},function(n,e,t){var r,o=t(165),a=(r=/[^.]+$/.exec(o&&o.keys&&o.keys.IE_PROTO||""))?"Symbol(src)_1."+r:"";n.exports=function(n){return!!a&&a in n}},function(n,e,t){var r=t(7)["__core-js_shared__"];n.exports=r},function(n,e){n.exports=function(n,e){return null==n?void 0:n[e]}},function(n,e,t){var r=t(168),o=t(19),a=t(39);n.exports=function(){this.size=0,this.__data__={hash:new r,map:new(a||o),string:new r}}},function(n,e,t){var r=t(169),o=t(170),a=t(171),i=t(172),s=t(173);function c(n){var e=-1,t=null==n?0:n.length;for(this.clear();++e<t;){var r=n[e];this.set(r[0],r[1])}}c.prototype.clear=r,c.prototype.delete=o,c.prototype.get=a,c.prototype.has=i,c.prototype.set=s,n.exports=c},function(n,e,t){var r=t(21);n.exports=function(){this.__data__=r?r(null):{},this.size=0}},function(n,e){n.exports=function(n){var e=this.has(n)&&delete this.__data__[n];return this.size-=e?1:0,e}},function(n,e,t){var r=t(21),o=Object.prototype.hasOwnProperty;n.exports=function(n){var e=this.__data__;if(r){var t=e[n];return"__lodash_hash_undefined__"===t?void 0:t}return o.call(e,n)?e[n]:void 0}},function(n,e,t){var r=t(21),o=Object.prototype.hasOwnProperty;n.exports=function(n){var e=this.__data__;return r?void 0!==e[n]:o.call(e,n)}},function(n,e,t){var r=t(21);n.exports=function(n,e){var t=this.__data__;return this.size+=this.has(n)?0:1,t[n]=r&&void 0===e?"__lodash_hash_undefined__":e,this}},function(n,e,t){var r=t(22);n.exports=function(n){var e=r(this,n).delete(n);return this.size-=e?1:0,e}},function(n,e){n.exports=function(n){var e=typeof n;return"string"==e||"number"==e||"symbol"==e||"boolean"==e?"__proto__"!==n:null===n}},function(n,e,t){var r=t(22);n.exports=function(n){return r(this,n).get(n)}},function(n,e,t){var r=t(22);n.exports=function(n){return r(this,n).has(n)}},function(n,e,t){var r=t(22);n.exports=function(n,e){var t=r(this,n),o=t.size;return t.set(n,e),this.size+=t.size==o?0:1,this}},function(n,e,t){var r=t(69),o=t(74),a=t(183),i=t(186),s=t(202),c=t(5),l=t(78),p=t(80),u="[object Object]",d=Object.prototype.hasOwnProperty;n.exports=function(n,e,t,m,f,h){var g=c(n),v=c(e),b=g?"[object Array]":s(n),y=v?"[object Array]":s(e),x=(b="[object Arguments]"==b?u:b)==u,_=(y="[object Arguments]"==y?u:y)==u,w=b==y;if(w&&l(n)){if(!l(e))return!1;g=!0,x=!1}if(w&&!x)return h||(h=new r),g||p(n)?o(n,e,t,m,f,h):a(n,e,b,t,m,f,h);if(!(1&t)){var k=x&&d.call(n,"__wrapped__"),S=_&&d.call(e,"__wrapped__");if(k||S){var T=k?n.value():n,j=S?e.value():e;return h||(h=new r),f(T,j,t,m,h)}}return!!w&&(h||(h=new r),i(n,e,t,m,f,h))}},function(n,e){n.exports=function(n){return this.__data__.set(n,"__lodash_hash_undefined__"),this}},function(n,e){n.exports=function(n){return this.__data__.has(n)}},function(n,e){n.exports=function(n,e){for(var t=-1,r=null==n?0:n.length;++t<r;)if(e(n[t],t,n))return!0;return!1}},function(n,e,t){var r=t(15),o=t(184),a=t(70),i=t(74),s=t(185),c=t(42),l=r?r.prototype:void 0,p=l?l.valueOf:void 0;n.exports=function(n,e,t,r,l,u,d){switch(t){case"[object DataView]":if(n.byteLength!=e.byteLength||n.byteOffset!=e.byteOffset)return!1;n=n.buffer,e=e.buffer;case"[object ArrayBuffer]":return!(n.byteLength!=e.byteLength||!u(new o(n),new o(e)));case"[object Boolean]":case"[object Date]":case"[object Number]":return a(+n,+e);case"[object Error]":return n.name==e.name&&n.message==e.message;case"[object RegExp]":case"[object String]":return n==e+"";case"[object Map]":var m=s;case"[object Set]":var f=1&r;if(m||(m=c),n.size!=e.size&&!f)return!1;var h=d.get(n);if(h)return h==e;r|=2,d.set(n,e);var g=i(m(n),m(e),r,l,u,d);return d.delete(n),g;case"[object Symbol]":if(p)return p.call(n)==p.call(e)}return!1}},function(n,e,t){var r=t(7).Uint8Array;n.exports=r},function(n,e){n.exports=function(n){var e=-1,t=Array(n.size);return n.forEach((function(n,r){t[++e]=[r,n]})),t}},function(n,e,t){var r=t(187),o=Object.prototype.hasOwnProperty;n.exports=function(n,e,t,a,i,s){var c=1&t,l=r(n),p=l.length;if(p!=r(e).length&&!c)return!1;for(var u=p;u--;){var d=l[u];if(!(c?d in e:o.call(e,d)))return!1}var m=s.get(n),f=s.get(e);if(m&&f)return m==e&&f==n;var h=!0;s.set(n,e),s.set(e,n);for(var g=c;++u<p;){var v=n[d=l[u]],b=e[d];if(a)var y=c?a(b,v,d,e,n,s):a(v,b,d,n,e,s);if(!(void 0===y?v===b||i(v,b,t,a,s):y)){h=!1;break}g||(g="constructor"==d)}if(h&&!g){var x=n.constructor,_=e.constructor;x==_||!("constructor"in n)||!("constructor"in e)||"function"==typeof x&&x instanceof x&&"function"==typeof _&&_ instanceof _||(h=!1)}return s.delete(n),s.delete(e),h}},function(n,e,t){var r=t(188),o=t(189),a=t(77);n.exports=function(n){return r(n,a,o)}},function(n,e,t){var r=t(67),o=t(5);n.exports=function(n,e,t){var a=e(n);return o(n)?a:r(a,t(n))}},function(n,e,t){var r=t(190),o=t(191),a=Object.prototype.propertyIsEnumerable,i=Object.getOwnPropertySymbols,s=i?function(n){return null==n?[]:(n=Object(n),r(i(n),(function(e){return a.call(n,e)})))}:o;n.exports=s},function(n,e){n.exports=function(n,e){for(var t=-1,r=null==n?0:n.length,o=0,a=[];++t<r;){var i=n[t];e(i,t,n)&&(a[o++]=i)}return a}},function(n,e){n.exports=function(){return[]}},function(n,e,t){var r=t(193),o=t(38),a=t(5),i=t(78),s=t(79),c=t(80),l=Object.prototype.hasOwnProperty;n.exports=function(n,e){var t=a(n),p=!t&&o(n),u=!t&&!p&&i(n),d=!t&&!p&&!u&&c(n),m=t||p||u||d,f=m?r(n.length,String):[],h=f.length;for(var g in n)!e&&!l.call(n,g)||m&&("length"==g||u&&("offset"==g||"parent"==g)||d&&("buffer"==g||"byteLength"==g||"byteOffset"==g)||s(g,h))||f.push(g);return f}},function(n,e){n.exports=function(n,e){for(var t=-1,r=Array(n);++t<n;)r[t]=e(t);return r}},function(n,e){n.exports=function(){return!1}},function(n,e,t){var r=t(13),o=t(43),a=t(12),i={};i["[object Float32Array]"]=i["[object Float64Array]"]=i["[object Int8Array]"]=i["[object Int16Array]"]=i["[object Int32Array]"]=i["[object Uint8Array]"]=i["[object Uint8ClampedArray]"]=i["[object Uint16Array]"]=i["[object Uint32Array]"]=!0,i["[object Arguments]"]=i["[object Array]"]=i["[object ArrayBuffer]"]=i["[object Boolean]"]=i["[object DataView]"]=i["[object Date]"]=i["[object Error]"]=i["[object Function]"]=i["[object Map]"]=i["[object Number]"]=i["[object Object]"]=i["[object RegExp]"]=i["[object Set]"]=i["[object String]"]=i["[object WeakMap]"]=!1,n.exports=function(n){return a(n)&&o(n.length)&&!!i[r(n)]}},function(n,e){n.exports=function(n){return function(e){return n(e)}}},function(n,e,t){(function(n){var r=t(68),o=e&&!e.nodeType&&e,a=o&&"object"==typeof n&&n&&!n.nodeType&&n,i=a&&a.exports===o&&r.process,s=function(){try{var n=a&&a.require&&a.require("util").types;return n||i&&i.binding&&i.binding("util")}catch(n){}}();n.exports=s}).call(this,t(50)(n))},function(n,e,t){var r=t(199),o=t(200),a=Object.prototype.hasOwnProperty;n.exports=function(n){if(!r(n))return o(n);var e=[];for(var t in Object(n))a.call(n,t)&&"constructor"!=t&&e.push(t);return e}},function(n,e){var t=Object.prototype;n.exports=function(n){var e=n&&n.constructor;return n===("function"==typeof e&&e.prototype||t)}},function(n,e,t){var r=t(201)(Object.keys,Object);n.exports=r},function(n,e){n.exports=function(n,e){return function(t){return n(e(t))}}},function(n,e,t){var r=t(203),o=t(39),a=t(204),i=t(82),s=t(205),c=t(13),l=t(72),p=l(r),u=l(o),d=l(a),m=l(i),f=l(s),h=c;(r&&"[object DataView]"!=h(new r(new ArrayBuffer(1)))||o&&"[object Map]"!=h(new o)||a&&"[object Promise]"!=h(a.resolve())||i&&"[object Set]"!=h(new i)||s&&"[object WeakMap]"!=h(new s))&&(h=function(n){var e=c(n),t="[object Object]"==e?n.constructor:void 0,r=t?l(t):"";if(r)switch(r){case p:return"[object DataView]";case u:return"[object Map]";case d:return"[object Promise]";case m:return"[object Set]";case f:return"[object WeakMap]"}return e}),n.exports=h},function(n,e,t){var r=t(10)(t(7),"DataView");n.exports=r},function(n,e,t){var r=t(10)(t(7),"Promise");n.exports=r},function(n,e,t){var r=t(10)(t(7),"WeakMap");n.exports=r},function(n,e,t){var r=t(83),o=t(77);n.exports=function(n){for(var e=o(n),t=e.length;t--;){var a=e[t],i=n[a];e[t]=[a,i,r(i)]}return e}},function(n,e,t){var r=t(73),o=t(208),a=t(215),i=t(44),s=t(83),c=t(84),l=t(23);n.exports=function(n,e){return i(n)&&s(e)?c(l(n),e):function(t){var i=o(t,n);return void 0===i&&i===e?a(t,n):r(e,i,3)}}},function(n,e,t){var r=t(85);n.exports=function(n,e,t){var o=null==n?void 0:r(n,e);return void 0===o?t:o}},function(n,e,t){var r=t(210),o=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,a=/\\(\\)?/g,i=r((function(n){var e=[];return 46===n.charCodeAt(0)&&e.push(""),n.replace(o,(function(n,t,r,o){e.push(r?o.replace(a,"$1"):t||n)})),e}));n.exports=i},function(n,e,t){var r=t(211);n.exports=function(n){var e=r(n,(function(n){return 500===t.size&&t.clear(),n})),t=e.cache;return e}},function(n,e,t){var r=t(41);function o(n,e){if("function"!=typeof n||null!=e&&"function"!=typeof e)throw new TypeError("Expected a function");var t=function(){var r=arguments,o=e?e.apply(this,r):r[0],a=t.cache;if(a.has(o))return a.get(o);var i=n.apply(this,r);return t.cache=a.set(o,i)||a,i};return t.cache=new(o.Cache||r),t}o.Cache=r,n.exports=o},function(n,e,t){var r=t(213);n.exports=function(n){return null==n?"":r(n)}},function(n,e,t){var r=t(15),o=t(214),a=t(5),i=t(45),s=r?r.prototype:void 0,c=s?s.toString:void 0;n.exports=function n(e){if("string"==typeof e)return e;if(a(e))return o(e,n)+"";if(i(e))return c?c.call(e):"";var t=e+"";return"0"==t&&1/e==-1/0?"-0":t}},function(n,e){n.exports=function(n,e){for(var t=-1,r=null==n?0:n.length,o=Array(r);++t<r;)o[t]=e(n[t],t,n);return o}},function(n,e,t){var r=t(216),o=t(217);n.exports=function(n,e){return null!=n&&o(n,e,r)}},function(n,e){n.exports=function(n,e){return null!=n&&e in Object(n)}},function(n,e,t){var r=t(86),o=t(38),a=t(5),i=t(79),s=t(43),c=t(23);n.exports=function(n,e,t){for(var l=-1,p=(e=r(e,n)).length,u=!1;++l<p;){var d=c(e[l]);if(!(u=null!=n&&t(n,d)))break;n=n[d]}return u||++l!=p?u:!!(p=null==n?0:n.length)&&s(p)&&i(d,p)&&(a(n)||o(n))}},function(n,e,t){var r=t(219),o=t(220),a=t(44),i=t(23);n.exports=function(n){return a(n)?r(i(n)):o(n)}},function(n,e){n.exports=function(n){return function(e){return null==e?void 0:e[n]}}},function(n,e,t){var r=t(85);n.exports=function(n){return function(e){return r(e,n)}}},function(n,e,t){var r=t(46),o=t(222),a=t(224);n.exports=function(n,e){return a(o(n,e,r),n+"")}},function(n,e,t){var r=t(223),o=Math.max;n.exports=function(n,e,t){return e=o(void 0===e?n.length-1:e,0),function(){for(var a=arguments,i=-1,s=o(a.length-e,0),c=Array(s);++i<s;)c[i]=a[e+i];i=-1;for(var l=Array(e+1);++i<e;)l[i]=a[i];return l[e]=t(c),r(n,this,l)}}},function(n,e){n.exports=function(n,e,t){switch(t.length){case 0:return n.call(e);case 1:return n.call(e,t[0]);case 2:return n.call(e,t[0],t[1]);case 3:return n.call(e,t[0],t[1],t[2])}return n.apply(e,t)}},function(n,e,t){var r=t(225),o=t(228)(r);n.exports=o},function(n,e,t){var r=t(226),o=t(227),a=t(46),i=o?function(n,e){return o(n,"toString",{configurable:!0,enumerable:!1,value:r(e),writable:!0})}:a;n.exports=i},function(n,e){n.exports=function(n){return function(){return n}}},function(n,e,t){var r=t(10),o=function(){try{var n=r(Object,"defineProperty");return n({},"",{}),n}catch(n){}}();n.exports=o},function(n,e){var t=Date.now;n.exports=function(n){var e=0,r=0;return function(){var o=t(),a=16-(o-r);if(r=o,a>0){if(++e>=800)return arguments[0]}else e=0;return n.apply(void 0,arguments)}}},function(n,e,t){var r=t(75),o=t(230),a=t(235),i=t(76),s=t(236),c=t(42);n.exports=function(n,e,t){var l=-1,p=o,u=n.length,d=!0,m=[],f=m;if(t)d=!1,p=a;else if(u>=200){var h=e?null:s(n);if(h)return c(h);d=!1,p=i,f=new r}else f=e?[]:m;n:for(;++l<u;){var g=n[l],v=e?e(g):g;if(g=t||0!==g?g:0,d&&v==v){for(var b=f.length;b--;)if(f[b]===v)continue n;e&&f.push(v),m.push(g)}else p(f,v,t)||(f!==m&&f.push(v),m.push(g))}return m}},function(n,e,t){var r=t(231);n.exports=function(n,e){return!!(null==n?0:n.length)&&r(n,e,0)>-1}},function(n,e,t){var r=t(232),o=t(233),a=t(234);n.exports=function(n,e,t){return e==e?a(n,e,t):r(n,o,t)}},function(n,e){n.exports=function(n,e,t,r){for(var o=n.length,a=t+(r?1:-1);r?a--:++a<o;)if(e(n[a],a,n))return a;return-1}},function(n,e){n.exports=function(n){return n!=n}},function(n,e){n.exports=function(n,e,t){for(var r=t-1,o=n.length;++r<o;)if(n[r]===e)return r;return-1}},function(n,e){n.exports=function(n,e,t){for(var r=-1,o=null==n?0:n.length;++r<o;)if(t(e,n[r]))return!0;return!1}},function(n,e,t){var r=t(82),o=t(237),a=t(42),i=r&&1/a(new r([,-0]))[1]==1/0?function(n){return new r(n)}:o;n.exports=i},function(n,e){n.exports=function(){}},function(n,e,t){var r=t(81),o=t(12);n.exports=function(n){return o(n)&&r(n)}},function(n,e,t){},function(n,e,t){},function(n,e,t){"use strict";t(87)},function(n,e,t){"use strict";t(88)},function(n,e,t){},function(n,e,t){},function(n,e,t){"use strict";t(89)},function(n,e,t){"use strict";t(90)},function(n,e,t){"use strict";t.r(e);
/*!
 * Vue.js v2.7.16
 * (c) 2014-2023 Evan You
 * Released under the MIT License.
 */
var r=Object.freeze({}),o=Array.isArray;function a(n){return null==n}function i(n){return null!=n}function s(n){return!0===n}function c(n){return"string"==typeof n||"number"==typeof n||"symbol"==typeof n||"boolean"==typeof n}function l(n){return"function"==typeof n}function p(n){return null!==n&&"object"==typeof n}var u=Object.prototype.toString;function d(n){return"[object Object]"===u.call(n)}function m(n){return"[object RegExp]"===u.call(n)}function f(n){var e=parseFloat(String(n));return e>=0&&Math.floor(e)===e&&isFinite(n)}function h(n){return i(n)&&"function"==typeof n.then&&"function"==typeof n.catch}function g(n){return null==n?"":Array.isArray(n)||d(n)&&n.toString===u?JSON.stringify(n,v,2):String(n)}function v(n,e){return e&&e.__v_isRef?e.value:e}function b(n){var e=parseFloat(n);return isNaN(e)?n:e}function y(n,e){for(var t=Object.create(null),r=n.split(","),o=0;o<r.length;o++)t[r[o]]=!0;return e?function(n){return t[n.toLowerCase()]}:function(n){return t[n]}}y("slot,component",!0);var x=y("key,ref,slot,slot-scope,is");function _(n,e){var t=n.length;if(t){if(e===n[t-1])return void(n.length=t-1);var r=n.indexOf(e);if(r>-1)return n.splice(r,1)}}var w=Object.prototype.hasOwnProperty;function k(n,e){return w.call(n,e)}function S(n){var e=Object.create(null);return function(t){return e[t]||(e[t]=n(t))}}var T=/-(\w)/g,j=S((function(n){return n.replace(T,(function(n,e){return e?e.toUpperCase():""}))})),E=S((function(n){return n.charAt(0).toUpperCase()+n.slice(1)})),A=/\B([A-Z])/g,O=S((function(n){return n.replace(A,"-$1").toLowerCase()}));var C=Function.prototype.bind?function(n,e){return n.bind(e)}:function(n,e){function t(t){var r=arguments.length;return r?r>1?n.apply(e,arguments):n.call(e,t):n.call(e)}return t._length=n.length,t};function I(n,e){e=e||0;for(var t=n.length-e,r=new Array(t);t--;)r[t]=n[t+e];return r}function P(n,e){for(var t in e)n[t]=e[t];return n}function $(n){for(var e={},t=0;t<n.length;t++)n[t]&&P(e,n[t]);return e}function q(n,e,t){}var z=function(n,e,t){return!1},B=function(n){return n};function R(n,e){if(n===e)return!0;var t=p(n),r=p(e);if(!t||!r)return!t&&!r&&String(n)===String(e);try{var o=Array.isArray(n),a=Array.isArray(e);if(o&&a)return n.length===e.length&&n.every((function(n,t){return R(n,e[t])}));if(n instanceof Date&&e instanceof Date)return n.getTime()===e.getTime();if(o||a)return!1;var i=Object.keys(n),s=Object.keys(e);return i.length===s.length&&i.every((function(t){return R(n[t],e[t])}))}catch(n){return!1}}function L(n,e){for(var t=0;t<n.length;t++)if(R(n[t],e))return t;return-1}function N(n){var e=!1;return function(){e||(e=!0,n.apply(this,arguments))}}function M(n,e){return n===e?0===n&&1/n!=1/e:n==n||e==e}var D=["component","directive","filter"],F=["beforeCreate","created","beforeMount","mounted","beforeUpdate","updated","beforeDestroy","destroyed","activated","deactivated","errorCaptured","serverPrefetch","renderTracked","renderTriggered"],U={optionMergeStrategies:Object.create(null),silent:!1,productionTip:!1,devtools:!1,performance:!1,errorHandler:null,warnHandler:null,ignoredElements:[],keyCodes:Object.create(null),isReservedTag:z,isReservedAttr:z,isUnknownElement:z,getTagNamespace:q,parsePlatformTagName:B,mustUseProp:z,async:!0,_lifecycleHooks:F},H=/a-zA-Z\u00B7\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u037D\u037F-\u1FFF\u200C-\u200D\u203F-\u2040\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD/;function V(n){var e=(n+"").charCodeAt(0);return 36===e||95===e}function G(n,e,t,r){Object.defineProperty(n,e,{value:t,enumerable:!!r,writable:!0,configurable:!0})}var J=new RegExp("[^".concat(H.source,".$_\\d]"));var W="__proto__"in{},Y="undefined"!=typeof window,X=Y&&window.navigator.userAgent.toLowerCase(),Z=X&&/msie|trident/.test(X),Q=X&&X.indexOf("msie 9.0")>0,K=X&&X.indexOf("edge/")>0;X&&X.indexOf("android");var nn=X&&/iphone|ipad|ipod|ios/.test(X);X&&/chrome\/\d+/.test(X),X&&/phantomjs/.test(X);var en,tn=X&&X.match(/firefox\/(\d+)/),rn={}.watch,on=!1;if(Y)try{var an={};Object.defineProperty(an,"passive",{get:function(){on=!0}}),window.addEventListener("test-passive",null,an)}catch(n){}var sn=function(){return void 0===en&&(en=!Y&&"undefined"!=typeof global&&(global.process&&"server"===global.process.env.VUE_ENV)),en},cn=Y&&window.__VUE_DEVTOOLS_GLOBAL_HOOK__;function ln(n){return"function"==typeof n&&/native code/.test(n.toString())}var pn,un="undefined"!=typeof Symbol&&ln(Symbol)&&"undefined"!=typeof Reflect&&ln(Reflect.ownKeys);pn="undefined"!=typeof Set&&ln(Set)?Set:function(){function n(){this.set=Object.create(null)}return n.prototype.has=function(n){return!0===this.set[n]},n.prototype.add=function(n){this.set[n]=!0},n.prototype.clear=function(){this.set=Object.create(null)},n}();var dn=null;function mn(n){void 0===n&&(n=null),n||dn&&dn._scope.off(),dn=n,n&&n._scope.on()}var fn=function(){function n(n,e,t,r,o,a,i,s){this.tag=n,this.data=e,this.children=t,this.text=r,this.elm=o,this.ns=void 0,this.context=a,this.fnContext=void 0,this.fnOptions=void 0,this.fnScopeId=void 0,this.key=e&&e.key,this.componentOptions=i,this.componentInstance=void 0,this.parent=void 0,this.raw=!1,this.isStatic=!1,this.isRootInsert=!0,this.isComment=!1,this.isCloned=!1,this.isOnce=!1,this.asyncFactory=s,this.asyncMeta=void 0,this.isAsyncPlaceholder=!1}return Object.defineProperty(n.prototype,"child",{get:function(){return this.componentInstance},enumerable:!1,configurable:!0}),n}(),hn=function(n){void 0===n&&(n="");var e=new fn;return e.text=n,e.isComment=!0,e};function gn(n){return new fn(void 0,void 0,void 0,String(n))}function vn(n){var e=new fn(n.tag,n.data,n.children&&n.children.slice(),n.text,n.elm,n.context,n.componentOptions,n.asyncFactory);return e.ns=n.ns,e.isStatic=n.isStatic,e.key=n.key,e.isComment=n.isComment,e.fnContext=n.fnContext,e.fnOptions=n.fnOptions,e.fnScopeId=n.fnScopeId,e.asyncMeta=n.asyncMeta,e.isCloned=!0,e}"function"==typeof SuppressedError&&SuppressedError;var bn=0,yn=[],xn=function(){function n(){this._pending=!1,this.id=bn++,this.subs=[]}return n.prototype.addSub=function(n){this.subs.push(n)},n.prototype.removeSub=function(n){this.subs[this.subs.indexOf(n)]=null,this._pending||(this._pending=!0,yn.push(this))},n.prototype.depend=function(e){n.target&&n.target.addDep(this)},n.prototype.notify=function(n){var e=this.subs.filter((function(n){return n}));for(var t=0,r=e.length;t<r;t++){0,e[t].update()}},n}();xn.target=null;var _n=[];function wn(n){_n.push(n),xn.target=n}function kn(){_n.pop(),xn.target=_n[_n.length-1]}var Sn=Array.prototype,Tn=Object.create(Sn);["push","pop","shift","unshift","splice","sort","reverse"].forEach((function(n){var e=Sn[n];G(Tn,n,(function(){for(var t=[],r=0;r<arguments.length;r++)t[r]=arguments[r];var o,a=e.apply(this,t),i=this.__ob__;switch(n){case"push":case"unshift":o=t;break;case"splice":o=t.slice(2)}return o&&i.observeArray(o),i.dep.notify(),a}))}));var jn=Object.getOwnPropertyNames(Tn),En={},An=!0;function On(n){An=n}var Cn={notify:q,depend:q,addSub:q,removeSub:q},In=function(){function n(n,e,t){if(void 0===e&&(e=!1),void 0===t&&(t=!1),this.value=n,this.shallow=e,this.mock=t,this.dep=t?Cn:new xn,this.vmCount=0,G(n,"__ob__",this),o(n)){if(!t)if(W)n.__proto__=Tn;else for(var r=0,a=jn.length;r<a;r++){G(n,s=jn[r],Tn[s])}e||this.observeArray(n)}else{var i=Object.keys(n);for(r=0;r<i.length;r++){var s;$n(n,s=i[r],En,void 0,e,t)}}}return n.prototype.observeArray=function(n){for(var e=0,t=n.length;e<t;e++)Pn(n[e],!1,this.mock)},n}();function Pn(n,e,t){return n&&k(n,"__ob__")&&n.__ob__ instanceof In?n.__ob__:!An||!t&&sn()||!o(n)&&!d(n)||!Object.isExtensible(n)||n.__v_skip||Mn(n)||n instanceof fn?void 0:new In(n,e,t)}function $n(n,e,t,r,a,i,s){void 0===s&&(s=!1);var c=new xn,l=Object.getOwnPropertyDescriptor(n,e);if(!l||!1!==l.configurable){var p=l&&l.get,u=l&&l.set;p&&!u||t!==En&&2!==arguments.length||(t=n[e]);var d=a?t&&t.__ob__:Pn(t,!1,i);return Object.defineProperty(n,e,{enumerable:!0,configurable:!0,get:function(){var e=p?p.call(n):t;return xn.target&&(c.depend(),d&&(d.dep.depend(),o(e)&&Bn(e))),Mn(e)&&!a?e.value:e},set:function(e){var r=p?p.call(n):t;if(M(r,e)){if(u)u.call(n,e);else{if(p)return;if(!a&&Mn(r)&&!Mn(e))return void(r.value=e);t=e}d=a?e&&e.__ob__:Pn(e,!1,i),c.notify()}}}),c}}function qn(n,e,t){if(!Nn(n)){var r=n.__ob__;return o(n)&&f(e)?(n.length=Math.max(n.length,e),n.splice(e,1,t),r&&!r.shallow&&r.mock&&Pn(t,!1,!0),t):e in n&&!(e in Object.prototype)?(n[e]=t,t):n._isVue||r&&r.vmCount?t:r?($n(r.value,e,t,void 0,r.shallow,r.mock),r.dep.notify(),t):(n[e]=t,t)}}function zn(n,e){if(o(n)&&f(e))n.splice(e,1);else{var t=n.__ob__;n._isVue||t&&t.vmCount||Nn(n)||k(n,e)&&(delete n[e],t&&t.dep.notify())}}function Bn(n){for(var e=void 0,t=0,r=n.length;t<r;t++)(e=n[t])&&e.__ob__&&e.__ob__.dep.depend(),o(e)&&Bn(e)}function Rn(n){return Ln(n,!0),G(n,"__v_isShallow",!0),n}function Ln(n,e){if(!Nn(n)){Pn(n,e,sn());0}}function Nn(n){return!(!n||!n.__v_isReadonly)}function Mn(n){return!(!n||!0!==n.__v_isRef)}function Dn(n,e,t){Object.defineProperty(n,t,{enumerable:!0,configurable:!0,get:function(){var n=e[t];if(Mn(n))return n.value;var r=n&&n.__ob__;return r&&r.dep.depend(),n},set:function(n){var r=e[t];Mn(r)&&!Mn(n)?r.value=n:e[t]=n}})}"".concat("watcher"," callback"),"".concat("watcher"," getter"),"".concat("watcher"," cleanup");var Fn;var Un=function(){function n(n){void 0===n&&(n=!1),this.detached=n,this.active=!0,this.effects=[],this.cleanups=[],this.parent=Fn,!n&&Fn&&(this.index=(Fn.scopes||(Fn.scopes=[])).push(this)-1)}return n.prototype.run=function(n){if(this.active){var e=Fn;try{return Fn=this,n()}finally{Fn=e}}else 0},n.prototype.on=function(){Fn=this},n.prototype.off=function(){Fn=this.parent},n.prototype.stop=function(n){if(this.active){var e=void 0,t=void 0;for(e=0,t=this.effects.length;e<t;e++)this.effects[e].teardown();for(e=0,t=this.cleanups.length;e<t;e++)this.cleanups[e]();if(this.scopes)for(e=0,t=this.scopes.length;e<t;e++)this.scopes[e].stop(!0);if(!this.detached&&this.parent&&!n){var r=this.parent.scopes.pop();r&&r!==this&&(this.parent.scopes[this.index]=r,r.index=this.index)}this.parent=void 0,this.active=!1}},n}();function Hn(n){var e=n._provided,t=n.$parent&&n.$parent._provided;return t===e?n._provided=Object.create(t):e}var Vn=S((function(n){var e="&"===n.charAt(0),t="~"===(n=e?n.slice(1):n).charAt(0),r="!"===(n=t?n.slice(1):n).charAt(0);return{name:n=r?n.slice(1):n,once:t,capture:r,passive:e}}));function Gn(n,e){function t(){var n=t.fns;if(!o(n))return Ae(n,null,arguments,e,"v-on handler");for(var r=n.slice(),a=0;a<r.length;a++)Ae(r[a],null,arguments,e,"v-on handler")}return t.fns=n,t}function Jn(n,e,t,r,o,i){var c,l,p,u;for(c in n)l=n[c],p=e[c],u=Vn(c),a(l)||(a(p)?(a(l.fns)&&(l=n[c]=Gn(l,i)),s(u.once)&&(l=n[c]=o(u.name,l,u.capture)),t(u.name,l,u.capture,u.passive,u.params)):l!==p&&(p.fns=l,n[c]=p));for(c in e)a(n[c])&&r((u=Vn(c)).name,e[c],u.capture)}function Wn(n,e,t){var r;n instanceof fn&&(n=n.data.hook||(n.data.hook={}));var o=n[e];function c(){t.apply(this,arguments),_(r.fns,c)}a(o)?r=Gn([c]):i(o.fns)&&s(o.merged)?(r=o).fns.push(c):r=Gn([o,c]),r.merged=!0,n[e]=r}function Yn(n,e,t,r,o){if(i(e)){if(k(e,t))return n[t]=e[t],o||delete e[t],!0;if(k(e,r))return n[t]=e[r],o||delete e[r],!0}return!1}function Xn(n){return c(n)?[gn(n)]:o(n)?function n(e,t){var r,l,p,u,d=[];for(r=0;r<e.length;r++)a(l=e[r])||"boolean"==typeof l||(p=d.length-1,u=d[p],o(l)?l.length>0&&(Zn((l=n(l,"".concat(t||"","_").concat(r)))[0])&&Zn(u)&&(d[p]=gn(u.text+l[0].text),l.shift()),d.push.apply(d,l)):c(l)?Zn(u)?d[p]=gn(u.text+l):""!==l&&d.push(gn(l)):Zn(l)&&Zn(u)?d[p]=gn(u.text+l.text):(s(e._isVList)&&i(l.tag)&&a(l.key)&&i(t)&&(l.key="__vlist".concat(t,"_").concat(r,"__")),d.push(l)));return d}(n):void 0}function Zn(n){return i(n)&&i(n.text)&&!1===n.isComment}function Qn(n,e){var t,r,a,s,c=null;if(o(n)||"string"==typeof n)for(c=new Array(n.length),t=0,r=n.length;t<r;t++)c[t]=e(n[t],t);else if("number"==typeof n)for(c=new Array(n),t=0;t<n;t++)c[t]=e(t+1,t);else if(p(n))if(un&&n[Symbol.iterator]){c=[];for(var l=n[Symbol.iterator](),u=l.next();!u.done;)c.push(e(u.value,c.length)),u=l.next()}else for(a=Object.keys(n),c=new Array(a.length),t=0,r=a.length;t<r;t++)s=a[t],c[t]=e(n[s],s,t);return i(c)||(c=[]),c._isVList=!0,c}function Kn(n,e,t,r){var o,a=this.$scopedSlots[n];a?(t=t||{},r&&(t=P(P({},r),t)),o=a(t)||(l(e)?e():e)):o=this.$slots[n]||(l(e)?e():e);var i=t&&t.slot;return i?this.$createElement("template",{slot:i},o):o}function ne(n){return It(this.$options,"filters",n,!0)||B}function ee(n,e){return o(n)?-1===n.indexOf(e):n!==e}function te(n,e,t,r,o){var a=U.keyCodes[e]||t;return o&&r&&!U.keyCodes[e]?ee(o,r):a?ee(a,n):r?O(r)!==e:void 0===n}function re(n,e,t,r,a){if(t)if(p(t)){o(t)&&(t=$(t));var i=void 0,s=function(o){if("class"===o||"style"===o||x(o))i=n;else{var s=n.attrs&&n.attrs.type;i=r||U.mustUseProp(e,s,o)?n.domProps||(n.domProps={}):n.attrs||(n.attrs={})}var c=j(o),l=O(o);c in i||l in i||(i[o]=t[o],a&&((n.on||(n.on={}))["update:".concat(o)]=function(n){t[o]=n}))};for(var c in t)s(c)}else;return n}function oe(n,e){var t=this._staticTrees||(this._staticTrees=[]),r=t[n];return r&&!e||ie(r=t[n]=this.$options.staticRenderFns[n].call(this._renderProxy,this._c,this),"__static__".concat(n),!1),r}function ae(n,e,t){return ie(n,"__once__".concat(e).concat(t?"_".concat(t):""),!0),n}function ie(n,e,t){if(o(n))for(var r=0;r<n.length;r++)n[r]&&"string"!=typeof n[r]&&se(n[r],"".concat(e,"_").concat(r),t);else se(n,e,t)}function se(n,e,t){n.isStatic=!0,n.key=e,n.isOnce=t}function ce(n,e){if(e)if(d(e)){var t=n.on=n.on?P({},n.on):{};for(var r in e){var o=t[r],a=e[r];t[r]=o?[].concat(o,a):a}}else;return n}function le(n,e,t,r){e=e||{$stable:!t};for(var a=0;a<n.length;a++){var i=n[a];o(i)?le(i,e,t):i&&(i.proxy&&(i.fn.proxy=!0),e[i.key]=i.fn)}return r&&(e.$key=r),e}function pe(n,e){for(var t=0;t<e.length;t+=2){var r=e[t];"string"==typeof r&&r&&(n[e[t]]=e[t+1])}return n}function ue(n,e){return"string"==typeof n?e+n:n}function de(n){n._o=ae,n._n=b,n._s=g,n._l=Qn,n._t=Kn,n._q=R,n._i=L,n._m=oe,n._f=ne,n._k=te,n._b=re,n._v=gn,n._e=hn,n._u=le,n._g=ce,n._d=pe,n._p=ue}function me(n,e){if(!n||!n.length)return{};for(var t={},r=0,o=n.length;r<o;r++){var a=n[r],i=a.data;if(i&&i.attrs&&i.attrs.slot&&delete i.attrs.slot,a.context!==e&&a.fnContext!==e||!i||null==i.slot)(t.default||(t.default=[])).push(a);else{var s=i.slot,c=t[s]||(t[s]=[]);"template"===a.tag?c.push.apply(c,a.children||[]):c.push(a)}}for(var l in t)t[l].every(fe)&&delete t[l];return t}function fe(n){return n.isComment&&!n.asyncFactory||" "===n.text}function he(n){return n.isComment&&n.asyncFactory}function ge(n,e,t,o){var a,i=Object.keys(t).length>0,s=e?!!e.$stable:!i,c=e&&e.$key;if(e){if(e._normalized)return e._normalized;if(s&&o&&o!==r&&c===o.$key&&!i&&!o.$hasNormal)return o;for(var l in a={},e)e[l]&&"$"!==l[0]&&(a[l]=ve(n,t,l,e[l]))}else a={};for(var p in t)p in a||(a[p]=be(t,p));return e&&Object.isExtensible(e)&&(e._normalized=a),G(a,"$stable",s),G(a,"$key",c),G(a,"$hasNormal",i),a}function ve(n,e,t,r){var a=function(){var e=dn;mn(n);var t=arguments.length?r.apply(null,arguments):r({}),a=(t=t&&"object"==typeof t&&!o(t)?[t]:Xn(t))&&t[0];return mn(e),t&&(!a||1===t.length&&a.isComment&&!he(a))?void 0:t};return r.proxy&&Object.defineProperty(e,t,{get:a,enumerable:!0,configurable:!0}),a}function be(n,e){return function(){return n[e]}}function ye(n){return{get attrs(){if(!n._attrsProxy){var e=n._attrsProxy={};G(e,"_v_attr_proxy",!0),xe(e,n.$attrs,r,n,"$attrs")}return n._attrsProxy},get listeners(){n._listenersProxy||xe(n._listenersProxy={},n.$listeners,r,n,"$listeners");return n._listenersProxy},get slots(){return function(n){n._slotsProxy||we(n._slotsProxy={},n.$scopedSlots);return n._slotsProxy}(n)},emit:C(n.$emit,n),expose:function(e){e&&Object.keys(e).forEach((function(t){return Dn(n,e,t)}))}}}function xe(n,e,t,r,o){var a=!1;for(var i in e)i in n?e[i]!==t[i]&&(a=!0):(a=!0,_e(n,i,r,o));for(var i in n)i in e||(a=!0,delete n[i]);return a}function _e(n,e,t,r){Object.defineProperty(n,e,{enumerable:!0,configurable:!0,get:function(){return t[r][e]}})}function we(n,e){for(var t in e)n[t]=e[t];for(var t in n)t in e||delete n[t]}var ke=null;function Se(n,e){return(n.__esModule||un&&"Module"===n[Symbol.toStringTag])&&(n=n.default),p(n)?e.extend(n):n}function Te(n){if(o(n))for(var e=0;e<n.length;e++){var t=n[e];if(i(t)&&(i(t.componentOptions)||he(t)))return t}}function je(n,e,t,r,u,d){return(o(t)||c(t))&&(u=r,r=t,t=void 0),s(d)&&(u=2),function(n,e,t,r,c){if(i(t)&&i(t.__ob__))return hn();i(t)&&i(t.is)&&(e=t.is);if(!e)return hn();0;o(r)&&l(r[0])&&((t=t||{}).scopedSlots={default:r[0]},r.length=0);2===c?r=Xn(r):1===c&&(r=function(n){for(var e=0;e<n.length;e++)if(o(n[e]))return Array.prototype.concat.apply([],n);return n}(r));var u,d;if("string"==typeof e){var m=void 0;d=n.$vnode&&n.$vnode.ns||U.getTagNamespace(e),u=U.isReservedTag(e)?new fn(U.parsePlatformTagName(e),t,r,void 0,void 0,n):t&&t.pre||!i(m=It(n.$options,"components",e))?new fn(e,t,r,void 0,void 0,n):_t(m,t,n,r,e)}else u=_t(e,t,n,r);return o(u)?u:i(u)?(i(d)&&function n(e,t,r){e.ns=t,"foreignObject"===e.tag&&(t=void 0,r=!0);if(i(e.children))for(var o=0,c=e.children.length;o<c;o++){var l=e.children[o];i(l.tag)&&(a(l.ns)||s(r)&&"svg"!==l.tag)&&n(l,t,r)}}(u,d),i(t)&&function(n){p(n.style)&&Ue(n.style);p(n.class)&&Ue(n.class)}(t),u):hn()}(n,e,t,r,u)}function Ee(n,e,t){wn();try{if(e)for(var r=e;r=r.$parent;){var o=r.$options.errorCaptured;if(o)for(var a=0;a<o.length;a++)try{if(!1===o[a].call(r,n,e,t))return}catch(n){Oe(n,r,"errorCaptured hook")}}Oe(n,e,t)}finally{kn()}}function Ae(n,e,t,r,o){var a;try{(a=t?n.apply(e,t):n.call(e))&&!a._isVue&&h(a)&&!a._handled&&(a.catch((function(n){return Ee(n,r,o+" (Promise/async)")})),a._handled=!0)}catch(n){Ee(n,r,o)}return a}function Oe(n,e,t){if(U.errorHandler)try{return U.errorHandler.call(null,n,e,t)}catch(e){e!==n&&Ce(e,null,"config.errorHandler")}Ce(n,e,t)}function Ce(n,e,t){if(!Y||"undefined"==typeof console)throw n;console.error(n)}var Ie,Pe=!1,$e=[],qe=!1;function ze(){qe=!1;var n=$e.slice(0);$e.length=0;for(var e=0;e<n.length;e++)n[e]()}if("undefined"!=typeof Promise&&ln(Promise)){var Be=Promise.resolve();Ie=function(){Be.then(ze),nn&&setTimeout(q)},Pe=!0}else if(Z||"undefined"==typeof MutationObserver||!ln(MutationObserver)&&"[object MutationObserverConstructor]"!==MutationObserver.toString())Ie="undefined"!=typeof setImmediate&&ln(setImmediate)?function(){setImmediate(ze)}:function(){setTimeout(ze,0)};else{var Re=1,Le=new MutationObserver(ze),Ne=document.createTextNode(String(Re));Le.observe(Ne,{characterData:!0}),Ie=function(){Re=(Re+1)%2,Ne.data=String(Re)},Pe=!0}function Me(n,e){var t;if($e.push((function(){if(n)try{n.call(e)}catch(n){Ee(n,e,"nextTick")}else t&&t(e)})),qe||(qe=!0,Ie()),!n&&"undefined"!=typeof Promise)return new Promise((function(n){t=n}))}function De(n){return function(e,t){if(void 0===t&&(t=dn),t)return function(n,e,t){var r=n.$options;r[e]=Et(r[e],t)}(t,n,e)}}De("beforeMount"),De("mounted"),De("beforeUpdate"),De("updated"),De("beforeDestroy"),De("destroyed"),De("activated"),De("deactivated"),De("serverPrefetch"),De("renderTracked"),De("renderTriggered"),De("errorCaptured");var Fe=new pn;function Ue(n){return function n(e,t){var r,a,i=o(e);if(!i&&!p(e)||e.__v_skip||Object.isFrozen(e)||e instanceof fn)return;if(e.__ob__){var s=e.__ob__.dep.id;if(t.has(s))return;t.add(s)}if(i)for(r=e.length;r--;)n(e[r],t);else if(Mn(e))n(e.value,t);else for(a=Object.keys(e),r=a.length;r--;)n(e[a[r]],t)}(n,Fe),Fe.clear(),n}var He,Ve=0,Ge=function(){function n(n,e,t,r,o){var a,i;a=this,void 0===(i=Fn&&!Fn._vm?Fn:n?n._scope:void 0)&&(i=Fn),i&&i.active&&i.effects.push(a),(this.vm=n)&&o&&(n._watcher=this),r?(this.deep=!!r.deep,this.user=!!r.user,this.lazy=!!r.lazy,this.sync=!!r.sync,this.before=r.before):this.deep=this.user=this.lazy=this.sync=!1,this.cb=t,this.id=++Ve,this.active=!0,this.post=!1,this.dirty=this.lazy,this.deps=[],this.newDeps=[],this.depIds=new pn,this.newDepIds=new pn,this.expression="",l(e)?this.getter=e:(this.getter=function(n){if(!J.test(n)){var e=n.split(".");return function(n){for(var t=0;t<e.length;t++){if(!n)return;n=n[e[t]]}return n}}}(e),this.getter||(this.getter=q)),this.value=this.lazy?void 0:this.get()}return n.prototype.get=function(){var n;wn(this);var e=this.vm;try{n=this.getter.call(e,e)}catch(n){if(!this.user)throw n;Ee(n,e,'getter for watcher "'.concat(this.expression,'"'))}finally{this.deep&&Ue(n),kn(),this.cleanupDeps()}return n},n.prototype.addDep=function(n){var e=n.id;this.newDepIds.has(e)||(this.newDepIds.add(e),this.newDeps.push(n),this.depIds.has(e)||n.addSub(this))},n.prototype.cleanupDeps=function(){for(var n=this.deps.length;n--;){var e=this.deps[n];this.newDepIds.has(e.id)||e.removeSub(this)}var t=this.depIds;this.depIds=this.newDepIds,this.newDepIds=t,this.newDepIds.clear(),t=this.deps,this.deps=this.newDeps,this.newDeps=t,this.newDeps.length=0},n.prototype.update=function(){this.lazy?this.dirty=!0:this.sync?this.run():mt(this)},n.prototype.run=function(){if(this.active){var n=this.get();if(n!==this.value||p(n)||this.deep){var e=this.value;if(this.value=n,this.user){var t='callback for watcher "'.concat(this.expression,'"');Ae(this.cb,this.vm,[n,e],this.vm,t)}else this.cb.call(this.vm,n,e)}}},n.prototype.evaluate=function(){this.value=this.get(),this.dirty=!1},n.prototype.depend=function(){for(var n=this.deps.length;n--;)this.deps[n].depend()},n.prototype.teardown=function(){if(this.vm&&!this.vm._isBeingDestroyed&&_(this.vm._scope.effects,this),this.active){for(var n=this.deps.length;n--;)this.deps[n].removeSub(this);this.active=!1,this.onStop&&this.onStop()}},n}();function Je(n,e){He.$on(n,e)}function We(n,e){He.$off(n,e)}function Ye(n,e){var t=He;return function r(){var o=e.apply(null,arguments);null!==o&&t.$off(n,r)}}function Xe(n,e,t){He=n,Jn(e,t||{},Je,We,Ye,n),He=void 0}var Ze=null;function Qe(n){var e=Ze;return Ze=n,function(){Ze=e}}function Ke(n){for(;n&&(n=n.$parent);)if(n._inactive)return!0;return!1}function nt(n,e){if(e){if(n._directInactive=!1,Ke(n))return}else if(n._directInactive)return;if(n._inactive||null===n._inactive){n._inactive=!1;for(var t=0;t<n.$children.length;t++)nt(n.$children[t]);et(n,"activated")}}function et(n,e,t,r){void 0===r&&(r=!0),wn();var o=dn,a=Fn;r&&mn(n);var i=n.$options[e],s="".concat(e," hook");if(i)for(var c=0,l=i.length;c<l;c++)Ae(i[c],n,t||null,n,s);n._hasHookEvent&&n.$emit("hook:"+e),r&&(mn(o),a&&a.on()),kn()}var tt=[],rt=[],ot={},at=!1,it=!1,st=0;var ct=0,lt=Date.now;if(Y&&!Z){var pt=window.performance;pt&&"function"==typeof pt.now&&lt()>document.createEvent("Event").timeStamp&&(lt=function(){return pt.now()})}var ut=function(n,e){if(n.post){if(!e.post)return 1}else if(e.post)return-1;return n.id-e.id};function dt(){var n,e;for(ct=lt(),it=!0,tt.sort(ut),st=0;st<tt.length;st++)(n=tt[st]).before&&n.before(),e=n.id,ot[e]=null,n.run();var t=rt.slice(),r=tt.slice();st=tt.length=rt.length=0,ot={},at=it=!1,function(n){for(var e=0;e<n.length;e++)n[e]._inactive=!0,nt(n[e],!0)}(t),function(n){var e=n.length;for(;e--;){var t=n[e],r=t.vm;r&&r._watcher===t&&r._isMounted&&!r._isDestroyed&&et(r,"updated")}}(r),function(){for(var n=0;n<yn.length;n++){var e=yn[n];e.subs=e.subs.filter((function(n){return n})),e._pending=!1}yn.length=0}(),cn&&U.devtools&&cn.emit("flush")}function mt(n){var e=n.id;if(null==ot[e]&&(n!==xn.target||!n.noRecurse)){if(ot[e]=!0,it){for(var t=tt.length-1;t>st&&tt[t].id>n.id;)t--;tt.splice(t+1,0,n)}else tt.push(n);at||(at=!0,Me(dt))}}function ft(n,e){if(n){for(var t=Object.create(null),r=un?Reflect.ownKeys(n):Object.keys(n),o=0;o<r.length;o++){var a=r[o];if("__ob__"!==a){var i=n[a].from;if(i in e._provided)t[a]=e._provided[i];else if("default"in n[a]){var s=n[a].default;t[a]=l(s)?s.call(e):s}else 0}}return t}}function ht(n,e,t,a,i){var c,l=this,p=i.options;k(a,"_uid")?(c=Object.create(a))._original=a:(c=a,a=a._original);var u=s(p._compiled),d=!u;this.data=n,this.props=e,this.children=t,this.parent=a,this.listeners=n.on||r,this.injections=ft(p.inject,a),this.slots=function(){return l.$slots||ge(a,n.scopedSlots,l.$slots=me(t,a)),l.$slots},Object.defineProperty(this,"scopedSlots",{enumerable:!0,get:function(){return ge(a,n.scopedSlots,this.slots())}}),u&&(this.$options=p,this.$slots=this.slots(),this.$scopedSlots=ge(a,n.scopedSlots,this.$slots)),p._scopeId?this._c=function(n,e,t,r){var i=je(c,n,e,t,r,d);return i&&!o(i)&&(i.fnScopeId=p._scopeId,i.fnContext=a),i}:this._c=function(n,e,t,r){return je(c,n,e,t,r,d)}}function gt(n,e,t,r,o){var a=vn(n);return a.fnContext=t,a.fnOptions=r,e.slot&&((a.data||(a.data={})).slot=e.slot),a}function vt(n,e){for(var t in e)n[j(t)]=e[t]}function bt(n){return n.name||n.__name||n._componentTag}de(ht.prototype);var yt={init:function(n,e){if(n.componentInstance&&!n.componentInstance._isDestroyed&&n.data.keepAlive){var t=n;yt.prepatch(t,t)}else{(n.componentInstance=function(n,e){var t={_isComponent:!0,_parentVnode:n,parent:e},r=n.data.inlineTemplate;i(r)&&(t.render=r.render,t.staticRenderFns=r.staticRenderFns);return new n.componentOptions.Ctor(t)}(n,Ze)).$mount(e?n.elm:void 0,e)}},prepatch:function(n,e){var t=e.componentOptions;!function(n,e,t,o,a){var i=o.data.scopedSlots,s=n.$scopedSlots,c=!!(i&&!i.$stable||s!==r&&!s.$stable||i&&n.$scopedSlots.$key!==i.$key||!i&&n.$scopedSlots.$key),l=!!(a||n.$options._renderChildren||c),p=n.$vnode;n.$options._parentVnode=o,n.$vnode=o,n._vnode&&(n._vnode.parent=o),n.$options._renderChildren=a;var u=o.data.attrs||r;n._attrsProxy&&xe(n._attrsProxy,u,p.data&&p.data.attrs||r,n,"$attrs")&&(l=!0),n.$attrs=u,t=t||r;var d=n.$options._parentListeners;if(n._listenersProxy&&xe(n._listenersProxy,t,d||r,n,"$listeners"),n.$listeners=n.$options._parentListeners=t,Xe(n,t,d),e&&n.$options.props){On(!1);for(var m=n._props,f=n.$options._propKeys||[],h=0;h<f.length;h++){var g=f[h],v=n.$options.props;m[g]=Pt(g,v,e,n)}On(!0),n.$options.propsData=e}l&&(n.$slots=me(a,o.context),n.$forceUpdate())}(e.componentInstance=n.componentInstance,t.propsData,t.listeners,e,t.children)},insert:function(n){var e,t=n.context,r=n.componentInstance;r._isMounted||(r._isMounted=!0,et(r,"mounted")),n.data.keepAlive&&(t._isMounted?((e=r)._inactive=!1,rt.push(e)):nt(r,!0))},destroy:function(n){var e=n.componentInstance;e._isDestroyed||(n.data.keepAlive?function n(e,t){if(!(t&&(e._directInactive=!0,Ke(e))||e._inactive)){e._inactive=!0;for(var r=0;r<e.$children.length;r++)n(e.$children[r]);et(e,"deactivated")}}(e,!0):e.$destroy())}},xt=Object.keys(yt);function _t(n,e,t,c,l){if(!a(n)){var u=t.$options._base;if(p(n)&&(n=u.extend(n)),"function"==typeof n){var d;if(a(n.cid)&&void 0===(n=function(n,e){if(s(n.error)&&i(n.errorComp))return n.errorComp;if(i(n.resolved))return n.resolved;var t=ke;if(t&&i(n.owners)&&-1===n.owners.indexOf(t)&&n.owners.push(t),s(n.loading)&&i(n.loadingComp))return n.loadingComp;if(t&&!i(n.owners)){var r=n.owners=[t],o=!0,c=null,l=null;t.$on("hook:destroyed",(function(){return _(r,t)}));var u=function(n){for(var e=0,t=r.length;e<t;e++)r[e].$forceUpdate();n&&(r.length=0,null!==c&&(clearTimeout(c),c=null),null!==l&&(clearTimeout(l),l=null))},d=N((function(t){n.resolved=Se(t,e),o?r.length=0:u(!0)})),m=N((function(e){i(n.errorComp)&&(n.error=!0,u(!0))})),f=n(d,m);return p(f)&&(h(f)?a(n.resolved)&&f.then(d,m):h(f.component)&&(f.component.then(d,m),i(f.error)&&(n.errorComp=Se(f.error,e)),i(f.loading)&&(n.loadingComp=Se(f.loading,e),0===f.delay?n.loading=!0:c=setTimeout((function(){c=null,a(n.resolved)&&a(n.error)&&(n.loading=!0,u(!1))}),f.delay||200)),i(f.timeout)&&(l=setTimeout((function(){l=null,a(n.resolved)&&m(null)}),f.timeout)))),o=!1,n.loading?n.loadingComp:n.resolved}}(d=n,u)))return function(n,e,t,r,o){var a=hn();return a.asyncFactory=n,a.asyncMeta={data:e,context:t,children:r,tag:o},a}(d,e,t,c,l);e=e||{},Gt(n),i(e.model)&&function(n,e){var t=n.model&&n.model.prop||"value",r=n.model&&n.model.event||"input";(e.attrs||(e.attrs={}))[t]=e.model.value;var a=e.on||(e.on={}),s=a[r],c=e.model.callback;i(s)?(o(s)?-1===s.indexOf(c):s!==c)&&(a[r]=[c].concat(s)):a[r]=c}(n.options,e);var m=function(n,e,t){var r=e.options.props;if(!a(r)){var o={},s=n.attrs,c=n.props;if(i(s)||i(c))for(var l in r){var p=O(l);Yn(o,c,l,p,!0)||Yn(o,s,l,p,!1)}return o}}(e,n);if(s(n.options.functional))return function(n,e,t,a,s){var c=n.options,l={},p=c.props;if(i(p))for(var u in p)l[u]=Pt(u,p,e||r);else i(t.attrs)&&vt(l,t.attrs),i(t.props)&&vt(l,t.props);var d=new ht(t,l,s,a,n),m=c.render.call(null,d._c,d);if(m instanceof fn)return gt(m,t,d.parent,c,d);if(o(m)){for(var f=Xn(m)||[],h=new Array(f.length),g=0;g<f.length;g++)h[g]=gt(f[g],t,d.parent,c,d);return h}}(n,m,e,t,c);var f=e.on;if(e.on=e.nativeOn,s(n.options.abstract)){var g=e.slot;e={},g&&(e.slot=g)}!function(n){for(var e=n.hook||(n.hook={}),t=0;t<xt.length;t++){var r=xt[t],o=e[r],a=yt[r];o===a||o&&o._merged||(e[r]=o?wt(a,o):a)}}(e);var v=bt(n.options)||l;return new fn("vue-component-".concat(n.cid).concat(v?"-".concat(v):""),e,void 0,void 0,void 0,t,{Ctor:n,propsData:m,listeners:f,tag:l,children:c},d)}}}function wt(n,e){var t=function(t,r){n(t,r),e(t,r)};return t._merged=!0,t}var kt=q,St=U.optionMergeStrategies;function Tt(n,e,t){if(void 0===t&&(t=!0),!e)return n;for(var r,o,a,i=un?Reflect.ownKeys(e):Object.keys(e),s=0;s<i.length;s++)"__ob__"!==(r=i[s])&&(o=n[r],a=e[r],t&&k(n,r)?o!==a&&d(o)&&d(a)&&Tt(o,a):qn(n,r,a));return n}function jt(n,e,t){return t?function(){var r=l(e)?e.call(t,t):e,o=l(n)?n.call(t,t):n;return r?Tt(r,o):o}:e?n?function(){return Tt(l(e)?e.call(this,this):e,l(n)?n.call(this,this):n)}:e:n}function Et(n,e){var t=e?n?n.concat(e):o(e)?e:[e]:n;return t?function(n){for(var e=[],t=0;t<n.length;t++)-1===e.indexOf(n[t])&&e.push(n[t]);return e}(t):t}function At(n,e,t,r){var o=Object.create(n||null);return e?P(o,e):o}St.data=function(n,e,t){return t?jt(n,e,t):e&&"function"!=typeof e?n:jt(n,e)},F.forEach((function(n){St[n]=Et})),D.forEach((function(n){St[n+"s"]=At})),St.watch=function(n,e,t,r){if(n===rn&&(n=void 0),e===rn&&(e=void 0),!e)return Object.create(n||null);if(!n)return e;var a={};for(var i in P(a,n),e){var s=a[i],c=e[i];s&&!o(s)&&(s=[s]),a[i]=s?s.concat(c):o(c)?c:[c]}return a},St.props=St.methods=St.inject=St.computed=function(n,e,t,r){if(!n)return e;var o=Object.create(null);return P(o,n),e&&P(o,e),o},St.provide=function(n,e){return n?function(){var t=Object.create(null);return Tt(t,l(n)?n.call(this):n),e&&Tt(t,l(e)?e.call(this):e,!1),t}:e};var Ot=function(n,e){return void 0===e?n:e};function Ct(n,e,t){if(l(e)&&(e=e.options),function(n,e){var t=n.props;if(t){var r,a,i={};if(o(t))for(r=t.length;r--;)"string"==typeof(a=t[r])&&(i[j(a)]={type:null});else if(d(t))for(var s in t)a=t[s],i[j(s)]=d(a)?a:{type:a};else 0;n.props=i}}(e),function(n,e){var t=n.inject;if(t){var r=n.inject={};if(o(t))for(var a=0;a<t.length;a++)r[t[a]]={from:t[a]};else if(d(t))for(var i in t){var s=t[i];r[i]=d(s)?P({from:i},s):{from:s}}else 0}}(e),function(n){var e=n.directives;if(e)for(var t in e){var r=e[t];l(r)&&(e[t]={bind:r,update:r})}}(e),!e._base&&(e.extends&&(n=Ct(n,e.extends,t)),e.mixins))for(var r=0,a=e.mixins.length;r<a;r++)n=Ct(n,e.mixins[r],t);var i,s={};for(i in n)c(i);for(i in e)k(n,i)||c(i);function c(r){var o=St[r]||Ot;s[r]=o(n[r],e[r],t,r)}return s}function It(n,e,t,r){if("string"==typeof t){var o=n[e];if(k(o,t))return o[t];var a=j(t);if(k(o,a))return o[a];var i=E(a);return k(o,i)?o[i]:o[t]||o[a]||o[i]}}function Pt(n,e,t,r){var o=e[n],a=!k(t,n),i=t[n],s=Bt(Boolean,o.type);if(s>-1)if(a&&!k(o,"default"))i=!1;else if(""===i||i===O(n)){var c=Bt(String,o.type);(c<0||s<c)&&(i=!0)}if(void 0===i){i=function(n,e,t){if(!k(e,"default"))return;var r=e.default;0;if(n&&n.$options.propsData&&void 0===n.$options.propsData[t]&&void 0!==n._props[t])return n._props[t];return l(r)&&"Function"!==qt(e.type)?r.call(n):r}(r,o,n);var p=An;On(!0),Pn(i),On(p)}return i}var $t=/^\s*function (\w+)/;function qt(n){var e=n&&n.toString().match($t);return e?e[1]:""}function zt(n,e){return qt(n)===qt(e)}function Bt(n,e){if(!o(e))return zt(e,n)?0:-1;for(var t=0,r=e.length;t<r;t++)if(zt(e[t],n))return t;return-1}var Rt={enumerable:!0,configurable:!0,get:q,set:q};function Lt(n,e,t){Rt.get=function(){return this[e][t]},Rt.set=function(n){this[e][t]=n},Object.defineProperty(n,t,Rt)}function Nt(n){var e=n.$options;if(e.props&&function(n,e){var t=n.$options.propsData||{},r=n._props=Rn({}),o=n.$options._propKeys=[];n.$parent&&On(!1);var a=function(a){o.push(a);var i=Pt(a,e,t,n);$n(r,a,i,void 0,!0),a in n||Lt(n,"_props",a)};for(var i in e)a(i);On(!0)}(n,e.props),function(n){var e=n.$options,t=e.setup;if(t){var r=n._setupContext=ye(n);mn(n),wn();var o=Ae(t,null,[n._props||Rn({}),r],n,"setup");if(kn(),mn(),l(o))e.render=o;else if(p(o))if(n._setupState=o,o.__sfc){var a=n._setupProxy={};for(var i in o)"__sfc"!==i&&Dn(a,o,i)}else for(var i in o)V(i)||Dn(n,o,i);else 0}}(n),e.methods&&function(n,e){n.$options.props;for(var t in e)n[t]="function"!=typeof e[t]?q:C(e[t],n)}(n,e.methods),e.data)!function(n){var e=n.$options.data;d(e=n._data=l(e)?function(n,e){wn();try{return n.call(e,e)}catch(n){return Ee(n,e,"data()"),{}}finally{kn()}}(e,n):e||{})||(e={});var t=Object.keys(e),r=n.$options.props,o=(n.$options.methods,t.length);for(;o--;){var a=t[o];0,r&&k(r,a)||V(a)||Lt(n,"_data",a)}var i=Pn(e);i&&i.vmCount++}(n);else{var t=Pn(n._data={});t&&t.vmCount++}e.computed&&function(n,e){var t=n._computedWatchers=Object.create(null),r=sn();for(var o in e){var a=e[o],i=l(a)?a:a.get;0,r||(t[o]=new Ge(n,i||q,q,Mt)),o in n||Dt(n,o,a)}}(n,e.computed),e.watch&&e.watch!==rn&&function(n,e){for(var t in e){var r=e[t];if(o(r))for(var a=0;a<r.length;a++)Ht(n,t,r[a]);else Ht(n,t,r)}}(n,e.watch)}var Mt={lazy:!0};function Dt(n,e,t){var r=!sn();l(t)?(Rt.get=r?Ft(e):Ut(t),Rt.set=q):(Rt.get=t.get?r&&!1!==t.cache?Ft(e):Ut(t.get):q,Rt.set=t.set||q),Object.defineProperty(n,e,Rt)}function Ft(n){return function(){var e=this._computedWatchers&&this._computedWatchers[n];if(e)return e.dirty&&e.evaluate(),xn.target&&e.depend(),e.value}}function Ut(n){return function(){return n.call(this,this)}}function Ht(n,e,t,r){return d(t)&&(r=t,t=t.handler),"string"==typeof t&&(t=n[t]),n.$watch(e,t,r)}var Vt=0;function Gt(n){var e=n.options;if(n.super){var t=Gt(n.super);if(t!==n.superOptions){n.superOptions=t;var r=function(n){var e,t=n.options,r=n.sealedOptions;for(var o in t)t[o]!==r[o]&&(e||(e={}),e[o]=t[o]);return e}(n);r&&P(n.extendOptions,r),(e=n.options=Ct(t,n.extendOptions)).name&&(e.components[e.name]=n)}}return e}function Jt(n){this._init(n)}function Wt(n){n.cid=0;var e=1;n.extend=function(n){n=n||{};var t=this,r=t.cid,o=n._Ctor||(n._Ctor={});if(o[r])return o[r];var a=bt(n)||bt(t.options);var i=function(n){this._init(n)};return(i.prototype=Object.create(t.prototype)).constructor=i,i.cid=e++,i.options=Ct(t.options,n),i.super=t,i.options.props&&function(n){var e=n.options.props;for(var t in e)Lt(n.prototype,"_props",t)}(i),i.options.computed&&function(n){var e=n.options.computed;for(var t in e)Dt(n.prototype,t,e[t])}(i),i.extend=t.extend,i.mixin=t.mixin,i.use=t.use,D.forEach((function(n){i[n]=t[n]})),a&&(i.options.components[a]=i),i.superOptions=t.options,i.extendOptions=n,i.sealedOptions=P({},i.options),o[r]=i,i}}function Yt(n){return n&&(bt(n.Ctor.options)||n.tag)}function Xt(n,e){return o(n)?n.indexOf(e)>-1:"string"==typeof n?n.split(",").indexOf(e)>-1:!!m(n)&&n.test(e)}function Zt(n,e){var t=n.cache,r=n.keys,o=n._vnode,a=n.$vnode;for(var i in t){var s=t[i];if(s){var c=s.name;c&&!e(c)&&Qt(t,i,r,o)}}a.componentOptions.children=void 0}function Qt(n,e,t,r){var o=n[e];!o||r&&o.tag===r.tag||o.componentInstance.$destroy(),n[e]=null,_(t,e)}!function(n){n.prototype._init=function(n){var e=this;e._uid=Vt++,e._isVue=!0,e.__v_skip=!0,e._scope=new Un(!0),e._scope.parent=void 0,e._scope._vm=!0,n&&n._isComponent?function(n,e){var t=n.$options=Object.create(n.constructor.options),r=e._parentVnode;t.parent=e.parent,t._parentVnode=r;var o=r.componentOptions;t.propsData=o.propsData,t._parentListeners=o.listeners,t._renderChildren=o.children,t._componentTag=o.tag,e.render&&(t.render=e.render,t.staticRenderFns=e.staticRenderFns)}(e,n):e.$options=Ct(Gt(e.constructor),n||{},e),e._renderProxy=e,e._self=e,function(n){var e=n.$options,t=e.parent;if(t&&!e.abstract){for(;t.$options.abstract&&t.$parent;)t=t.$parent;t.$children.push(n)}n.$parent=t,n.$root=t?t.$root:n,n.$children=[],n.$refs={},n._provided=t?t._provided:Object.create(null),n._watcher=null,n._inactive=null,n._directInactive=!1,n._isMounted=!1,n._isDestroyed=!1,n._isBeingDestroyed=!1}(e),function(n){n._events=Object.create(null),n._hasHookEvent=!1;var e=n.$options._parentListeners;e&&Xe(n,e)}(e),function(n){n._vnode=null,n._staticTrees=null;var e=n.$options,t=n.$vnode=e._parentVnode,o=t&&t.context;n.$slots=me(e._renderChildren,o),n.$scopedSlots=t?ge(n.$parent,t.data.scopedSlots,n.$slots):r,n._c=function(e,t,r,o){return je(n,e,t,r,o,!1)},n.$createElement=function(e,t,r,o){return je(n,e,t,r,o,!0)};var a=t&&t.data;$n(n,"$attrs",a&&a.attrs||r,null,!0),$n(n,"$listeners",e._parentListeners||r,null,!0)}(e),et(e,"beforeCreate",void 0,!1),function(n){var e=ft(n.$options.inject,n);e&&(On(!1),Object.keys(e).forEach((function(t){$n(n,t,e[t])})),On(!0))}(e),Nt(e),function(n){var e=n.$options.provide;if(e){var t=l(e)?e.call(n):e;if(!p(t))return;for(var r=Hn(n),o=un?Reflect.ownKeys(t):Object.keys(t),a=0;a<o.length;a++){var i=o[a];Object.defineProperty(r,i,Object.getOwnPropertyDescriptor(t,i))}}}(e),et(e,"created"),e.$options.el&&e.$mount(e.$options.el)}}(Jt),function(n){var e={get:function(){return this._data}},t={get:function(){return this._props}};Object.defineProperty(n.prototype,"$data",e),Object.defineProperty(n.prototype,"$props",t),n.prototype.$set=qn,n.prototype.$delete=zn,n.prototype.$watch=function(n,e,t){if(d(e))return Ht(this,n,e,t);(t=t||{}).user=!0;var r=new Ge(this,n,e,t);if(t.immediate){var o='callback for immediate watcher "'.concat(r.expression,'"');wn(),Ae(e,this,[r.value],this,o),kn()}return function(){r.teardown()}}}(Jt),function(n){var e=/^hook:/;n.prototype.$on=function(n,t){var r=this;if(o(n))for(var a=0,i=n.length;a<i;a++)r.$on(n[a],t);else(r._events[n]||(r._events[n]=[])).push(t),e.test(n)&&(r._hasHookEvent=!0);return r},n.prototype.$once=function(n,e){var t=this;function r(){t.$off(n,r),e.apply(t,arguments)}return r.fn=e,t.$on(n,r),t},n.prototype.$off=function(n,e){var t=this;if(!arguments.length)return t._events=Object.create(null),t;if(o(n)){for(var r=0,a=n.length;r<a;r++)t.$off(n[r],e);return t}var i,s=t._events[n];if(!s)return t;if(!e)return t._events[n]=null,t;for(var c=s.length;c--;)if((i=s[c])===e||i.fn===e){s.splice(c,1);break}return t},n.prototype.$emit=function(n){var e=this,t=e._events[n];if(t){t=t.length>1?I(t):t;for(var r=I(arguments,1),o='event handler for "'.concat(n,'"'),a=0,i=t.length;a<i;a++)Ae(t[a],e,r,e,o)}return e}}(Jt),function(n){n.prototype._update=function(n,e){var t=this,r=t.$el,o=t._vnode,a=Qe(t);t._vnode=n,t.$el=o?t.__patch__(o,n):t.__patch__(t.$el,n,e,!1),a(),r&&(r.__vue__=null),t.$el&&(t.$el.__vue__=t);for(var i=t;i&&i.$vnode&&i.$parent&&i.$vnode===i.$parent._vnode;)i.$parent.$el=i.$el,i=i.$parent},n.prototype.$forceUpdate=function(){this._watcher&&this._watcher.update()},n.prototype.$destroy=function(){var n=this;if(!n._isBeingDestroyed){et(n,"beforeDestroy"),n._isBeingDestroyed=!0;var e=n.$parent;!e||e._isBeingDestroyed||n.$options.abstract||_(e.$children,n),n._scope.stop(),n._data.__ob__&&n._data.__ob__.vmCount--,n._isDestroyed=!0,n.__patch__(n._vnode,null),et(n,"destroyed"),n.$off(),n.$el&&(n.$el.__vue__=null),n.$vnode&&(n.$vnode.parent=null)}}}(Jt),function(n){de(n.prototype),n.prototype.$nextTick=function(n){return Me(n,this)},n.prototype._render=function(){var n=this,e=n.$options,t=e.render,r=e._parentVnode;r&&n._isMounted&&(n.$scopedSlots=ge(n.$parent,r.data.scopedSlots,n.$slots,n.$scopedSlots),n._slotsProxy&&we(n._slotsProxy,n.$scopedSlots)),n.$vnode=r;var a,i=dn,s=ke;try{mn(n),ke=n,a=t.call(n._renderProxy,n.$createElement)}catch(e){Ee(e,n,"render"),a=n._vnode}finally{ke=s,mn(i)}return o(a)&&1===a.length&&(a=a[0]),a instanceof fn||(a=hn()),a.parent=r,a}}(Jt);var Kt=[String,RegExp,Array],nr={KeepAlive:{name:"keep-alive",abstract:!0,props:{include:Kt,exclude:Kt,max:[String,Number]},methods:{cacheVNode:function(){var n=this.cache,e=this.keys,t=this.vnodeToCache,r=this.keyToCache;if(t){var o=t.tag,a=t.componentInstance,i=t.componentOptions;n[r]={name:Yt(i),tag:o,componentInstance:a},e.push(r),this.max&&e.length>parseInt(this.max)&&Qt(n,e[0],e,this._vnode),this.vnodeToCache=null}}},created:function(){this.cache=Object.create(null),this.keys=[]},destroyed:function(){for(var n in this.cache)Qt(this.cache,n,this.keys)},mounted:function(){var n=this;this.cacheVNode(),this.$watch("include",(function(e){Zt(n,(function(n){return Xt(e,n)}))})),this.$watch("exclude",(function(e){Zt(n,(function(n){return!Xt(e,n)}))}))},updated:function(){this.cacheVNode()},render:function(){var n=this.$slots.default,e=Te(n),t=e&&e.componentOptions;if(t){var r=Yt(t),o=this.include,a=this.exclude;if(o&&(!r||!Xt(o,r))||a&&r&&Xt(a,r))return e;var i=this.cache,s=this.keys,c=null==e.key?t.Ctor.cid+(t.tag?"::".concat(t.tag):""):e.key;i[c]?(e.componentInstance=i[c].componentInstance,_(s,c),s.push(c)):(this.vnodeToCache=e,this.keyToCache=c),e.data.keepAlive=!0}return e||n&&n[0]}}};!function(n){var e={get:function(){return U}};Object.defineProperty(n,"config",e),n.util={warn:kt,extend:P,mergeOptions:Ct,defineReactive:$n},n.set=qn,n.delete=zn,n.nextTick=Me,n.observable=function(n){return Pn(n),n},n.options=Object.create(null),D.forEach((function(e){n.options[e+"s"]=Object.create(null)})),n.options._base=n,P(n.options.components,nr),function(n){n.use=function(n){var e=this._installedPlugins||(this._installedPlugins=[]);if(e.indexOf(n)>-1)return this;var t=I(arguments,1);return t.unshift(this),l(n.install)?n.install.apply(n,t):l(n)&&n.apply(null,t),e.push(n),this}}(n),function(n){n.mixin=function(n){return this.options=Ct(this.options,n),this}}(n),Wt(n),function(n){D.forEach((function(e){n[e]=function(n,t){return t?("component"===e&&d(t)&&(t.name=t.name||n,t=this.options._base.extend(t)),"directive"===e&&l(t)&&(t={bind:t,update:t}),this.options[e+"s"][n]=t,t):this.options[e+"s"][n]}}))}(n)}(Jt),Object.defineProperty(Jt.prototype,"$isServer",{get:sn}),Object.defineProperty(Jt.prototype,"$ssrContext",{get:function(){return this.$vnode&&this.$vnode.ssrContext}}),Object.defineProperty(Jt,"FunctionalRenderContext",{value:ht}),Jt.version="2.7.16";var er=y("style,class"),tr=y("input,textarea,option,select,progress"),rr=y("contenteditable,draggable,spellcheck"),or=y("events,caret,typing,plaintext-only"),ar=y("allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,default,defaultchecked,defaultmuted,defaultselected,defer,disabled,enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,required,reversed,scoped,seamless,selected,sortable,truespeed,typemustmatch,visible"),ir="http://www.w3.org/1999/xlink",sr=function(n){return":"===n.charAt(5)&&"xlink"===n.slice(0,5)},cr=function(n){return sr(n)?n.slice(6,n.length):""},lr=function(n){return null==n||!1===n};function pr(n){for(var e=n.data,t=n,r=n;i(r.componentInstance);)(r=r.componentInstance._vnode)&&r.data&&(e=ur(r.data,e));for(;i(t=t.parent);)t&&t.data&&(e=ur(e,t.data));return function(n,e){if(i(n)||i(e))return dr(n,mr(e));return""}(e.staticClass,e.class)}function ur(n,e){return{staticClass:dr(n.staticClass,e.staticClass),class:i(n.class)?[n.class,e.class]:e.class}}function dr(n,e){return n?e?n+" "+e:n:e||""}function mr(n){return Array.isArray(n)?function(n){for(var e,t="",r=0,o=n.length;r<o;r++)i(e=mr(n[r]))&&""!==e&&(t&&(t+=" "),t+=e);return t}(n):p(n)?function(n){var e="";for(var t in n)n[t]&&(e&&(e+=" "),e+=t);return e}(n):"string"==typeof n?n:""}var fr={svg:"http://www.w3.org/2000/svg",math:"http://www.w3.org/1998/Math/MathML"},hr=y("html,body,base,head,link,meta,style,title,address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,menuitem,summary,content,element,shadow,template,blockquote,iframe,tfoot"),gr=y("svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,foreignobject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view",!0),vr=function(n){return hr(n)||gr(n)};var br=Object.create(null);var yr=y("text,number,password,search,email,tel,url");var xr=Object.freeze({__proto__:null,createElement:function(n,e){var t=document.createElement(n);return"select"!==n||e.data&&e.data.attrs&&void 0!==e.data.attrs.multiple&&t.setAttribute("multiple","multiple"),t},createElementNS:function(n,e){return document.createElementNS(fr[n],e)},createTextNode:function(n){return document.createTextNode(n)},createComment:function(n){return document.createComment(n)},insertBefore:function(n,e,t){n.insertBefore(e,t)},removeChild:function(n,e){n.removeChild(e)},appendChild:function(n,e){n.appendChild(e)},parentNode:function(n){return n.parentNode},nextSibling:function(n){return n.nextSibling},tagName:function(n){return n.tagName},setTextContent:function(n,e){n.textContent=e},setStyleScope:function(n,e){n.setAttribute(e,"")}}),_r={create:function(n,e){wr(e)},update:function(n,e){n.data.ref!==e.data.ref&&(wr(n,!0),wr(e))},destroy:function(n){wr(n,!0)}};function wr(n,e){var t=n.data.ref;if(i(t)){var r=n.context,a=n.componentInstance||n.elm,s=e?null:a,c=e?void 0:a;if(l(t))Ae(t,r,[s],r,"template ref function");else{var p=n.data.refInFor,u="string"==typeof t||"number"==typeof t,d=Mn(t),m=r.$refs;if(u||d)if(p){var f=u?m[t]:t.value;e?o(f)&&_(f,a):o(f)?f.includes(a)||f.push(a):u?(m[t]=[a],kr(r,t,m[t])):t.value=[a]}else if(u){if(e&&m[t]!==a)return;m[t]=c,kr(r,t,s)}else if(d){if(e&&t.value!==a)return;t.value=s}else 0}}}function kr(n,e,t){var r=n._setupState;r&&k(r,e)&&(Mn(r[e])?r[e].value=t:r[e]=t)}var Sr=new fn("",{},[]),Tr=["create","activate","update","remove","destroy"];function jr(n,e){return n.key===e.key&&n.asyncFactory===e.asyncFactory&&(n.tag===e.tag&&n.isComment===e.isComment&&i(n.data)===i(e.data)&&function(n,e){if("input"!==n.tag)return!0;var t,r=i(t=n.data)&&i(t=t.attrs)&&t.type,o=i(t=e.data)&&i(t=t.attrs)&&t.type;return r===o||yr(r)&&yr(o)}(n,e)||s(n.isAsyncPlaceholder)&&a(e.asyncFactory.error))}function Er(n,e,t){var r,o,a={};for(r=e;r<=t;++r)i(o=n[r].key)&&(a[o]=r);return a}var Ar={create:Or,update:Or,destroy:function(n){Or(n,Sr)}};function Or(n,e){(n.data.directives||e.data.directives)&&function(n,e){var t,r,o,a=n===Sr,i=e===Sr,s=Ir(n.data.directives,n.context),c=Ir(e.data.directives,e.context),l=[],p=[];for(t in c)r=s[t],o=c[t],r?(o.oldValue=r.value,o.oldArg=r.arg,$r(o,"update",e,n),o.def&&o.def.componentUpdated&&p.push(o)):($r(o,"bind",e,n),o.def&&o.def.inserted&&l.push(o));if(l.length){var u=function(){for(var t=0;t<l.length;t++)$r(l[t],"inserted",e,n)};a?Wn(e,"insert",u):u()}p.length&&Wn(e,"postpatch",(function(){for(var t=0;t<p.length;t++)$r(p[t],"componentUpdated",e,n)}));if(!a)for(t in s)c[t]||$r(s[t],"unbind",n,n,i)}(n,e)}var Cr=Object.create(null);function Ir(n,e){var t,r,o=Object.create(null);if(!n)return o;for(t=0;t<n.length;t++){if((r=n[t]).modifiers||(r.modifiers=Cr),o[Pr(r)]=r,e._setupState&&e._setupState.__sfc){var a=r.def||It(e,"_setupState","v-"+r.name);r.def="function"==typeof a?{bind:a,update:a}:a}r.def=r.def||It(e.$options,"directives",r.name)}return o}function Pr(n){return n.rawName||"".concat(n.name,".").concat(Object.keys(n.modifiers||{}).join("."))}function $r(n,e,t,r,o){var a=n.def&&n.def[e];if(a)try{a(t.elm,n,t,r,o)}catch(r){Ee(r,t.context,"directive ".concat(n.name," ").concat(e," hook"))}}var qr=[_r,Ar];function zr(n,e){var t=e.componentOptions;if(!(i(t)&&!1===t.Ctor.options.inheritAttrs||a(n.data.attrs)&&a(e.data.attrs))){var r,o,c=e.elm,l=n.data.attrs||{},p=e.data.attrs||{};for(r in(i(p.__ob__)||s(p._v_attr_proxy))&&(p=e.data.attrs=P({},p)),p)o=p[r],l[r]!==o&&Br(c,r,o,e.data.pre);for(r in(Z||K)&&p.value!==l.value&&Br(c,"value",p.value),l)a(p[r])&&(sr(r)?c.removeAttributeNS(ir,cr(r)):rr(r)||c.removeAttribute(r))}}function Br(n,e,t,r){r||n.tagName.indexOf("-")>-1?Rr(n,e,t):ar(e)?lr(t)?n.removeAttribute(e):(t="allowfullscreen"===e&&"EMBED"===n.tagName?"true":e,n.setAttribute(e,t)):rr(e)?n.setAttribute(e,function(n,e){return lr(e)||"false"===e?"false":"contenteditable"===n&&or(e)?e:"true"}(e,t)):sr(e)?lr(t)?n.removeAttributeNS(ir,cr(e)):n.setAttributeNS(ir,e,t):Rr(n,e,t)}function Rr(n,e,t){if(lr(t))n.removeAttribute(e);else{if(Z&&!Q&&"TEXTAREA"===n.tagName&&"placeholder"===e&&""!==t&&!n.__ieph){var r=function(e){e.stopImmediatePropagation(),n.removeEventListener("input",r)};n.addEventListener("input",r),n.__ieph=!0}n.setAttribute(e,t)}}var Lr={create:zr,update:zr};function Nr(n,e){var t=e.elm,r=e.data,o=n.data;if(!(a(r.staticClass)&&a(r.class)&&(a(o)||a(o.staticClass)&&a(o.class)))){var s=pr(e),c=t._transitionClasses;i(c)&&(s=dr(s,mr(c))),s!==t._prevClass&&(t.setAttribute("class",s),t._prevClass=s)}}var Mr,Dr={create:Nr,update:Nr};function Fr(n,e,t){var r=Mr;return function o(){var a=e.apply(null,arguments);null!==a&&Vr(n,o,t,r)}}var Ur=Pe&&!(tn&&Number(tn[1])<=53);function Hr(n,e,t,r){if(Ur){var o=ct,a=e;e=a._wrapper=function(n){if(n.target===n.currentTarget||n.timeStamp>=o||n.timeStamp<=0||n.target.ownerDocument!==document)return a.apply(this,arguments)}}Mr.addEventListener(n,e,on?{capture:t,passive:r}:t)}function Vr(n,e,t,r){(r||Mr).removeEventListener(n,e._wrapper||e,t)}function Gr(n,e){if(!a(n.data.on)||!a(e.data.on)){var t=e.data.on||{},r=n.data.on||{};Mr=e.elm||n.elm,function(n){if(i(n.__r)){var e=Z?"change":"input";n[e]=[].concat(n.__r,n[e]||[]),delete n.__r}i(n.__c)&&(n.change=[].concat(n.__c,n.change||[]),delete n.__c)}(t),Jn(t,r,Hr,Vr,Fr,e.context),Mr=void 0}}var Jr,Wr={create:Gr,update:Gr,destroy:function(n){return Gr(n,Sr)}};function Yr(n,e){if(!a(n.data.domProps)||!a(e.data.domProps)){var t,r,o=e.elm,c=n.data.domProps||{},l=e.data.domProps||{};for(t in(i(l.__ob__)||s(l._v_attr_proxy))&&(l=e.data.domProps=P({},l)),c)t in l||(o[t]="");for(t in l){if(r=l[t],"textContent"===t||"innerHTML"===t){if(e.children&&(e.children.length=0),r===c[t])continue;1===o.childNodes.length&&o.removeChild(o.childNodes[0])}if("value"===t&&"PROGRESS"!==o.tagName){o._value=r;var p=a(r)?"":String(r);Xr(o,p)&&(o.value=p)}else if("innerHTML"===t&&gr(o.tagName)&&a(o.innerHTML)){(Jr=Jr||document.createElement("div")).innerHTML="<svg>".concat(r,"</svg>");for(var u=Jr.firstChild;o.firstChild;)o.removeChild(o.firstChild);for(;u.firstChild;)o.appendChild(u.firstChild)}else if(r!==c[t])try{o[t]=r}catch(n){}}}}function Xr(n,e){return!n.composing&&("OPTION"===n.tagName||function(n,e){var t=!0;try{t=document.activeElement!==n}catch(n){}return t&&n.value!==e}(n,e)||function(n,e){var t=n.value,r=n._vModifiers;if(i(r)){if(r.number)return b(t)!==b(e);if(r.trim)return t.trim()!==e.trim()}return t!==e}(n,e))}var Zr={create:Yr,update:Yr},Qr=S((function(n){var e={},t=/:(.+)/;return n.split(/;(?![^(]*\))/g).forEach((function(n){if(n){var r=n.split(t);r.length>1&&(e[r[0].trim()]=r[1].trim())}})),e}));function Kr(n){var e=no(n.style);return n.staticStyle?P(n.staticStyle,e):e}function no(n){return Array.isArray(n)?$(n):"string"==typeof n?Qr(n):n}var eo,to=/^--/,ro=/\s*!important$/,oo=function(n,e,t){if(to.test(e))n.style.setProperty(e,t);else if(ro.test(t))n.style.setProperty(O(e),t.replace(ro,""),"important");else{var r=io(e);if(Array.isArray(t))for(var o=0,a=t.length;o<a;o++)n.style[r]=t[o];else n.style[r]=t}},ao=["Webkit","Moz","ms"],io=S((function(n){if(eo=eo||document.createElement("div").style,"filter"!==(n=j(n))&&n in eo)return n;for(var e=n.charAt(0).toUpperCase()+n.slice(1),t=0;t<ao.length;t++){var r=ao[t]+e;if(r in eo)return r}}));function so(n,e){var t=e.data,r=n.data;if(!(a(t.staticStyle)&&a(t.style)&&a(r.staticStyle)&&a(r.style))){var o,s,c=e.elm,l=r.staticStyle,p=r.normalizedStyle||r.style||{},u=l||p,d=no(e.data.style)||{};e.data.normalizedStyle=i(d.__ob__)?P({},d):d;var m=function(n,e){var t,r={};if(e)for(var o=n;o.componentInstance;)(o=o.componentInstance._vnode)&&o.data&&(t=Kr(o.data))&&P(r,t);(t=Kr(n.data))&&P(r,t);for(var a=n;a=a.parent;)a.data&&(t=Kr(a.data))&&P(r,t);return r}(e,!0);for(s in u)a(m[s])&&oo(c,s,"");for(s in m)o=m[s],oo(c,s,null==o?"":o)}}var co={create:so,update:so},lo=/\s+/;function po(n,e){if(e&&(e=e.trim()))if(n.classList)e.indexOf(" ")>-1?e.split(lo).forEach((function(e){return n.classList.add(e)})):n.classList.add(e);else{var t=" ".concat(n.getAttribute("class")||""," ");t.indexOf(" "+e+" ")<0&&n.setAttribute("class",(t+e).trim())}}function uo(n,e){if(e&&(e=e.trim()))if(n.classList)e.indexOf(" ")>-1?e.split(lo).forEach((function(e){return n.classList.remove(e)})):n.classList.remove(e),n.classList.length||n.removeAttribute("class");else{for(var t=" ".concat(n.getAttribute("class")||""," "),r=" "+e+" ";t.indexOf(r)>=0;)t=t.replace(r," ");(t=t.trim())?n.setAttribute("class",t):n.removeAttribute("class")}}function mo(n){if(n){if("object"==typeof n){var e={};return!1!==n.css&&P(e,fo(n.name||"v")),P(e,n),e}return"string"==typeof n?fo(n):void 0}}var fo=S((function(n){return{enterClass:"".concat(n,"-enter"),enterToClass:"".concat(n,"-enter-to"),enterActiveClass:"".concat(n,"-enter-active"),leaveClass:"".concat(n,"-leave"),leaveToClass:"".concat(n,"-leave-to"),leaveActiveClass:"".concat(n,"-leave-active")}})),ho=Y&&!Q,go="transition",vo="transitionend",bo="animation",yo="animationend";ho&&(void 0===window.ontransitionend&&void 0!==window.onwebkittransitionend&&(go="WebkitTransition",vo="webkitTransitionEnd"),void 0===window.onanimationend&&void 0!==window.onwebkitanimationend&&(bo="WebkitAnimation",yo="webkitAnimationEnd"));var xo=Y?window.requestAnimationFrame?window.requestAnimationFrame.bind(window):setTimeout:function(n){return n()};function _o(n){xo((function(){xo(n)}))}function wo(n,e){var t=n._transitionClasses||(n._transitionClasses=[]);t.indexOf(e)<0&&(t.push(e),po(n,e))}function ko(n,e){n._transitionClasses&&_(n._transitionClasses,e),uo(n,e)}function So(n,e,t){var r=jo(n,e),o=r.type,a=r.timeout,i=r.propCount;if(!o)return t();var s="transition"===o?vo:yo,c=0,l=function(){n.removeEventListener(s,p),t()},p=function(e){e.target===n&&++c>=i&&l()};setTimeout((function(){c<i&&l()}),a+1),n.addEventListener(s,p)}var To=/\b(transform|all)(,|$)/;function jo(n,e){var t,r=window.getComputedStyle(n),o=(r[go+"Delay"]||"").split(", "),a=(r[go+"Duration"]||"").split(", "),i=Eo(o,a),s=(r[bo+"Delay"]||"").split(", "),c=(r[bo+"Duration"]||"").split(", "),l=Eo(s,c),p=0,u=0;return"transition"===e?i>0&&(t="transition",p=i,u=a.length):"animation"===e?l>0&&(t="animation",p=l,u=c.length):u=(t=(p=Math.max(i,l))>0?i>l?"transition":"animation":null)?"transition"===t?a.length:c.length:0,{type:t,timeout:p,propCount:u,hasTransform:"transition"===t&&To.test(r[go+"Property"])}}function Eo(n,e){for(;n.length<e.length;)n=n.concat(n);return Math.max.apply(null,e.map((function(e,t){return Ao(e)+Ao(n[t])})))}function Ao(n){return 1e3*Number(n.slice(0,-1).replace(",","."))}function Oo(n,e){var t=n.elm;i(t._leaveCb)&&(t._leaveCb.cancelled=!0,t._leaveCb());var r=mo(n.data.transition);if(!a(r)&&!i(t._enterCb)&&1===t.nodeType){for(var o=r.css,s=r.type,c=r.enterClass,u=r.enterToClass,d=r.enterActiveClass,m=r.appearClass,f=r.appearToClass,h=r.appearActiveClass,g=r.beforeEnter,v=r.enter,y=r.afterEnter,x=r.enterCancelled,_=r.beforeAppear,w=r.appear,k=r.afterAppear,S=r.appearCancelled,T=r.duration,j=Ze,E=Ze.$vnode;E&&E.parent;)j=E.context,E=E.parent;var A=!j._isMounted||!n.isRootInsert;if(!A||w||""===w){var O=A&&m?m:c,C=A&&h?h:d,I=A&&f?f:u,P=A&&_||g,$=A&&l(w)?w:v,q=A&&k||y,z=A&&S||x,B=b(p(T)?T.enter:T);0;var R=!1!==o&&!Q,L=Po($),M=t._enterCb=N((function(){R&&(ko(t,I),ko(t,C)),M.cancelled?(R&&ko(t,O),z&&z(t)):q&&q(t),t._enterCb=null}));n.data.show||Wn(n,"insert",(function(){var e=t.parentNode,r=e&&e._pending&&e._pending[n.key];r&&r.tag===n.tag&&r.elm._leaveCb&&r.elm._leaveCb(),$&&$(t,M)})),P&&P(t),R&&(wo(t,O),wo(t,C),_o((function(){ko(t,O),M.cancelled||(wo(t,I),L||(Io(B)?setTimeout(M,B):So(t,s,M)))}))),n.data.show&&(e&&e(),$&&$(t,M)),R||L||M()}}}function Co(n,e){var t=n.elm;i(t._enterCb)&&(t._enterCb.cancelled=!0,t._enterCb());var r=mo(n.data.transition);if(a(r)||1!==t.nodeType)return e();if(!i(t._leaveCb)){var o=r.css,s=r.type,c=r.leaveClass,l=r.leaveToClass,u=r.leaveActiveClass,d=r.beforeLeave,m=r.leave,f=r.afterLeave,h=r.leaveCancelled,g=r.delayLeave,v=r.duration,y=!1!==o&&!Q,x=Po(m),_=b(p(v)?v.leave:v);0;var w=t._leaveCb=N((function(){t.parentNode&&t.parentNode._pending&&(t.parentNode._pending[n.key]=null),y&&(ko(t,l),ko(t,u)),w.cancelled?(y&&ko(t,c),h&&h(t)):(e(),f&&f(t)),t._leaveCb=null}));g?g(k):k()}function k(){w.cancelled||(!n.data.show&&t.parentNode&&((t.parentNode._pending||(t.parentNode._pending={}))[n.key]=n),d&&d(t),y&&(wo(t,c),wo(t,u),_o((function(){ko(t,c),w.cancelled||(wo(t,l),x||(Io(_)?setTimeout(w,_):So(t,s,w)))}))),m&&m(t,w),y||x||w())}}function Io(n){return"number"==typeof n&&!isNaN(n)}function Po(n){if(a(n))return!1;var e=n.fns;return i(e)?Po(Array.isArray(e)?e[0]:e):(n._length||n.length)>1}function $o(n,e){!0!==e.data.show&&Oo(e)}var qo=function(n){var e,t,r={},l=n.modules,p=n.nodeOps;for(e=0;e<Tr.length;++e)for(r[Tr[e]]=[],t=0;t<l.length;++t)i(l[t][Tr[e]])&&r[Tr[e]].push(l[t][Tr[e]]);function u(n){var e=p.parentNode(n);i(e)&&p.removeChild(e,n)}function d(n,e,t,o,a,c,l){if(i(n.elm)&&i(c)&&(n=c[l]=vn(n)),n.isRootInsert=!a,!function(n,e,t,o){var a=n.data;if(i(a)){var c=i(n.componentInstance)&&a.keepAlive;if(i(a=a.hook)&&i(a=a.init)&&a(n,!1),i(n.componentInstance))return m(n,e),f(t,n.elm,o),s(c)&&function(n,e,t,o){var a,s=n;for(;s.componentInstance;)if(s=s.componentInstance._vnode,i(a=s.data)&&i(a=a.transition)){for(a=0;a<r.activate.length;++a)r.activate[a](Sr,s);e.push(s);break}f(t,n.elm,o)}(n,e,t,o),!0}}(n,e,t,o)){var u=n.data,d=n.children,g=n.tag;i(g)?(n.elm=n.ns?p.createElementNS(n.ns,g):p.createElement(g,n),b(n),h(n,d,e),i(u)&&v(n,e),f(t,n.elm,o)):s(n.isComment)?(n.elm=p.createComment(n.text),f(t,n.elm,o)):(n.elm=p.createTextNode(n.text),f(t,n.elm,o))}}function m(n,e){i(n.data.pendingInsert)&&(e.push.apply(e,n.data.pendingInsert),n.data.pendingInsert=null),n.elm=n.componentInstance.$el,g(n)?(v(n,e),b(n)):(wr(n),e.push(n))}function f(n,e,t){i(n)&&(i(t)?p.parentNode(t)===n&&p.insertBefore(n,e,t):p.appendChild(n,e))}function h(n,e,t){if(o(e)){0;for(var r=0;r<e.length;++r)d(e[r],t,n.elm,null,!0,e,r)}else c(n.text)&&p.appendChild(n.elm,p.createTextNode(String(n.text)))}function g(n){for(;n.componentInstance;)n=n.componentInstance._vnode;return i(n.tag)}function v(n,t){for(var o=0;o<r.create.length;++o)r.create[o](Sr,n);i(e=n.data.hook)&&(i(e.create)&&e.create(Sr,n),i(e.insert)&&t.push(n))}function b(n){var e;if(i(e=n.fnScopeId))p.setStyleScope(n.elm,e);else for(var t=n;t;)i(e=t.context)&&i(e=e.$options._scopeId)&&p.setStyleScope(n.elm,e),t=t.parent;i(e=Ze)&&e!==n.context&&e!==n.fnContext&&i(e=e.$options._scopeId)&&p.setStyleScope(n.elm,e)}function x(n,e,t,r,o,a){for(;r<=o;++r)d(t[r],a,n,e,!1,t,r)}function _(n){var e,t,o=n.data;if(i(o))for(i(e=o.hook)&&i(e=e.destroy)&&e(n),e=0;e<r.destroy.length;++e)r.destroy[e](n);if(i(e=n.children))for(t=0;t<n.children.length;++t)_(n.children[t])}function w(n,e,t){for(;e<=t;++e){var r=n[e];i(r)&&(i(r.tag)?(k(r),_(r)):u(r.elm))}}function k(n,e){if(i(e)||i(n.data)){var t,o=r.remove.length+1;for(i(e)?e.listeners+=o:e=function(n,e){function t(){0==--t.listeners&&u(n)}return t.listeners=e,t}(n.elm,o),i(t=n.componentInstance)&&i(t=t._vnode)&&i(t.data)&&k(t,e),t=0;t<r.remove.length;++t)r.remove[t](n,e);i(t=n.data.hook)&&i(t=t.remove)?t(n,e):e()}else u(n.elm)}function S(n,e,t,r){for(var o=t;o<r;o++){var a=e[o];if(i(a)&&jr(n,a))return o}}function T(n,e,t,o,c,l){if(n!==e){i(e.elm)&&i(o)&&(e=o[c]=vn(e));var u=e.elm=n.elm;if(s(n.isAsyncPlaceholder))i(e.asyncFactory.resolved)?A(n.elm,e,t):e.isAsyncPlaceholder=!0;else if(s(e.isStatic)&&s(n.isStatic)&&e.key===n.key&&(s(e.isCloned)||s(e.isOnce)))e.componentInstance=n.componentInstance;else{var m,f=e.data;i(f)&&i(m=f.hook)&&i(m=m.prepatch)&&m(n,e);var h=n.children,v=e.children;if(i(f)&&g(e)){for(m=0;m<r.update.length;++m)r.update[m](n,e);i(m=f.hook)&&i(m=m.update)&&m(n,e)}a(e.text)?i(h)&&i(v)?h!==v&&function(n,e,t,r,o){var s,c,l,u=0,m=0,f=e.length-1,h=e[0],g=e[f],v=t.length-1,b=t[0],y=t[v],_=!o;for(0;u<=f&&m<=v;)a(h)?h=e[++u]:a(g)?g=e[--f]:jr(h,b)?(T(h,b,r,t,m),h=e[++u],b=t[++m]):jr(g,y)?(T(g,y,r,t,v),g=e[--f],y=t[--v]):jr(h,y)?(T(h,y,r,t,v),_&&p.insertBefore(n,h.elm,p.nextSibling(g.elm)),h=e[++u],y=t[--v]):jr(g,b)?(T(g,b,r,t,m),_&&p.insertBefore(n,g.elm,h.elm),g=e[--f],b=t[++m]):(a(s)&&(s=Er(e,u,f)),a(c=i(b.key)?s[b.key]:S(b,e,u,f))?d(b,r,n,h.elm,!1,t,m):jr(l=e[c],b)?(T(l,b,r,t,m),e[c]=void 0,_&&p.insertBefore(n,l.elm,h.elm)):d(b,r,n,h.elm,!1,t,m),b=t[++m]);u>f?x(n,a(t[v+1])?null:t[v+1].elm,t,m,v,r):m>v&&w(e,u,f)}(u,h,v,t,l):i(v)?(i(n.text)&&p.setTextContent(u,""),x(u,null,v,0,v.length-1,t)):i(h)?w(h,0,h.length-1):i(n.text)&&p.setTextContent(u,""):n.text!==e.text&&p.setTextContent(u,e.text),i(f)&&i(m=f.hook)&&i(m=m.postpatch)&&m(n,e)}}}function j(n,e,t){if(s(t)&&i(n.parent))n.parent.data.pendingInsert=e;else for(var r=0;r<e.length;++r)e[r].data.hook.insert(e[r])}var E=y("attrs,class,staticClass,staticStyle,key");function A(n,e,t,r){var o,a=e.tag,c=e.data,l=e.children;if(r=r||c&&c.pre,e.elm=n,s(e.isComment)&&i(e.asyncFactory))return e.isAsyncPlaceholder=!0,!0;if(i(c)&&(i(o=c.hook)&&i(o=o.init)&&o(e,!0),i(o=e.componentInstance)))return m(e,t),!0;if(i(a)){if(i(l))if(n.hasChildNodes())if(i(o=c)&&i(o=o.domProps)&&i(o=o.innerHTML)){if(o!==n.innerHTML)return!1}else{for(var p=!0,u=n.firstChild,d=0;d<l.length;d++){if(!u||!A(u,l[d],t,r)){p=!1;break}u=u.nextSibling}if(!p||u)return!1}else h(e,l,t);if(i(c)){var f=!1;for(var g in c)if(!E(g)){f=!0,v(e,t);break}!f&&c.class&&Ue(c.class)}}else n.data!==e.text&&(n.data=e.text);return!0}return function(n,e,t,o){if(!a(e)){var c,l=!1,u=[];if(a(n))l=!0,d(e,u);else{var m=i(n.nodeType);if(!m&&jr(n,e))T(n,e,u,null,null,o);else{if(m){if(1===n.nodeType&&n.hasAttribute("data-server-rendered")&&(n.removeAttribute("data-server-rendered"),t=!0),s(t)&&A(n,e,u))return j(e,u,!0),n;c=n,n=new fn(p.tagName(c).toLowerCase(),{},[],void 0,c)}var f=n.elm,h=p.parentNode(f);if(d(e,u,f._leaveCb?null:h,p.nextSibling(f)),i(e.parent))for(var v=e.parent,b=g(e);v;){for(var y=0;y<r.destroy.length;++y)r.destroy[y](v);if(v.elm=e.elm,b){for(var x=0;x<r.create.length;++x)r.create[x](Sr,v);var k=v.data.hook.insert;if(k.merged)for(var S=k.fns.slice(1),E=0;E<S.length;E++)S[E]()}else wr(v);v=v.parent}i(h)?w([n],0,0):i(n.tag)&&_(n)}}return j(e,u,l),e.elm}i(n)&&_(n)}}({nodeOps:xr,modules:[Lr,Dr,Wr,Zr,co,Y?{create:$o,activate:$o,remove:function(n,e){!0!==n.data.show?Co(n,e):e()}}:{}].concat(qr)});Q&&document.addEventListener("selectionchange",(function(){var n=document.activeElement;n&&n.vmodel&&Fo(n,"input")}));var zo={inserted:function(n,e,t,r){"select"===t.tag?(r.elm&&!r.elm._vOptions?Wn(t,"postpatch",(function(){zo.componentUpdated(n,e,t)})):Bo(n,e,t.context),n._vOptions=[].map.call(n.options,No)):("textarea"===t.tag||yr(n.type))&&(n._vModifiers=e.modifiers,e.modifiers.lazy||(n.addEventListener("compositionstart",Mo),n.addEventListener("compositionend",Do),n.addEventListener("change",Do),Q&&(n.vmodel=!0)))},componentUpdated:function(n,e,t){if("select"===t.tag){Bo(n,e,t.context);var r=n._vOptions,o=n._vOptions=[].map.call(n.options,No);if(o.some((function(n,e){return!R(n,r[e])})))(n.multiple?e.value.some((function(n){return Lo(n,o)})):e.value!==e.oldValue&&Lo(e.value,o))&&Fo(n,"change")}}};function Bo(n,e,t){Ro(n,e,t),(Z||K)&&setTimeout((function(){Ro(n,e,t)}),0)}function Ro(n,e,t){var r=e.value,o=n.multiple;if(!o||Array.isArray(r)){for(var a,i,s=0,c=n.options.length;s<c;s++)if(i=n.options[s],o)a=L(r,No(i))>-1,i.selected!==a&&(i.selected=a);else if(R(No(i),r))return void(n.selectedIndex!==s&&(n.selectedIndex=s));o||(n.selectedIndex=-1)}}function Lo(n,e){return e.every((function(e){return!R(e,n)}))}function No(n){return"_value"in n?n._value:n.value}function Mo(n){n.target.composing=!0}function Do(n){n.target.composing&&(n.target.composing=!1,Fo(n.target,"input"))}function Fo(n,e){var t=document.createEvent("HTMLEvents");t.initEvent(e,!0,!0),n.dispatchEvent(t)}function Uo(n){return!n.componentInstance||n.data&&n.data.transition?n:Uo(n.componentInstance._vnode)}var Ho={model:zo,show:{bind:function(n,e,t){var r=e.value,o=(t=Uo(t)).data&&t.data.transition,a=n.__vOriginalDisplay="none"===n.style.display?"":n.style.display;r&&o?(t.data.show=!0,Oo(t,(function(){n.style.display=a}))):n.style.display=r?a:"none"},update:function(n,e,t){var r=e.value;!r!=!e.oldValue&&((t=Uo(t)).data&&t.data.transition?(t.data.show=!0,r?Oo(t,(function(){n.style.display=n.__vOriginalDisplay})):Co(t,(function(){n.style.display="none"}))):n.style.display=r?n.__vOriginalDisplay:"none")},unbind:function(n,e,t,r,o){o||(n.style.display=n.__vOriginalDisplay)}}},Vo={name:String,appear:Boolean,css:Boolean,mode:String,type:String,enterClass:String,leaveClass:String,enterToClass:String,leaveToClass:String,enterActiveClass:String,leaveActiveClass:String,appearClass:String,appearActiveClass:String,appearToClass:String,duration:[Number,String,Object]};function Go(n){var e=n&&n.componentOptions;return e&&e.Ctor.options.abstract?Go(Te(e.children)):n}function Jo(n){var e={},t=n.$options;for(var r in t.propsData)e[r]=n[r];var o=t._parentListeners;for(var r in o)e[j(r)]=o[r];return e}function Wo(n,e){if(/\d-keep-alive$/.test(e.tag))return n("keep-alive",{props:e.componentOptions.propsData})}var Yo=function(n){return n.tag||he(n)},Xo=function(n){return"show"===n.name},Zo={name:"transition",props:Vo,abstract:!0,render:function(n){var e=this,t=this.$slots.default;if(t&&(t=t.filter(Yo)).length){0;var r=this.mode;0;var o=t[0];if(function(n){for(;n=n.parent;)if(n.data.transition)return!0}(this.$vnode))return o;var a=Go(o);if(!a)return o;if(this._leaving)return Wo(n,o);var i="__transition-".concat(this._uid,"-");a.key=null==a.key?a.isComment?i+"comment":i+a.tag:c(a.key)?0===String(a.key).indexOf(i)?a.key:i+a.key:a.key;var s=(a.data||(a.data={})).transition=Jo(this),l=this._vnode,p=Go(l);if(a.data.directives&&a.data.directives.some(Xo)&&(a.data.show=!0),p&&p.data&&!function(n,e){return e.key===n.key&&e.tag===n.tag}(a,p)&&!he(p)&&(!p.componentInstance||!p.componentInstance._vnode.isComment)){var u=p.data.transition=P({},s);if("out-in"===r)return this._leaving=!0,Wn(u,"afterLeave",(function(){e._leaving=!1,e.$forceUpdate()})),Wo(n,o);if("in-out"===r){if(he(a))return l;var d,m=function(){d()};Wn(s,"afterEnter",m),Wn(s,"enterCancelled",m),Wn(u,"delayLeave",(function(n){d=n}))}}return o}}},Qo=P({tag:String,moveClass:String},Vo);function Ko(n){n.elm._moveCb&&n.elm._moveCb(),n.elm._enterCb&&n.elm._enterCb()}function na(n){n.data.newPos=n.elm.getBoundingClientRect()}function ea(n){var e=n.data.pos,t=n.data.newPos,r=e.left-t.left,o=e.top-t.top;if(r||o){n.data.moved=!0;var a=n.elm.style;a.transform=a.WebkitTransform="translate(".concat(r,"px,").concat(o,"px)"),a.transitionDuration="0s"}}delete Qo.mode;var ta={Transition:Zo,TransitionGroup:{props:Qo,beforeMount:function(){var n=this,e=this._update;this._update=function(t,r){var o=Qe(n);n.__patch__(n._vnode,n.kept,!1,!0),n._vnode=n.kept,o(),e.call(n,t,r)}},render:function(n){for(var e=this.tag||this.$vnode.data.tag||"span",t=Object.create(null),r=this.prevChildren=this.children,o=this.$slots.default||[],a=this.children=[],i=Jo(this),s=0;s<o.length;s++){if((p=o[s]).tag)if(null!=p.key&&0!==String(p.key).indexOf("__vlist"))a.push(p),t[p.key]=p,(p.data||(p.data={})).transition=i;else;}if(r){var c=[],l=[];for(s=0;s<r.length;s++){var p;(p=r[s]).data.transition=i,p.data.pos=p.elm.getBoundingClientRect(),t[p.key]?c.push(p):l.push(p)}this.kept=n(e,null,c),this.removed=l}return n(e,null,a)},updated:function(){var n=this.prevChildren,e=this.moveClass||(this.name||"v")+"-move";n.length&&this.hasMove(n[0].elm,e)&&(n.forEach(Ko),n.forEach(na),n.forEach(ea),this._reflow=document.body.offsetHeight,n.forEach((function(n){if(n.data.moved){var t=n.elm,r=t.style;wo(t,e),r.transform=r.WebkitTransform=r.transitionDuration="",t.addEventListener(vo,t._moveCb=function n(r){r&&r.target!==t||r&&!/transform$/.test(r.propertyName)||(t.removeEventListener(vo,n),t._moveCb=null,ko(t,e))})}})))},methods:{hasMove:function(n,e){if(!ho)return!1;if(this._hasMove)return this._hasMove;var t=n.cloneNode();n._transitionClasses&&n._transitionClasses.forEach((function(n){uo(t,n)})),po(t,e),t.style.display="none",this.$el.appendChild(t);var r=jo(t);return this.$el.removeChild(t),this._hasMove=r.hasTransform}}}};function ra(n,e){for(var t in e)n[t]=e[t];return n}Jt.config.mustUseProp=function(n,e,t){return"value"===t&&tr(n)&&"button"!==e||"selected"===t&&"option"===n||"checked"===t&&"input"===n||"muted"===t&&"video"===n},Jt.config.isReservedTag=vr,Jt.config.isReservedAttr=er,Jt.config.getTagNamespace=function(n){return gr(n)?"svg":"math"===n?"math":void 0},Jt.config.isUnknownElement=function(n){if(!Y)return!0;if(vr(n))return!1;if(n=n.toLowerCase(),null!=br[n])return br[n];var e=document.createElement(n);return n.indexOf("-")>-1?br[n]=e.constructor===window.HTMLUnknownElement||e.constructor===window.HTMLElement:br[n]=/HTMLUnknownElement/.test(e.toString())},P(Jt.options.directives,Ho),P(Jt.options.components,ta),Jt.prototype.__patch__=Y?qo:q,Jt.prototype.$mount=function(n,e){return function(n,e,t){var r;n.$el=e,n.$options.render||(n.$options.render=hn),et(n,"beforeMount"),r=function(){n._update(n._render(),t)},new Ge(n,r,q,{before:function(){n._isMounted&&!n._isDestroyed&&et(n,"beforeUpdate")}},!0),t=!1;var o=n._preWatchers;if(o)for(var a=0;a<o.length;a++)o[a].run();return null==n.$vnode&&(n._isMounted=!0,et(n,"mounted")),n}(this,n=n&&Y?function(n){if("string"==typeof n){var e=document.querySelector(n);return e||document.createElement("div")}return n}(n):void 0,e)},Y&&setTimeout((function(){U.devtools&&cn&&cn.emit("init",Jt)}),0);var oa=/[!'()*]/g,aa=function(n){return"%"+n.charCodeAt(0).toString(16)},ia=/%2C/g,sa=function(n){return encodeURIComponent(n).replace(oa,aa).replace(ia,",")};function ca(n){try{return decodeURIComponent(n)}catch(n){0}return n}var la=function(n){return null==n||"object"==typeof n?n:String(n)};function pa(n){var e={};return(n=n.trim().replace(/^(\?|#|&)/,""))?(n.split("&").forEach((function(n){var t=n.replace(/\+/g," ").split("="),r=ca(t.shift()),o=t.length>0?ca(t.join("=")):null;void 0===e[r]?e[r]=o:Array.isArray(e[r])?e[r].push(o):e[r]=[e[r],o]})),e):e}function ua(n){var e=n?Object.keys(n).map((function(e){var t=n[e];if(void 0===t)return"";if(null===t)return sa(e);if(Array.isArray(t)){var r=[];return t.forEach((function(n){void 0!==n&&(null===n?r.push(sa(e)):r.push(sa(e)+"="+sa(n)))})),r.join("&")}return sa(e)+"="+sa(t)})).filter((function(n){return n.length>0})).join("&"):null;return e?"?"+e:""}var da=/\/?$/;function ma(n,e,t,r){var o=r&&r.options.stringifyQuery,a=e.query||{};try{a=fa(a)}catch(n){}var i={name:e.name||n&&n.name,meta:n&&n.meta||{},path:e.path||"/",hash:e.hash||"",query:a,params:e.params||{},fullPath:va(e,o),matched:n?ga(n):[]};return t&&(i.redirectedFrom=va(t,o)),Object.freeze(i)}function fa(n){if(Array.isArray(n))return n.map(fa);if(n&&"object"==typeof n){var e={};for(var t in n)e[t]=fa(n[t]);return e}return n}var ha=ma(null,{path:"/"});function ga(n){for(var e=[];n;)e.unshift(n),n=n.parent;return e}function va(n,e){var t=n.path,r=n.query;void 0===r&&(r={});var o=n.hash;return void 0===o&&(o=""),(t||"/")+(e||ua)(r)+o}function ba(n,e,t){return e===ha?n===e:!!e&&(n.path&&e.path?n.path.replace(da,"")===e.path.replace(da,"")&&(t||n.hash===e.hash&&ya(n.query,e.query)):!(!n.name||!e.name)&&(n.name===e.name&&(t||n.hash===e.hash&&ya(n.query,e.query)&&ya(n.params,e.params))))}function ya(n,e){if(void 0===n&&(n={}),void 0===e&&(e={}),!n||!e)return n===e;var t=Object.keys(n).sort(),r=Object.keys(e).sort();return t.length===r.length&&t.every((function(t,o){var a=n[t];if(r[o]!==t)return!1;var i=e[t];return null==a||null==i?a===i:"object"==typeof a&&"object"==typeof i?ya(a,i):String(a)===String(i)}))}function xa(n){for(var e=0;e<n.matched.length;e++){var t=n.matched[e];for(var r in t.instances){var o=t.instances[r],a=t.enteredCbs[r];if(o&&a){delete t.enteredCbs[r];for(var i=0;i<a.length;i++)o._isBeingDestroyed||a[i](o)}}}}var _a={name:"RouterView",functional:!0,props:{name:{type:String,default:"default"}},render:function(n,e){var t=e.props,r=e.children,o=e.parent,a=e.data;a.routerView=!0;for(var i=o.$createElement,s=t.name,c=o.$route,l=o._routerViewCache||(o._routerViewCache={}),p=0,u=!1;o&&o._routerRoot!==o;){var d=o.$vnode?o.$vnode.data:{};d.routerView&&p++,d.keepAlive&&o._directInactive&&o._inactive&&(u=!0),o=o.$parent}if(a.routerViewDepth=p,u){var m=l[s],f=m&&m.component;return f?(m.configProps&&wa(f,a,m.route,m.configProps),i(f,a,r)):i()}var h=c.matched[p],g=h&&h.components[s];if(!h||!g)return l[s]=null,i();l[s]={component:g},a.registerRouteInstance=function(n,e){var t=h.instances[s];(e&&t!==n||!e&&t===n)&&(h.instances[s]=e)},(a.hook||(a.hook={})).prepatch=function(n,e){h.instances[s]=e.componentInstance},a.hook.init=function(n){n.data.keepAlive&&n.componentInstance&&n.componentInstance!==h.instances[s]&&(h.instances[s]=n.componentInstance),xa(c)};var v=h.props&&h.props[s];return v&&(ra(l[s],{route:c,configProps:v}),wa(g,a,c,v)),i(g,a,r)}};function wa(n,e,t,r){var o=e.props=function(n,e){switch(typeof e){case"undefined":return;case"object":return e;case"function":return e(n);case"boolean":return e?n.params:void 0;default:0}}(t,r);if(o){o=e.props=ra({},o);var a=e.attrs=e.attrs||{};for(var i in o)n.props&&i in n.props||(a[i]=o[i],delete o[i])}}function ka(n,e,t){var r=n.charAt(0);if("/"===r)return n;if("?"===r||"#"===r)return e+n;var o=e.split("/");t&&o[o.length-1]||o.pop();for(var a=n.replace(/^\//,"").split("/"),i=0;i<a.length;i++){var s=a[i];".."===s?o.pop():"."!==s&&o.push(s)}return""!==o[0]&&o.unshift(""),o.join("/")}function Sa(n){return n.replace(/\/(?:\s*\/)+/g,"/")}var Ta=Array.isArray||function(n){return"[object Array]"==Object.prototype.toString.call(n)},ja=Ma,Ea=Pa,Aa=function(n,e){return qa(Pa(n,e),e)},Oa=qa,Ca=Na,Ia=new RegExp(["(\\\\.)","([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))"].join("|"),"g");function Pa(n,e){for(var t,r=[],o=0,a=0,i="",s=e&&e.delimiter||"/";null!=(t=Ia.exec(n));){var c=t[0],l=t[1],p=t.index;if(i+=n.slice(a,p),a=p+c.length,l)i+=l[1];else{var u=n[a],d=t[2],m=t[3],f=t[4],h=t[5],g=t[6],v=t[7];i&&(r.push(i),i="");var b=null!=d&&null!=u&&u!==d,y="+"===g||"*"===g,x="?"===g||"*"===g,_=t[2]||s,w=f||h;r.push({name:m||o++,prefix:d||"",delimiter:_,optional:x,repeat:y,partial:b,asterisk:!!v,pattern:w?Ba(w):v?".*":"[^"+za(_)+"]+?"})}}return a<n.length&&(i+=n.substr(a)),i&&r.push(i),r}function $a(n){return encodeURI(n).replace(/[\/?#]/g,(function(n){return"%"+n.charCodeAt(0).toString(16).toUpperCase()}))}function qa(n,e){for(var t=new Array(n.length),r=0;r<n.length;r++)"object"==typeof n[r]&&(t[r]=new RegExp("^(?:"+n[r].pattern+")$",La(e)));return function(e,r){for(var o="",a=e||{},i=(r||{}).pretty?$a:encodeURIComponent,s=0;s<n.length;s++){var c=n[s];if("string"!=typeof c){var l,p=a[c.name];if(null==p){if(c.optional){c.partial&&(o+=c.prefix);continue}throw new TypeError('Expected "'+c.name+'" to be defined')}if(Ta(p)){if(!c.repeat)throw new TypeError('Expected "'+c.name+'" to not repeat, but received `'+JSON.stringify(p)+"`");if(0===p.length){if(c.optional)continue;throw new TypeError('Expected "'+c.name+'" to not be empty')}for(var u=0;u<p.length;u++){if(l=i(p[u]),!t[s].test(l))throw new TypeError('Expected all "'+c.name+'" to match "'+c.pattern+'", but received `'+JSON.stringify(l)+"`");o+=(0===u?c.prefix:c.delimiter)+l}}else{if(l=c.asterisk?encodeURI(p).replace(/[?#]/g,(function(n){return"%"+n.charCodeAt(0).toString(16).toUpperCase()})):i(p),!t[s].test(l))throw new TypeError('Expected "'+c.name+'" to match "'+c.pattern+'", but received "'+l+'"');o+=c.prefix+l}}else o+=c}return o}}function za(n){return n.replace(/([.+*?=^!:${}()[\]|\/\\])/g,"\\$1")}function Ba(n){return n.replace(/([=!:$\/()])/g,"\\$1")}function Ra(n,e){return n.keys=e,n}function La(n){return n&&n.sensitive?"":"i"}function Na(n,e,t){Ta(e)||(t=e||t,e=[]);for(var r=(t=t||{}).strict,o=!1!==t.end,a="",i=0;i<n.length;i++){var s=n[i];if("string"==typeof s)a+=za(s);else{var c=za(s.prefix),l="(?:"+s.pattern+")";e.push(s),s.repeat&&(l+="(?:"+c+l+")*"),a+=l=s.optional?s.partial?c+"("+l+")?":"(?:"+c+"("+l+"))?":c+"("+l+")"}}var p=za(t.delimiter||"/"),u=a.slice(-p.length)===p;return r||(a=(u?a.slice(0,-p.length):a)+"(?:"+p+"(?=$))?"),a+=o?"$":r&&u?"":"(?="+p+"|$)",Ra(new RegExp("^"+a,La(t)),e)}function Ma(n,e,t){return Ta(e)||(t=e||t,e=[]),t=t||{},n instanceof RegExp?function(n,e){var t=n.source.match(/\((?!\?)/g);if(t)for(var r=0;r<t.length;r++)e.push({name:r,prefix:null,delimiter:null,optional:!1,repeat:!1,partial:!1,asterisk:!1,pattern:null});return Ra(n,e)}(n,e):Ta(n)?function(n,e,t){for(var r=[],o=0;o<n.length;o++)r.push(Ma(n[o],e,t).source);return Ra(new RegExp("(?:"+r.join("|")+")",La(t)),e)}(n,e,t):function(n,e,t){return Na(Pa(n,t),e,t)}(n,e,t)}ja.parse=Ea,ja.compile=Aa,ja.tokensToFunction=Oa,ja.tokensToRegExp=Ca;var Da=Object.create(null);function Fa(n,e,t){e=e||{};try{var r=Da[n]||(Da[n]=ja.compile(n));return"string"==typeof e.pathMatch&&(e[0]=e.pathMatch),r(e,{pretty:!0})}catch(n){return""}finally{delete e[0]}}function Ua(n,e,t,r){var o="string"==typeof n?{path:n}:n;if(o._normalized)return o;if(o.name){var a=(o=ra({},n)).params;return a&&"object"==typeof a&&(o.params=ra({},a)),o}if(!o.path&&o.params&&e){(o=ra({},o))._normalized=!0;var i=ra(ra({},e.params),o.params);if(e.name)o.name=e.name,o.params=i;else if(e.matched.length){var s=e.matched[e.matched.length-1].path;o.path=Fa(s,i,e.path)}else 0;return o}var c=function(n){var e="",t="",r=n.indexOf("#");r>=0&&(e=n.slice(r),n=n.slice(0,r));var o=n.indexOf("?");return o>=0&&(t=n.slice(o+1),n=n.slice(0,o)),{path:n,query:t,hash:e}}(o.path||""),l=e&&e.path||"/",p=c.path?ka(c.path,l,t||o.append):l,u=function(n,e,t){void 0===e&&(e={});var r,o=t||pa;try{r=o(n||"")}catch(n){r={}}for(var a in e){var i=e[a];r[a]=Array.isArray(i)?i.map(la):la(i)}return r}(c.query,o.query,r&&r.options.parseQuery),d=o.hash||c.hash;return d&&"#"!==d.charAt(0)&&(d="#"+d),{_normalized:!0,path:p,query:u,hash:d}}var Ha,Va=function(){},Ga={name:"RouterLink",props:{to:{type:[String,Object],required:!0},tag:{type:String,default:"a"},custom:Boolean,exact:Boolean,exactPath:Boolean,append:Boolean,replace:Boolean,activeClass:String,exactActiveClass:String,ariaCurrentValue:{type:String,default:"page"},event:{type:[String,Array],default:"click"}},render:function(n){var e=this,t=this.$router,r=this.$route,o=t.resolve(this.to,r,this.append),a=o.location,i=o.route,s=o.href,c={},l=t.options.linkActiveClass,p=t.options.linkExactActiveClass,u=null==l?"router-link-active":l,d=null==p?"router-link-exact-active":p,m=null==this.activeClass?u:this.activeClass,f=null==this.exactActiveClass?d:this.exactActiveClass,h=i.redirectedFrom?ma(null,Ua(i.redirectedFrom),null,t):i;c[f]=ba(r,h,this.exactPath),c[m]=this.exact||this.exactPath?c[f]:function(n,e){return 0===n.path.replace(da,"/").indexOf(e.path.replace(da,"/"))&&(!e.hash||n.hash===e.hash)&&function(n,e){for(var t in e)if(!(t in n))return!1;return!0}(n.query,e.query)}(r,h);var g=c[f]?this.ariaCurrentValue:null,v=function(n){Ja(n)&&(e.replace?t.replace(a,Va):t.push(a,Va))},b={click:Ja};Array.isArray(this.event)?this.event.forEach((function(n){b[n]=v})):b[this.event]=v;var y={class:c},x=!this.$scopedSlots.$hasNormal&&this.$scopedSlots.default&&this.$scopedSlots.default({href:s,route:i,navigate:v,isActive:c[m],isExactActive:c[f]});if(x){if(1===x.length)return x[0];if(x.length>1||!x.length)return 0===x.length?n():n("span",{},x)}if("a"===this.tag)y.on=b,y.attrs={href:s,"aria-current":g};else{var _=function n(e){var t;if(e)for(var r=0;r<e.length;r++){if("a"===(t=e[r]).tag)return t;if(t.children&&(t=n(t.children)))return t}}(this.$slots.default);if(_){_.isStatic=!1;var w=_.data=ra({},_.data);for(var k in w.on=w.on||{},w.on){var S=w.on[k];k in b&&(w.on[k]=Array.isArray(S)?S:[S])}for(var T in b)T in w.on?w.on[T].push(b[T]):w.on[T]=v;var j=_.data.attrs=ra({},_.data.attrs);j.href=s,j["aria-current"]=g}else y.on=b}return n(this.tag,y,this.$slots.default)}};function Ja(n){if(!(n.metaKey||n.altKey||n.ctrlKey||n.shiftKey||n.defaultPrevented||void 0!==n.button&&0!==n.button)){if(n.currentTarget&&n.currentTarget.getAttribute){var e=n.currentTarget.getAttribute("target");if(/\b_blank\b/i.test(e))return}return n.preventDefault&&n.preventDefault(),!0}}var Wa="undefined"!=typeof window;function Ya(n,e,t,r,o){var a=e||[],i=t||Object.create(null),s=r||Object.create(null);n.forEach((function(n){!function n(e,t,r,o,a,i){var s=o.path,c=o.name;0;var l=o.pathToRegexpOptions||{},p=function(n,e,t){t||(n=n.replace(/\/$/,""));if("/"===n[0])return n;if(null==e)return n;return Sa(e.path+"/"+n)}(s,a,l.strict);"boolean"==typeof o.caseSensitive&&(l.sensitive=o.caseSensitive);var u={path:p,regex:Xa(p,l),components:o.components||{default:o.component},alias:o.alias?"string"==typeof o.alias?[o.alias]:o.alias:[],instances:{},enteredCbs:{},name:c,parent:a,matchAs:i,redirect:o.redirect,beforeEnter:o.beforeEnter,meta:o.meta||{},props:null==o.props?{}:o.components?o.props:{default:o.props}};o.children&&o.children.forEach((function(o){var a=i?Sa(i+"/"+o.path):void 0;n(e,t,r,o,u,a)}));t[u.path]||(e.push(u.path),t[u.path]=u);if(void 0!==o.alias)for(var d=Array.isArray(o.alias)?o.alias:[o.alias],m=0;m<d.length;++m){0;var f={path:d[m],children:o.children};n(e,t,r,f,a,u.path||"/")}c&&(r[c]||(r[c]=u))}(a,i,s,n,o)}));for(var c=0,l=a.length;c<l;c++)"*"===a[c]&&(a.push(a.splice(c,1)[0]),l--,c--);return{pathList:a,pathMap:i,nameMap:s}}function Xa(n,e){return ja(n,[],e)}function Za(n,e){var t=Ya(n),r=t.pathList,o=t.pathMap,a=t.nameMap;function i(n,t,i){var s=Ua(n,t,!1,e),l=s.name;if(l){var p=a[l];if(!p)return c(null,s);var u=p.regex.keys.filter((function(n){return!n.optional})).map((function(n){return n.name}));if("object"!=typeof s.params&&(s.params={}),t&&"object"==typeof t.params)for(var d in t.params)!(d in s.params)&&u.indexOf(d)>-1&&(s.params[d]=t.params[d]);return s.path=Fa(p.path,s.params),c(p,s,i)}if(s.path){s.params={};for(var m=0;m<r.length;m++){var f=r[m],h=o[f];if(Qa(h.regex,s.path,s.params))return c(h,s,i)}}return c(null,s)}function s(n,t){var r=n.redirect,o="function"==typeof r?r(ma(n,t,null,e)):r;if("string"==typeof o&&(o={path:o}),!o||"object"!=typeof o)return c(null,t);var s=o,l=s.name,p=s.path,u=t.query,d=t.hash,m=t.params;if(u=s.hasOwnProperty("query")?s.query:u,d=s.hasOwnProperty("hash")?s.hash:d,m=s.hasOwnProperty("params")?s.params:m,l){a[l];return i({_normalized:!0,name:l,query:u,hash:d,params:m},void 0,t)}if(p){var f=function(n,e){return ka(n,e.parent?e.parent.path:"/",!0)}(p,n);return i({_normalized:!0,path:Fa(f,m),query:u,hash:d},void 0,t)}return c(null,t)}function c(n,t,r){return n&&n.redirect?s(n,r||t):n&&n.matchAs?function(n,e,t){var r=i({_normalized:!0,path:Fa(t,e.params)});if(r){var o=r.matched,a=o[o.length-1];return e.params=r.params,c(a,e)}return c(null,e)}(0,t,n.matchAs):ma(n,t,r,e)}return{match:i,addRoute:function(n,e){var t="object"!=typeof n?a[n]:void 0;Ya([e||n],r,o,a,t),t&&t.alias.length&&Ya(t.alias.map((function(n){return{path:n,children:[e]}})),r,o,a,t)},getRoutes:function(){return r.map((function(n){return o[n]}))},addRoutes:function(n){Ya(n,r,o,a)}}}function Qa(n,e,t){var r=e.match(n);if(!r)return!1;if(!t)return!0;for(var o=1,a=r.length;o<a;++o){var i=n.keys[o-1];i&&(t[i.name||"pathMatch"]="string"==typeof r[o]?ca(r[o]):r[o])}return!0}var Ka=Wa&&window.performance&&window.performance.now?window.performance:Date;function ni(){return Ka.now().toFixed(3)}var ei=ni();function ti(){return ei}function ri(n){return ei=n}var oi=Object.create(null);function ai(){"scrollRestoration"in window.history&&(window.history.scrollRestoration="manual");var n=window.location.protocol+"//"+window.location.host,e=window.location.href.replace(n,""),t=ra({},window.history.state);return t.key=ti(),window.history.replaceState(t,"",e),window.addEventListener("popstate",ci),function(){window.removeEventListener("popstate",ci)}}function ii(n,e,t,r){if(n.app){var o=n.options.scrollBehavior;o&&n.app.$nextTick((function(){var a=function(){var n=ti();if(n)return oi[n]}(),i=o.call(n,e,t,r?a:null);i&&("function"==typeof i.then?i.then((function(n){mi(n,a)})).catch((function(n){0})):mi(i,a))}))}}function si(){var n=ti();n&&(oi[n]={x:window.pageXOffset,y:window.pageYOffset})}function ci(n){si(),n.state&&n.state.key&&ri(n.state.key)}function li(n){return ui(n.x)||ui(n.y)}function pi(n){return{x:ui(n.x)?n.x:window.pageXOffset,y:ui(n.y)?n.y:window.pageYOffset}}function ui(n){return"number"==typeof n}var di=/^#\d/;function mi(n,e){var t,r="object"==typeof n;if(r&&"string"==typeof n.selector){var o=di.test(n.selector)?document.getElementById(n.selector.slice(1)):document.querySelector(n.selector);if(o){var a=n.offset&&"object"==typeof n.offset?n.offset:{};e=function(n,e){var t=document.documentElement.getBoundingClientRect(),r=n.getBoundingClientRect();return{x:r.left-t.left-e.x,y:r.top-t.top-e.y}}(o,a={x:ui((t=a).x)?t.x:0,y:ui(t.y)?t.y:0})}else li(n)&&(e=pi(n))}else r&&li(n)&&(e=pi(n));e&&("scrollBehavior"in document.documentElement.style?window.scrollTo({left:e.x,top:e.y,behavior:n.behavior}):window.scrollTo(e.x,e.y))}var fi,hi=Wa&&((-1===(fi=window.navigator.userAgent).indexOf("Android 2.")&&-1===fi.indexOf("Android 4.0")||-1===fi.indexOf("Mobile Safari")||-1!==fi.indexOf("Chrome")||-1!==fi.indexOf("Windows Phone"))&&window.history&&"function"==typeof window.history.pushState);function gi(n,e){si();var t=window.history;try{if(e){var r=ra({},t.state);r.key=ti(),t.replaceState(r,"",n)}else t.pushState({key:ri(ni())},"",n)}catch(t){window.location[e?"replace":"assign"](n)}}function vi(n){gi(n,!0)}var bi={redirected:2,aborted:4,cancelled:8,duplicated:16};function yi(n,e){return _i(n,e,bi.redirected,'Redirected when going from "'+n.fullPath+'" to "'+function(n){if("string"==typeof n)return n;if("path"in n)return n.path;var e={};return wi.forEach((function(t){t in n&&(e[t]=n[t])})),JSON.stringify(e,null,2)}(e)+'" via a navigation guard.')}function xi(n,e){return _i(n,e,bi.cancelled,'Navigation cancelled from "'+n.fullPath+'" to "'+e.fullPath+'" with a new navigation.')}function _i(n,e,t,r){var o=new Error(r);return o._isRouter=!0,o.from=n,o.to=e,o.type=t,o}var wi=["params","query","hash"];function ki(n){return Object.prototype.toString.call(n).indexOf("Error")>-1}function Si(n,e){return ki(n)&&n._isRouter&&(null==e||n.type===e)}function Ti(n,e,t){var r=function(o){o>=n.length?t():n[o]?e(n[o],(function(){r(o+1)})):r(o+1)};r(0)}function ji(n){return function(e,t,r){var o=!1,a=0,i=null;Ei(n,(function(n,e,t,s){if("function"==typeof n&&void 0===n.cid){o=!0,a++;var c,l=Ci((function(e){var o;((o=e).__esModule||Oi&&"Module"===o[Symbol.toStringTag])&&(e=e.default),n.resolved="function"==typeof e?e:Ha.extend(e),t.components[s]=e,--a<=0&&r()})),p=Ci((function(n){var e="Failed to resolve async component "+s+": "+n;i||(i=ki(n)?n:new Error(e),r(i))}));try{c=n(l,p)}catch(n){p(n)}if(c)if("function"==typeof c.then)c.then(l,p);else{var u=c.component;u&&"function"==typeof u.then&&u.then(l,p)}}})),o||r()}}function Ei(n,e){return Ai(n.map((function(n){return Object.keys(n.components).map((function(t){return e(n.components[t],n.instances[t],n,t)}))})))}function Ai(n){return Array.prototype.concat.apply([],n)}var Oi="function"==typeof Symbol&&"symbol"==typeof Symbol.toStringTag;function Ci(n){var e=!1;return function(){for(var t=[],r=arguments.length;r--;)t[r]=arguments[r];if(!e)return e=!0,n.apply(this,t)}}var Ii=function(n,e){this.router=n,this.base=function(n){if(!n)if(Wa){var e=document.querySelector("base");n=(n=e&&e.getAttribute("href")||"/").replace(/^https?:\/\/[^\/]+/,"")}else n="/";"/"!==n.charAt(0)&&(n="/"+n);return n.replace(/\/$/,"")}(e),this.current=ha,this.pending=null,this.ready=!1,this.readyCbs=[],this.readyErrorCbs=[],this.errorCbs=[],this.listeners=[]};function Pi(n,e,t,r){var o=Ei(n,(function(n,r,o,a){var i=function(n,e){"function"!=typeof n&&(n=Ha.extend(n));return n.options[e]}(n,e);if(i)return Array.isArray(i)?i.map((function(n){return t(n,r,o,a)})):t(i,r,o,a)}));return Ai(r?o.reverse():o)}function $i(n,e){if(e)return function(){return n.apply(e,arguments)}}Ii.prototype.listen=function(n){this.cb=n},Ii.prototype.onReady=function(n,e){this.ready?n():(this.readyCbs.push(n),e&&this.readyErrorCbs.push(e))},Ii.prototype.onError=function(n){this.errorCbs.push(n)},Ii.prototype.transitionTo=function(n,e,t){var r,o=this;try{r=this.router.match(n,this.current)}catch(n){throw this.errorCbs.forEach((function(e){e(n)})),n}var a=this.current;this.confirmTransition(r,(function(){o.updateRoute(r),e&&e(r),o.ensureURL(),o.router.afterHooks.forEach((function(n){n&&n(r,a)})),o.ready||(o.ready=!0,o.readyCbs.forEach((function(n){n(r)})))}),(function(n){t&&t(n),n&&!o.ready&&(Si(n,bi.redirected)&&a===ha||(o.ready=!0,o.readyErrorCbs.forEach((function(e){e(n)}))))}))},Ii.prototype.confirmTransition=function(n,e,t){var r=this,o=this.current;this.pending=n;var a,i,s=function(n){!Si(n)&&ki(n)&&(r.errorCbs.length?r.errorCbs.forEach((function(e){e(n)})):console.error(n)),t&&t(n)},c=n.matched.length-1,l=o.matched.length-1;if(ba(n,o)&&c===l&&n.matched[c]===o.matched[l])return this.ensureURL(),n.hash&&ii(this.router,o,n,!1),s(((i=_i(a=o,n,bi.duplicated,'Avoided redundant navigation to current location: "'+a.fullPath+'".')).name="NavigationDuplicated",i));var p=function(n,e){var t,r=Math.max(n.length,e.length);for(t=0;t<r&&n[t]===e[t];t++);return{updated:e.slice(0,t),activated:e.slice(t),deactivated:n.slice(t)}}(this.current.matched,n.matched),u=p.updated,d=p.deactivated,m=p.activated,f=[].concat(function(n){return Pi(n,"beforeRouteLeave",$i,!0)}(d),this.router.beforeHooks,function(n){return Pi(n,"beforeRouteUpdate",$i)}(u),m.map((function(n){return n.beforeEnter})),ji(m)),h=function(e,t){if(r.pending!==n)return s(xi(o,n));try{e(n,o,(function(e){!1===e?(r.ensureURL(!0),s(function(n,e){return _i(n,e,bi.aborted,'Navigation aborted from "'+n.fullPath+'" to "'+e.fullPath+'" via a navigation guard.')}(o,n))):ki(e)?(r.ensureURL(!0),s(e)):"string"==typeof e||"object"==typeof e&&("string"==typeof e.path||"string"==typeof e.name)?(s(yi(o,n)),"object"==typeof e&&e.replace?r.replace(e):r.push(e)):t(e)}))}catch(n){s(n)}};Ti(f,h,(function(){Ti(function(n){return Pi(n,"beforeRouteEnter",(function(n,e,t,r){return function(n,e,t){return function(r,o,a){return n(r,o,(function(n){"function"==typeof n&&(e.enteredCbs[t]||(e.enteredCbs[t]=[]),e.enteredCbs[t].push(n)),a(n)}))}}(n,t,r)}))}(m).concat(r.router.resolveHooks),h,(function(){if(r.pending!==n)return s(xi(o,n));r.pending=null,e(n),r.router.app&&r.router.app.$nextTick((function(){xa(n)}))}))}))},Ii.prototype.updateRoute=function(n){this.current=n,this.cb&&this.cb(n)},Ii.prototype.setupListeners=function(){},Ii.prototype.teardown=function(){this.listeners.forEach((function(n){n()})),this.listeners=[],this.current=ha,this.pending=null};var qi=function(n){function e(e,t){n.call(this,e,t),this._startLocation=zi(this.base)}return n&&(e.__proto__=n),e.prototype=Object.create(n&&n.prototype),e.prototype.constructor=e,e.prototype.setupListeners=function(){var n=this;if(!(this.listeners.length>0)){var e=this.router,t=e.options.scrollBehavior,r=hi&&t;r&&this.listeners.push(ai());var o=function(){var t=n.current,o=zi(n.base);n.current===ha&&o===n._startLocation||n.transitionTo(o,(function(n){r&&ii(e,n,t,!0)}))};window.addEventListener("popstate",o),this.listeners.push((function(){window.removeEventListener("popstate",o)}))}},e.prototype.go=function(n){window.history.go(n)},e.prototype.push=function(n,e,t){var r=this,o=this.current;this.transitionTo(n,(function(n){gi(Sa(r.base+n.fullPath)),ii(r.router,n,o,!1),e&&e(n)}),t)},e.prototype.replace=function(n,e,t){var r=this,o=this.current;this.transitionTo(n,(function(n){vi(Sa(r.base+n.fullPath)),ii(r.router,n,o,!1),e&&e(n)}),t)},e.prototype.ensureURL=function(n){if(zi(this.base)!==this.current.fullPath){var e=Sa(this.base+this.current.fullPath);n?gi(e):vi(e)}},e.prototype.getCurrentLocation=function(){return zi(this.base)},e}(Ii);function zi(n){var e=window.location.pathname,t=e.toLowerCase(),r=n.toLowerCase();return!n||t!==r&&0!==t.indexOf(Sa(r+"/"))||(e=e.slice(n.length)),(e||"/")+window.location.search+window.location.hash}var Bi=function(n){function e(e,t,r){n.call(this,e,t),r&&function(n){var e=zi(n);if(!/^\/#/.test(e))return window.location.replace(Sa(n+"/#"+e)),!0}(this.base)||Ri()}return n&&(e.__proto__=n),e.prototype=Object.create(n&&n.prototype),e.prototype.constructor=e,e.prototype.setupListeners=function(){var n=this;if(!(this.listeners.length>0)){var e=this.router.options.scrollBehavior,t=hi&&e;t&&this.listeners.push(ai());var r=function(){var e=n.current;Ri()&&n.transitionTo(Li(),(function(r){t&&ii(n.router,r,e,!0),hi||Di(r.fullPath)}))},o=hi?"popstate":"hashchange";window.addEventListener(o,r),this.listeners.push((function(){window.removeEventListener(o,r)}))}},e.prototype.push=function(n,e,t){var r=this,o=this.current;this.transitionTo(n,(function(n){Mi(n.fullPath),ii(r.router,n,o,!1),e&&e(n)}),t)},e.prototype.replace=function(n,e,t){var r=this,o=this.current;this.transitionTo(n,(function(n){Di(n.fullPath),ii(r.router,n,o,!1),e&&e(n)}),t)},e.prototype.go=function(n){window.history.go(n)},e.prototype.ensureURL=function(n){var e=this.current.fullPath;Li()!==e&&(n?Mi(e):Di(e))},e.prototype.getCurrentLocation=function(){return Li()},e}(Ii);function Ri(){var n=Li();return"/"===n.charAt(0)||(Di("/"+n),!1)}function Li(){var n=window.location.href,e=n.indexOf("#");return e<0?"":n=n.slice(e+1)}function Ni(n){var e=window.location.href,t=e.indexOf("#");return(t>=0?e.slice(0,t):e)+"#"+n}function Mi(n){hi?gi(Ni(n)):window.location.hash=n}function Di(n){hi?vi(Ni(n)):window.location.replace(Ni(n))}var Fi=function(n){function e(e,t){n.call(this,e,t),this.stack=[],this.index=-1}return n&&(e.__proto__=n),e.prototype=Object.create(n&&n.prototype),e.prototype.constructor=e,e.prototype.push=function(n,e,t){var r=this;this.transitionTo(n,(function(n){r.stack=r.stack.slice(0,r.index+1).concat(n),r.index++,e&&e(n)}),t)},e.prototype.replace=function(n,e,t){var r=this;this.transitionTo(n,(function(n){r.stack=r.stack.slice(0,r.index).concat(n),e&&e(n)}),t)},e.prototype.go=function(n){var e=this,t=this.index+n;if(!(t<0||t>=this.stack.length)){var r=this.stack[t];this.confirmTransition(r,(function(){var n=e.current;e.index=t,e.updateRoute(r),e.router.afterHooks.forEach((function(e){e&&e(r,n)}))}),(function(n){Si(n,bi.duplicated)&&(e.index=t)}))}},e.prototype.getCurrentLocation=function(){var n=this.stack[this.stack.length-1];return n?n.fullPath:"/"},e.prototype.ensureURL=function(){},e}(Ii),Ui=function(n){void 0===n&&(n={}),this.app=null,this.apps=[],this.options=n,this.beforeHooks=[],this.resolveHooks=[],this.afterHooks=[],this.matcher=Za(n.routes||[],this);var e=n.mode||"hash";switch(this.fallback="history"===e&&!hi&&!1!==n.fallback,this.fallback&&(e="hash"),Wa||(e="abstract"),this.mode=e,e){case"history":this.history=new qi(this,n.base);break;case"hash":this.history=new Bi(this,n.base,this.fallback);break;case"abstract":this.history=new Fi(this,n.base);break;default:0}},Hi={currentRoute:{configurable:!0}};Ui.prototype.match=function(n,e,t){return this.matcher.match(n,e,t)},Hi.currentRoute.get=function(){return this.history&&this.history.current},Ui.prototype.init=function(n){var e=this;if(this.apps.push(n),n.$once("hook:destroyed",(function(){var t=e.apps.indexOf(n);t>-1&&e.apps.splice(t,1),e.app===n&&(e.app=e.apps[0]||null),e.app||e.history.teardown()})),!this.app){this.app=n;var t=this.history;if(t instanceof qi||t instanceof Bi){var r=function(n){t.setupListeners(),function(n){var r=t.current,o=e.options.scrollBehavior;hi&&o&&"fullPath"in n&&ii(e,n,r,!1)}(n)};t.transitionTo(t.getCurrentLocation(),r,r)}t.listen((function(n){e.apps.forEach((function(e){e._route=n}))}))}},Ui.prototype.beforeEach=function(n){return Gi(this.beforeHooks,n)},Ui.prototype.beforeResolve=function(n){return Gi(this.resolveHooks,n)},Ui.prototype.afterEach=function(n){return Gi(this.afterHooks,n)},Ui.prototype.onReady=function(n,e){this.history.onReady(n,e)},Ui.prototype.onError=function(n){this.history.onError(n)},Ui.prototype.push=function(n,e,t){var r=this;if(!e&&!t&&"undefined"!=typeof Promise)return new Promise((function(e,t){r.history.push(n,e,t)}));this.history.push(n,e,t)},Ui.prototype.replace=function(n,e,t){var r=this;if(!e&&!t&&"undefined"!=typeof Promise)return new Promise((function(e,t){r.history.replace(n,e,t)}));this.history.replace(n,e,t)},Ui.prototype.go=function(n){this.history.go(n)},Ui.prototype.back=function(){this.go(-1)},Ui.prototype.forward=function(){this.go(1)},Ui.prototype.getMatchedComponents=function(n){var e=n?n.matched?n:this.resolve(n).route:this.currentRoute;return e?[].concat.apply([],e.matched.map((function(n){return Object.keys(n.components).map((function(e){return n.components[e]}))}))):[]},Ui.prototype.resolve=function(n,e,t){var r=Ua(n,e=e||this.history.current,t,this),o=this.match(r,e),a=o.redirectedFrom||o.fullPath;return{location:r,route:o,href:function(n,e,t){var r="hash"===t?"#"+e:e;return n?Sa(n+"/"+r):r}(this.history.base,a,this.mode),normalizedTo:r,resolved:o}},Ui.prototype.getRoutes=function(){return this.matcher.getRoutes()},Ui.prototype.addRoute=function(n,e){this.matcher.addRoute(n,e),this.history.current!==ha&&this.history.transitionTo(this.history.getCurrentLocation())},Ui.prototype.addRoutes=function(n){this.matcher.addRoutes(n),this.history.current!==ha&&this.history.transitionTo(this.history.getCurrentLocation())},Object.defineProperties(Ui.prototype,Hi);var Vi=Ui;function Gi(n,e){return n.push(e),function(){var t=n.indexOf(e);t>-1&&n.splice(t,1)}}Ui.install=function n(e){if(!n.installed||Ha!==e){n.installed=!0,Ha=e;var t=function(n){return void 0!==n},r=function(n,e){var r=n.$options._parentVnode;t(r)&&t(r=r.data)&&t(r=r.registerRouteInstance)&&r(n,e)};e.mixin({beforeCreate:function(){t(this.$options.router)?(this._routerRoot=this,this._router=this.$options.router,this._router.init(this),e.util.defineReactive(this,"_route",this._router.history.current)):this._routerRoot=this.$parent&&this.$parent._routerRoot||this,r(this,this)},destroyed:function(){r(this)}}),Object.defineProperty(e.prototype,"$router",{get:function(){return this._routerRoot._router}}),Object.defineProperty(e.prototype,"$route",{get:function(){return this._routerRoot._route}}),e.component("RouterView",_a),e.component("RouterLink",Ga);var o=e.config.optionMergeStrategies;o.beforeRouteEnter=o.beforeRouteLeave=o.beforeRouteUpdate=o.created}},Ui.version="3.6.5",Ui.isNavigationFailure=Si,Ui.NavigationFailureType=bi,Ui.START_LOCATION=ha,Wa&&window.Vue&&window.Vue.use(Ui);t(105);t(127),t(16);var Ji={NotFound:()=>Promise.all([t.e(0),t.e(4)]).then(t.bind(null,335)),Layout:()=>Promise.all([t.e(0),t.e(2)]).then(t.bind(null,334))},Wi={"v-410ad6d6":()=>t.e(6).then(t.bind(null,336)),"v-506dde02":()=>t.e(7).then(t.bind(null,337)),"v-6924a398":()=>t.e(8).then(t.bind(null,338)),"v-146a0386":()=>t.e(10).then(t.bind(null,339)),"v-61cd19e7":()=>t.e(9).then(t.bind(null,340)),"v-6d09a66b":()=>t.e(11).then(t.bind(null,341)),"v-4ad90504":()=>t.e(13).then(t.bind(null,342)),"v-39cba1eb":()=>t.e(12).then(t.bind(null,343)),"v-ee33d822":()=>t.e(14).then(t.bind(null,344)),"v-53e17527":()=>t.e(15).then(t.bind(null,345)),"v-2a3585a3":()=>t.e(16).then(t.bind(null,346)),"v-d8969a0a":()=>t.e(17).then(t.bind(null,347)),"v-47e66a74":()=>t.e(19).then(t.bind(null,348)),"v-77125a1f":()=>t.e(20).then(t.bind(null,349)),"v-95f7aaaa":()=>t.e(18).then(t.bind(null,350)),"v-c4a888e6":()=>t.e(21).then(t.bind(null,351)),"v-60ad81ab":()=>t.e(23).then(t.bind(null,352)),"v-4bd643ff":()=>t.e(22).then(t.bind(null,353)),"v-c2802dce":()=>t.e(24).then(t.bind(null,354)),"v-6a32665f":()=>t.e(26).then(t.bind(null,355)),"v-60d673cf":()=>t.e(27).then(t.bind(null,356)),"v-c214eb36":()=>t.e(25).then(t.bind(null,357)),"v-677903a2":()=>t.e(28).then(t.bind(null,358)),"v-03ee28ba":()=>t.e(30).then(t.bind(null,359)),"v-1f734aeb":()=>t.e(29).then(t.bind(null,360)),"v-747f3d61":()=>t.e(33).then(t.bind(null,361)),"v-6eeef438":()=>t.e(32).then(t.bind(null,362)),"v-48df9765":()=>t.e(34).then(t.bind(null,363)),"v-29f4206e":()=>t.e(31).then(t.bind(null,364)),"v-8faaed78":()=>t.e(35).then(t.bind(null,365)),"v-7658d99d":()=>t.e(36).then(t.bind(null,366)),"v-b3a54f2a":()=>t.e(37).then(t.bind(null,367)),"v-a4f5841a":()=>t.e(39).then(t.bind(null,368)),"v-76e23ba6":()=>t.e(38).then(t.bind(null,369)),"v-033068e6":()=>t.e(42).then(t.bind(null,370)),"v-5ab7a8b6":()=>t.e(40).then(t.bind(null,371)),"v-50fbb838":()=>t.e(41).then(t.bind(null,372)),"v-44f2eec0":()=>t.e(43).then(t.bind(null,373)),"v-5d5a30a0":()=>t.e(44).then(t.bind(null,374)),"v-9067353e":()=>t.e(46).then(t.bind(null,375)),"v-56d56947":()=>t.e(47).then(t.bind(null,376)),"v-366ac91b":()=>t.e(45).then(t.bind(null,377)),"v-77e443c8":()=>t.e(49).then(t.bind(null,378)),"v-32a7bf17":()=>t.e(48).then(t.bind(null,379)),"v-4b1a12f8":()=>t.e(50).then(t.bind(null,380)),"v-5cb574ec":()=>t.e(52).then(t.bind(null,381)),"v-5abd2300":()=>t.e(51).then(t.bind(null,382)),"v-5438e202":()=>t.e(53).then(t.bind(null,383)),"v-2d87f8c3":()=>t.e(54).then(t.bind(null,384)),"v-767608dd":()=>t.e(55).then(t.bind(null,385)),"v-65d3be39":()=>t.e(56).then(t.bind(null,386)),"v-f38b20e2":()=>t.e(60).then(t.bind(null,387)),"v-1ad6532d":()=>t.e(58).then(t.bind(null,388)),"v-cf2a59ca":()=>t.e(59).then(t.bind(null,389)),"v-eafc6aca":()=>t.e(61).then(t.bind(null,390)),"v-0cc3d734":()=>t.e(62).then(t.bind(null,391)),"v-69114fa0":()=>Promise.all([t.e(0),t.e(5)]).then(t.bind(null,392)),"v-51d5b4ef":()=>t.e(57).then(t.bind(null,393))};function Yi(n){const e=Object.create(null);return function(t){return e[t]||(e[t]=n(t))}}const Xi=/-(\w)/g,Zi=Yi(n=>n.replace(Xi,(n,e)=>e?e.toUpperCase():"")),Qi=/\B([A-Z])/g,Ki=Yi(n=>n.replace(Qi,"-$1").toLowerCase()),ns=Yi(n=>n.charAt(0).toUpperCase()+n.slice(1));function es(n,e){if(!e)return;if(n(e))return n(e);return e.includes("-")?n(ns(Zi(e))):n(ns(e))||n(Ki(e))}const ts=Object.assign({},Ji,Wi),rs=n=>ts[n],os=n=>Wi[n],as=n=>Ji[n],is=n=>Jt.component(n);function ss(n){return es(os,n)}function cs(n){return es(as,n)}function ls(n){return es(rs,n)}function ps(n){return es(is,n)}function us(...n){return Promise.all(n.filter(n=>n).map(async n=>{if(!ps(n)&&ls(n)){const e=await ls(n)();Jt.component(n,e.default)}}))}function ds(n,e){"undefined"!=typeof window&&window.__VUEPRESS__&&(window.__VUEPRESS__[n]=e)}var ms=t(91),fs=t.n(ms),hs=t(92),gs=t.n(hs),vs={created(){if(this.siteMeta=this.$site.headTags.filter(([n])=>"meta"===n).map(([n,e])=>e),this.$ssrContext){const e=this.getMergedMetaTags();this.$ssrContext.title=this.$title,this.$ssrContext.lang=this.$lang,this.$ssrContext.pageMeta=(n=e)?n.map(n=>{let e="<meta";return Object.keys(n).forEach(t=>{e+=` ${t}="${gs()(n[t])}"`}),e+">"}).join("\n    "):"",this.$ssrContext.canonicalLink=ys(this.$canonicalUrl)}var n},mounted(){this.currentMetaTags=[...document.querySelectorAll("meta")],this.updateMeta(),this.updateCanonicalLink()},methods:{updateMeta(){document.title=this.$title,document.documentElement.lang=this.$lang;const n=this.getMergedMetaTags();this.currentMetaTags=xs(n,this.currentMetaTags)},getMergedMetaTags(){const n=this.$page.frontmatter.meta||[];return fs()([{name:"description",content:this.$description}],n,this.siteMeta,_s)},updateCanonicalLink(){bs(),this.$canonicalUrl&&document.head.insertAdjacentHTML("beforeend",ys(this.$canonicalUrl))}},watch:{$page(){this.updateMeta(),this.updateCanonicalLink()}},beforeDestroy(){xs(null,this.currentMetaTags),bs()}};function bs(){const n=document.querySelector("link[rel='canonical']");n&&n.remove()}function ys(n=""){return n?`<link href="${n}" rel="canonical" />`:""}function xs(n,e){if(e&&[...e].filter(n=>n.parentNode===document.head).forEach(n=>document.head.removeChild(n)),n)return n.map(n=>{const e=document.createElement("meta");return Object.keys(n).forEach(t=>{e.setAttribute(t,n[t])}),document.head.appendChild(e),e})}function _s(n){for(const e of["name","property","itemprop"])if(n.hasOwnProperty(e))return n[e]+e;return JSON.stringify(n)}var ws=t(51),ks={mounted(){window.addEventListener("scroll",this.onScroll)},methods:{onScroll:t.n(ws)()((function(){this.setActiveHash()}),300),setActiveHash(){const n=[].slice.call(document.querySelectorAll(".sidebar-link")),e=[].slice.call(document.querySelectorAll(".header-anchor")).filter(e=>n.some(n=>n.hash===e.hash)),t=Math.max(window.pageYOffset,document.documentElement.scrollTop,document.body.scrollTop),r=Math.max(document.documentElement.scrollHeight,document.body.scrollHeight),o=window.innerHeight+t;for(let n=0;n<e.length;n++){const a=e[n],i=e[n+1],s=0===n&&0===t||t>=a.parentElement.offsetTop+10&&(!i||t<i.parentElement.offsetTop-10),c=decodeURIComponent(this.$route.hash);if(s&&c!==decodeURIComponent(a.hash)){const t=a;if(o===r)for(let t=n+1;t<e.length;t++)if(c===decodeURIComponent(e[t].hash))return;return this.$vuepress.$set("disableScrollBehavior",!0),void this.$router.replace(decodeURIComponent(t.hash),()=>{this.$nextTick(()=>{this.$vuepress.$set("disableScrollBehavior",!1)})})}}}},beforeDestroy(){window.removeEventListener("scroll",this.onScroll)}},Ss=t(24),Ts=t.n(Ss),js={mounted(){Ts.a.configure({showSpinner:!1}),this.$router.beforeEach((n,e,t)=>{n.path===e.path||Jt.component(n.name)||Ts.a.start(),t()}),this.$router.afterEach(()=>{Ts.a.done(),this.isSidebarOpen=!1})}};t(239),t(240);class Es{constructor(){this.containerEl=document.getElementById("message-container"),this.containerEl||(this.containerEl=document.createElement("div"),this.containerEl.id="message-container",document.body.appendChild(this.containerEl))}show({text:n="",duration:e=3e3}){let t=document.createElement("div");t.className="message move-in",t.innerHTML=`\n      <i style="fill: #06a35a;font-size: 14px;display:inline-flex;align-items: center;">\n        <svg style="fill: #06a35a;font-size: 14px;" t="1572421810237" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="2323" width="16" height="16"><path d="M822.811993 824.617989c-83.075838 81.99224-188.546032 124.613757-316.049383 127.86455-122.085362-3.250794-223.943563-45.87231-305.935802-127.86455s-124.613757-184.21164-127.86455-305.935802c3.250794-127.503351 45.87231-232.973545 127.86455-316.049383 81.99224-83.075838 184.21164-126.058554 305.935802-129.309347 127.503351 3.250794 232.973545 46.23351 316.049383 129.309347 83.075838 83.075838 126.058554 188.546032 129.309347 316.049383C949.231746 640.406349 905.887831 742.62575 822.811993 824.617989zM432.716755 684.111464c3.973192 3.973192 8.307584 5.779189 13.364374 6.140388 5.05679 0.361199 9.752381-1.444797 13.364374-5.417989l292.571429-287.514638c3.973192-3.973192 5.779189-8.307584 5.779189-13.364374 0-5.05679-1.805996-9.752381-5.779189-13.364374l1.805996 1.805996c-3.973192-3.973192-8.668783-5.779189-14.086772-6.140388-5.417989-0.361199-10.47478 1.444797-14.809171 5.417989l-264.397884 220.33157c-3.973192 3.250794-8.668783 4.695591-14.447972 4.695591-5.779189 0-10.835979-1.444797-15.53157-3.973192l-94.273016-72.962257c-4.334392-3.250794-9.391182-4.334392-14.447972-3.973192s-9.391182 3.250794-12.641975 7.585185l-2.889594 3.973192c-3.250794 4.334392-4.334392 9.391182-3.973192 14.809171 0.722399 5.417989 2.528395 10.11358 5.779189 14.086772L432.716755 684.111464z" p-id="2324"></path></svg>\n      </i>\n      <div class="text">${n}</div>\n    `,this.containerEl.appendChild(t),e>0&&setTimeout(()=>{this.close(t)},e)}close(n){n.className=n.className.replace("move-in",""),n.className+="move-out",n.addEventListener("animationend",()=>{n.remove()})}}var As={mounted(){!!/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)||this.updateCopy()},updated(){!!/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)||this.updateCopy()},methods:{updateCopy(){setTimeout(()=>{(['div[class*="language-"] pre','div[class*="aside-code"] aside']instanceof Array||Array.isArray(['div[class*="language-"] pre','div[class*="aside-code"] aside']))&&['div[class*="language-"] pre','div[class*="aside-code"] aside'].forEach(n=>{document.querySelectorAll(n).forEach(this.generateCopyButton)})},1e3)},generateCopyButton(n){if(n.classList.contains("codecopy-enabled"))return;const e=document.createElement("i");e.className="code-copy",e.innerHTML='<svg  style="color:#aaa;font-size:14px" t="1572422231464" class="icon" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="3201" width="14" height="14"><path d="M866.461538 39.384615H354.461538c-43.323077 0-78.769231 35.446154-78.76923 78.769231v39.384616h472.615384c43.323077 0 78.769231 35.446154 78.769231 78.76923v551.384616h39.384615c43.323077 0 78.769231-35.446154 78.769231-78.769231V118.153846c0-43.323077-35.446154-78.769231-78.769231-78.769231z m-118.153846 275.692308c0-43.323077-35.446154-78.769231-78.76923-78.769231H157.538462c-43.323077 0-78.769231 35.446154-78.769231 78.769231v590.769231c0 43.323077 35.446154 78.769231 78.769231 78.769231h512c43.323077 0 78.769231-35.446154 78.76923-78.769231V315.076923z m-354.461538 137.846154c0 11.815385-7.876923 19.692308-19.692308 19.692308h-157.538461c-11.815385 0-19.692308-7.876923-19.692308-19.692308v-39.384615c0-11.815385 7.876923-19.692308 19.692308-19.692308h157.538461c11.815385 0 19.692308 7.876923 19.692308 19.692308v39.384615z m157.538461 315.076923c0 11.815385-7.876923 19.692308-19.692307 19.692308H216.615385c-11.815385 0-19.692308-7.876923-19.692308-19.692308v-39.384615c0-11.815385 7.876923-19.692308 19.692308-19.692308h315.076923c11.815385 0 19.692308 7.876923 19.692307 19.692308v39.384615z m78.769231-157.538462c0 11.815385-7.876923 19.692308-19.692308 19.692308H216.615385c-11.815385 0-19.692308-7.876923-19.692308-19.692308v-39.384615c0-11.815385 7.876923-19.692308 19.692308-19.692308h393.846153c11.815385 0 19.692308 7.876923 19.692308 19.692308v39.384615z" p-id="3202"></path></svg>',e.title="Copy to clipboard",e.addEventListener("click",()=>{this.copyToClipboard(n.innerText)}),n.appendChild(e),n.classList.add("codecopy-enabled")},copyToClipboard(n){const e=document.createElement("textarea");e.value=n,e.setAttribute("readonly",""),e.style.position="absolute",e.style.left="-9999px",document.body.appendChild(e);const t=document.getSelection().rangeCount>0&&document.getSelection().getRangeAt(0);e.select(),document.execCommand("copy");(new Es).show({text:"复制成功",duration:1e3}),document.body.removeChild(e),t&&(document.getSelection().removeAllRanges(),document.getSelection().addRange(t))}}};!function(n,e){void 0===e&&(e={});var t=e.insertAt;if(n&&"undefined"!=typeof document){var r=document.head||document.getElementsByTagName("head")[0],o=document.createElement("style");o.type="text/css","top"===t&&r.firstChild?r.insertBefore(o,r.firstChild):r.appendChild(o),o.styleSheet?o.styleSheet.cssText=n:o.appendChild(document.createTextNode(n))}}("@media (max-width: 1000px) {\n  .vuepress-plugin-demo-block__h_code {\n    display: none;\n  }\n  .vuepress-plugin-demo-block__app {\n    margin-left: auto !important;\n    margin-right: auto !important;\n  }\n}\n.vuepress-plugin-demo-block__wrapper {\n  margin-top: 10px;\n  border: 1px solid #ebebeb;\n  border-radius: 4px;\n  transition: all 0.2s;\n}\n.vuepress-plugin-demo-block__wrapper.vuepress-plugin-demo-block__horizontal .vuepress-plugin-demo-block__display {\n  height: 400px;\n  display: flex;\n}\n.vuepress-plugin-demo-block__wrapper.vuepress-plugin-demo-block__horizontal .vuepress-plugin-demo-block__display .vuepress-plugin-demo-block__app {\n  width: 300px;\n  border: 1px solid #ebebeb;\n  box-shadow: 1px 1px 3px #ebebeb;\n  margin-right: 5px;\n  overflow: auto;\n}\n.vuepress-plugin-demo-block__wrapper.vuepress-plugin-demo-block__horizontal .vuepress-plugin-demo-block__display .vuepress-plugin-demo-block__h_code {\n  flex: 1;\n  overflow: auto;\n  height: 100%;\n}\n.vuepress-plugin-demo-block__wrapper.vuepress-plugin-demo-block__horizontal .vuepress-plugin-demo-block__display .vuepress-plugin-demo-block__h_code > pre {\n  overflow: visible;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__display {\n  max-height: 400px;\n  overflow: auto;\n}\n.vuepress-plugin-demo-block__wrapper div {\n  box-sizing: border-box;\n}\n.vuepress-plugin-demo-block__wrapper:hover {\n  box-shadow: 0 0 11px rgba(33, 33, 33, 0.2);\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__code {\n  overflow: hidden;\n  height: 0;\n  padding: 0 !important;\n  background-color: #282c34;\n  border-radius: 0 !important;\n  transition: height 0.5s;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__code pre {\n  margin: 0 !important;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__display {\n  padding: 20px;\n  border-bottom: 1px solid #ebebeb;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer {\n  position: relative;\n  text-align: center;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer.vuepress-plugin-demo-block__show-link .vuepress-plugin-demo-block__jsfiddle,\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer.vuepress-plugin-demo-block__show-link .vuepress-plugin-demo-block__codepen {\n  opacity: 1;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer.vuepress-plugin-demo-block__show-link .vuepress-plugin-demo-block__expand::before {\n  border-top: none;\n  border-right: 6px solid transparent;\n  border-bottom: 6px solid #ccc;\n  border-left: 6px solid transparent;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer:hover .vuepress-plugin-demo-block__jsfiddle,\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer:hover .vuepress-plugin-demo-block__codepen,\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer:hover .vuepress-plugin-demo-block__expand span,\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer:hover .vuepress-plugin-demo-block__expand {\n  opacity: 1;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer:hover .vuepress-plugin-demo-block__expand::before {\n  border-top-color: #3eaf7c !important;\n  border-bottom-color: #3eaf7c !important;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer:hover svg {\n  fill: #3eaf7c !important;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer .vuepress-plugin-demo-block__expand-text {\n  transition: all 0.5s;\n  opacity: 0;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer form:nth-last-child(2) {\n  right: 50px;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer form:last-child {\n  right: 10px;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer .vuepress-plugin-demo-block__button {\n  border-color: transparent;\n  background-color: transparent;\n  font-size: 14px;\n  color: #3eaf7c;\n  cursor: pointer;\n  outline: none;\n  margin: 0;\n  width: 46px;\n  position: relative;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer .vuepress-plugin-demo-block__button:hover::before {\n  content: attr(data-tip);\n  white-space: nowrap;\n  position: absolute;\n  top: -30px;\n  left: 50%;\n  color: #eee;\n  line-height: 1;\n  z-index: 1000;\n  border-radius: 4px;\n  padding: 6px;\n  -webkit-transform: translateX(-50%);\n          transform: translateX(-50%);\n  background-color: rgba(0, 0, 0, 0.8);\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer .vuepress-plugin-demo-block__button:hover::after {\n  content: '' !important;\n  display: block;\n  position: absolute;\n  left: 50%;\n  top: -5px;\n  -webkit-transform: translateX(-50%);\n          transform: translateX(-50%);\n  border: 5px solid transparent;\n  border-top-color: rgba(0, 0, 0, 0.8);\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer .vuepress-plugin-demo-block__button svg {\n  width: 34px;\n  height: 20px;\n  fill: #ccc;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer .vuepress-plugin-demo-block__jsfiddle,\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer .vuepress-plugin-demo-block__codepen {\n  position: absolute;\n  top: 10px;\n  transition: all 0.5s;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer .vuepress-plugin-demo-block__expand {\n  position: relative;\n  width: 100px;\n  height: 40px;\n  margin: 0;\n  color: #3eaf7c;\n  font-size: 14px;\n  background-color: transparent;\n  border-color: transparent;\n  outline: none;\n  transition: all 0.5s;\n  cursor: pointer;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer .vuepress-plugin-demo-block__expand::before {\n  content: \"\";\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  width: 0;\n  height: 0;\n  border-top: 6px solid #ccc;\n  border-right: 6px solid transparent;\n  border-left: 6px solid transparent;\n  -webkit-transform: translate(-50%, -50%);\n          transform: translate(-50%, -50%);\n}\n");var Os={jsLib:[],cssLib:[],jsfiddle:!0,codepen:!0,codepenLayout:"left",codepenJsProcessor:"babel",codepenEditors:"101",horizontal:!1,vue:"https://cdn.jsdelivr.net/npm/vue/dist/vue.min.js",react:"https://cdn.jsdelivr.net/npm/react/umd/react.production.min.js",reactDOM:"https://cdn.jsdelivr.net/npm/react-dom/umd/react-dom.production.min.js"},Cs={},Is=function(n){return'<div id="app">\n'.concat(n,"\n</div>")},Ps=function(n){return window.$VUEPRESS_DEMO_BLOCK&&void 0!==window.$VUEPRESS_DEMO_BLOCK[n]?window.$VUEPRESS_DEMO_BLOCK[n]:Os[n]},$s=function n(e,t,r){var o=document.createElement(e);return t&&Object.keys(t).forEach((function(n){if(n.indexOf("data"))o[n]=t[n];else{var e=n.replace("data","");o.dataset[e]=t[n]}})),r&&r.forEach((function(e){var t=e.tag,r=e.attrs,a=e.children;o.appendChild(n(t,r,a))})),o},qs=function(n,e,t){var r,o=(r=n.querySelectorAll(".".concat(e)),Array.prototype.slice.call(r));return 1!==o.length||t?o:o[0]},zs=function(n,e){var t,r,o=n.match(/<style>([\s\S]+)<\/style>/),a=n.match(/<template>([\s\S]+)<\/template>/),i=n.match(/<script>([\s\S]+)<\/script>/),s={css:o&&o[1].replace(/^\n|\n$/g,""),html:a&&a[1].replace(/^\n|\n$/g,""),js:i&&i[1].replace(/^\n|\n$/g,""),jsLib:e.jsLib||[],cssLib:e.cssLib||[]};s.htmlTpl=Is(s.html),s.jsTpl=(t=s.js,r=t.replace(/export\s+default\s*?\{\n*/,"").replace(/\n*\}\s*$/,"").trim(),"new Vue({\n  el: '#app',\n  ".concat(r,"\n})")),s.script=function(n,e){var t=n.split(/export\s+default/),r="(function() {".concat(t[0]," ; return ").concat(t[1],"})()"),o=window.Babel?window.Babel.transform(r,{presets:["es2015"]}).code:r,a=[eval][0](o);return a.template=e,a}(s.js,s.html);var c=Ps("vue");return s.jsLib.unshift(c),s},Bs=function(n,e){var t,r=n.match(/<style>([\s\S]+)<\/style>/),o=n.match(/<html>([\s\S]+)<\/html>/),a=n.match(/<script>([\s\S]+)<\/script>/),i={css:r&&r[1].replace(/^\n|\n$/g,""),html:o&&o[1].replace(/^\n|\n$/g,""),js:a&&a[1].replace(/^\n|\n$/g,""),jsLib:e.jsLib||[],cssLib:e.cssLib||[]};return i.htmlTpl=i.html,i.jsTpl=i.js,i.script=(t=i.js,window.Babel?window.Babel.transform(t,{presets:["es2015"]}).code:t),i},Rs=function(n){return n=n.replace("export default ","").replace(/App\.__style__(\s*)=(\s*)`([\s\S]*)?`/,""),n+='ReactDOM.render(React.createElement(App), document.getElementById("app"))'};function Ls(){var n=qs(document,"vuepress-plugin-demo-block__wrapper",!0);n.length?n.forEach((function(n){if("true"!==n.dataset.created){n.style.display="block";var e=qs(n,"vuepress-plugin-demo-block__code"),t=qs(n,"vuepress-plugin-demo-block__display"),r=qs(n,"vuepress-plugin-demo-block__footer"),o=qs(t,"vuepress-plugin-demo-block__app"),a=decodeURIComponent(n.dataset.code),i=decodeURIComponent(n.dataset.config),s=decodeURIComponent(n.dataset.type);i=i?JSON.parse(i):{};var c=e.querySelector("div").clientHeight,l="react"===s?function(n,e){var t=(0,window.Babel.transform)(n,{presets:["es2015","react"]}).code,r="(function(exports){var module={};module.exports=exports;".concat(t,";return module.exports.__esModule?module.exports.default:module.exports;})({})"),o=new Function("return ".concat(r))(),a={js:o,css:o.__style__||"",jsLib:e.jsLib||[],cssLib:e.cssLib||[],jsTpl:Rs(n),htmlTpl:Is("")},i=Ps("react"),s=Ps("reactDOM");return a.jsLib.unshift(i,s),a}(a,i):"vanilla"===s?Bs(a,i):zs(a,i),p=$s("button",{className:"".concat("vuepress-plugin-demo-block__expand")});if(r.appendChild(p),p.addEventListener("click",Ns.bind(null,p,c,e,r)),Ps("jsfiddle")&&r.appendChild(function(n){var e=n.css,t=n.htmlTpl,r=n.jsTpl,o=n.jsLib,a=n.cssLib,i=o.concat(a).concat(Ps("cssLib")).concat(Ps("jsLib")).join(",");return $s("form",{className:"vuepress-plugin-demo-block__jsfiddle",target:"_blank",action:"https://jsfiddle.net/api/post/library/pure/",method:"post"},[{tag:"input",attrs:{type:"hidden",name:"css",value:e}},{tag:"input",attrs:{type:"hidden",name:"html",value:t}},{tag:"input",attrs:{type:"hidden",name:"js",value:r}},{tag:"input",attrs:{type:"hidden",name:"panel_js",value:3}},{tag:"input",attrs:{type:"hidden",name:"wrap",value:1}},{tag:"input",attrs:{type:"hidden",name:"resources",value:i}},{tag:"button",attrs:{type:"submit",className:"vuepress-plugin-demo-block__button",innerHTML:'<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg t="1547088289967" class="icon" style="" viewBox="0 0 1170 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="1952" xmlns:xlink="http://www.w3.org/1999/xlink" width="228.515625" height="200"><defs><style type="text/css"></style></defs><path d="M1028.571429 441.142857q63.428571 26.285714 102.571428 83.142857T1170.285714 650.857143q0 93.714286-67.428571 160.285714T940 877.714286q-2.285714 0-6.571429-0.285715t-6-0.285714H232q-97.142857-5.714286-164.571429-71.714286T0 645.142857q0-62.857143 31.428571-116t84-84q-6.857143-22.285714-6.857142-46.857143 0-65.714286 46.857142-112t113.714286-46.285714q54.285714 0 98.285714 33.142857 42.857143-88 127.142858-141.714286t186.571428-53.714285q94.857143 0 174.857143 46T982.571429 248.571429t46.571428 172q0 3.428571-0.285714 10.285714t-0.285714 10.285714zM267.428571 593.142857q0 69.714286 48 110.285714t118.857143 40.571429q78.285714 0 137.142857-56.571429-9.142857-11.428571-27.142857-32.285714T519.428571 626.285714q-38.285714 37.142857-82.285714 37.142857-31.428571 0-53.428571-19.142857T361.714286 594.285714q0-30.285714 22-49.714285t52.285714-19.428572q25.142857 0 48.285714 12t41.714286 31.428572 37.142857 42.857142 39.428572 46.857143 44 42.857143 55.428571 31.428572 69.428571 12q69.142857 0 116.857143-40.857143T936 594.857143q0-69.142857-48-109.714286t-118.285714-40.571428q-81.714286 0-137.714286 55.428571l53.142857 61.714286q37.714286-36.571429 81.142857-36.571429 29.714286 0 52.571429 18.857143t22.857143 48q0 32.571429-21.142857 52.285714t-53.714286 19.714286q-24.571429 0-47.142857-12t-41.142857-31.428571-37.428572-42.857143-39.714286-46.857143-44.285714-42.857143-55.142857-31.428571T434.285714 444.571429q-69.714286 0-118.285714 40.285714T267.428571 593.142857z" p-id="1953"></path></svg>',datatip:"JSFiddle"}}])}(l)),Ps("codepen")&&r.appendChild(function(n){var e=n.css,t=n.htmlTpl,r=n.jsTpl,o=n.jsLib,a=n.cssLib,i=JSON.stringify({css:e,html:t,js:r,js_external:o.concat(Ps("jsLib")).join(";"),css_external:a.concat(Ps("cssLib")).join(";"),layout:Ps("codepenLayout"),js_pre_processor:Ps("codepenJsProcessor"),editors:Ps("codepenEditors")});return $s("form",{className:"vuepress-plugin-demo-block__codepen",target:"_blank",action:"https://codepen.io/pen/define",method:"post"},[{tag:"input",attrs:{type:"hidden",name:"data",value:i}},{tag:"button",attrs:{type:"submit",innerHTML:'<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg t="1547088271207" class="icon" style="" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="1737" xmlns:xlink="http://www.w3.org/1999/xlink" width="200" height="200"><defs><style type="text/css"></style></defs><path d="M123.428571 668l344.571429 229.714286v-205.142857L277.142857 565.142857z m-35.428571-82.285714l110.285714-73.714286-110.285714-73.714286v147.428572z m468 312l344.571429-229.714286-153.714286-102.857143-190.857143 127.428572v205.142857z m-44-281.714286l155.428571-104-155.428571-104-155.428571 104zM277.142857 458.857143l190.857143-127.428572V126.285714L123.428571 356z m548.571429 53.142857l110.285714 73.714286V438.285714z m-78.857143-53.142857l153.714286-102.857143-344.571429-229.714286v205.142857z m277.142857-102.857143v312q0 23.428571-19.428571 36.571429l-468 312q-12 7.428571-24.571429 7.428571t-24.571429-7.428571L19.428571 704.571429q-19.428571-13.142857-19.428571-36.571429V356q0-23.428571 19.428571-36.571429L487.428571 7.428571q12-7.428571 24.571429-7.428571t24.571429 7.428571l468 312q19.428571 13.142857 19.428571 36.571429z" p-id="1738"></path></svg>',className:"vuepress-plugin-demo-block__button",datatip:"Codepen"}}])}(l)),void 0!==i.horizontal?i.horizontal:Ps("horizontal")){n.classList.add("vuepress-plugin-demo-block__horizontal");var u=e.firstChild.cloneNode(!0);u.classList.add("vuepress-plugin-demo-block__h_code"),t.appendChild(u)}if(l.css&&function(n){if(!Cs[n]){var e=$s("style",{innerHTML:n});document.body.appendChild(e),Cs[n]=!0}}(l.css),"react"===s)ReactDOM.render(React.createElement(l.js),o);else if("vue"===s){var d=(new(Vue.extend(l.script))).$mount();o.appendChild(d.$el)}else"vanilla"===s&&(o.innerHTML=l.html,new Function("return (function(){".concat(l.script,"})()"))());n.dataset.created="true"}})):setTimeout((function(n){Ls()}),300)}function Ns(n,e,t,r){var o="1"!==n.dataset.isExpand;t.style.height=o?"".concat(e,"px"):0,o?r.classList.add("vuepress-plugin-demo-block__show-link"):r.classList.remove("vuepress-plugin-demo-block__show-link"),n.dataset.isExpand=o?"1":"0"}var Ms={mounted:function(){window.$VUEPRESS_DEMO_BLOCK={jsfiddle:!1,codepen:!0,horizontal:!1},Ls()},updated:function(){Ls()}},Ds="auto",Fs="zoom-in",Us="zoom-out",Hs="grab",Vs="move";function Gs(n,e,t){var r=!(arguments.length>3&&void 0!==arguments[3])||arguments[3],o={passive:!1};r?n.addEventListener(e,t,o):n.removeEventListener(e,t,o)}function Js(n,e){if(n){var t=new Image;t.onload=function(){e&&e(t)},t.src=n}}function Ws(n){return n.dataset.original?n.dataset.original:"A"===n.parentNode.tagName?n.parentNode.getAttribute("href"):null}function Ys(n,e,t){!function(n){var e=Xs,t=Zs;if(n.transition){var r=n.transition;delete n.transition,n[e]=r}if(n.transform){var o=n.transform;delete n.transform,n[t]=o}}(e);var r=n.style,o={};for(var a in e)t&&(o[a]=r[a]||""),r[a]=e[a];return o}var Xs="transition",Zs="transform",Qs="transform",Ks="transitionend";var nc=function(){},ec={enableGrab:!0,preloadImage:!1,closeOnWindowResize:!0,transitionDuration:.4,transitionTimingFunction:"cubic-bezier(0.4, 0, 0, 1)",bgColor:"rgb(255, 255, 255)",bgOpacity:1,scaleBase:1,scaleExtra:.5,scrollThreshold:40,zIndex:998,customSize:null,onOpen:nc,onClose:nc,onGrab:nc,onMove:nc,onRelease:nc,onBeforeOpen:nc,onBeforeClose:nc,onBeforeGrab:nc,onBeforeRelease:nc,onImageLoading:nc,onImageLoaded:nc},tc={init:function(n){var e,t;e=this,t=n,Object.getOwnPropertyNames(Object.getPrototypeOf(e)).forEach((function(n){e[n]=e[n].bind(t)}))},click:function(n){if(n.preventDefault(),oc(n))return window.open(this.target.srcOriginal||n.currentTarget.src,"_blank");this.shown?this.released?this.close():this.release():this.open(n.currentTarget)},scroll:function(){var n=document.documentElement||document.body.parentNode||document.body,e=window.pageXOffset||n.scrollLeft,t=window.pageYOffset||n.scrollTop;null===this.lastScrollPosition&&(this.lastScrollPosition={x:e,y:t});var r=this.lastScrollPosition.x-e,o=this.lastScrollPosition.y-t,a=this.options.scrollThreshold;(Math.abs(o)>=a||Math.abs(r)>=a)&&(this.lastScrollPosition=null,this.close())},keydown:function(n){(function(n){return"Escape"===(n.key||n.code)||27===n.keyCode})(n)&&(this.released?this.close():this.release(this.close))},mousedown:function(n){if(rc(n)&&!oc(n)){n.preventDefault();var e=n.clientX,t=n.clientY;this.pressTimer=setTimeout(function(){this.grab(e,t)}.bind(this),200)}},mousemove:function(n){this.released||this.move(n.clientX,n.clientY)},mouseup:function(n){rc(n)&&!oc(n)&&(clearTimeout(this.pressTimer),this.released?this.close():this.release())},touchstart:function(n){n.preventDefault();var e=n.touches[0],t=e.clientX,r=e.clientY;this.pressTimer=setTimeout(function(){this.grab(t,r)}.bind(this),200)},touchmove:function(n){if(!this.released){var e=n.touches[0],t=e.clientX,r=e.clientY;this.move(t,r)}},touchend:function(n){(function(n){n.targetTouches.length})(n)||(clearTimeout(this.pressTimer),this.released?this.close():this.release())},clickOverlay:function(){this.close()},resizeWindow:function(){this.close()}};function rc(n){return 0===n.button}function oc(n){return n.metaKey||n.ctrlKey}var ac={init:function(n){this.el=document.createElement("div"),this.instance=n,this.parent=document.body,Ys(this.el,{position:"fixed",top:0,left:0,right:0,bottom:0,opacity:0}),this.updateStyle(n.options),Gs(this.el,"click",n.handler.clickOverlay.bind(n))},updateStyle:function(n){Ys(this.el,{zIndex:n.zIndex,backgroundColor:n.bgColor,transition:"opacity\n        "+n.transitionDuration+"s\n        "+n.transitionTimingFunction})},insert:function(){this.parent.appendChild(this.el)},remove:function(){this.parent.removeChild(this.el)},fadeIn:function(){this.el.offsetWidth,this.el.style.opacity=this.instance.options.bgOpacity},fadeOut:function(){this.el.style.opacity=0}},ic="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&"function"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n},sc=function(){function n(n,e){for(var t=0;t<e.length;t++){var r=e[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(n,r.key,r)}}return function(e,t,r){return t&&n(e.prototype,t),r&&n(e,r),e}}(),cc=Object.assign||function(n){for(var e=1;e<arguments.length;e++){var t=arguments[e];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(n[r]=t[r])}return n},lc={init:function(n,e){this.el=n,this.instance=e,this.srcThumbnail=this.el.getAttribute("src"),this.srcset=this.el.getAttribute("srcset"),this.srcOriginal=Ws(this.el),this.rect=this.el.getBoundingClientRect(),this.translate=null,this.scale=null,this.styleOpen=null,this.styleClose=null},zoomIn:function(){var n=this.instance.options,e=n.zIndex,t=n.enableGrab,r=n.transitionDuration,o=n.transitionTimingFunction;this.translate=this.calculateTranslate(),this.scale=this.calculateScale(),this.styleOpen={position:"relative",zIndex:e+1,cursor:t?Hs:Us,transition:Qs+"\n        "+r+"s\n        "+o,transform:"translate3d("+this.translate.x+"px, "+this.translate.y+"px, 0px)\n        scale("+this.scale.x+","+this.scale.y+")",height:this.rect.height+"px",width:this.rect.width+"px"},this.el.offsetWidth,this.styleClose=Ys(this.el,this.styleOpen,!0)},zoomOut:function(){this.el.offsetWidth,Ys(this.el,{transform:"none"})},grab:function(n,e,t){var r=pc(),o=r.x-n,a=r.y-e;Ys(this.el,{cursor:Vs,transform:"translate3d(\n        "+(this.translate.x+o)+"px, "+(this.translate.y+a)+"px, 0px)\n        scale("+(this.scale.x+t)+","+(this.scale.y+t)+")"})},move:function(n,e,t){var r=pc(),o=r.x-n,a=r.y-e;Ys(this.el,{transition:Qs,transform:"translate3d(\n        "+(this.translate.x+o)+"px, "+(this.translate.y+a)+"px, 0px)\n        scale("+(this.scale.x+t)+","+(this.scale.y+t)+")"})},restoreCloseStyle:function(){Ys(this.el,this.styleClose)},restoreOpenStyle:function(){Ys(this.el,this.styleOpen)},upgradeSource:function(){if(this.srcOriginal){var n=this.el.parentNode;this.srcset&&this.el.removeAttribute("srcset");var e=this.el.cloneNode(!1);e.setAttribute("src",this.srcOriginal),e.style.position="fixed",e.style.visibility="hidden",n.appendChild(e),setTimeout(function(){this.el.setAttribute("src",this.srcOriginal),n.removeChild(e)}.bind(this),50)}},downgradeSource:function(){this.srcOriginal&&(this.srcset&&this.el.setAttribute("srcset",this.srcset),this.el.setAttribute("src",this.srcThumbnail))},calculateTranslate:function(){var n=pc(),e=this.rect.left+this.rect.width/2,t=this.rect.top+this.rect.height/2;return{x:n.x-e,y:n.y-t}},calculateScale:function(){var n=this.el.dataset,e=n.zoomingHeight,t=n.zoomingWidth,r=this.instance.options,o=r.customSize,a=r.scaleBase;if(!o&&e&&t)return{x:t/this.rect.width,y:e/this.rect.height};if(o&&"object"===(void 0===o?"undefined":ic(o)))return{x:o.width/this.rect.width,y:o.height/this.rect.height};var i=this.rect.width/2,s=this.rect.height/2,c=pc(),l={x:c.x-i,y:c.y-s},p=l.x/i,u=l.y/s,d=a+Math.min(p,u);if(o&&"string"==typeof o){var m=t||this.el.naturalWidth,f=e||this.el.naturalHeight,h=parseFloat(o)*m/(100*this.rect.width),g=parseFloat(o)*f/(100*this.rect.height);if(d>h||d>g)return{x:h,y:g}}return{x:d,y:d}}};function pc(){var n=document.documentElement;return{x:Math.min(n.clientWidth,window.innerWidth)/2,y:Math.min(n.clientHeight,window.innerHeight)/2}}function uc(n,e,t){["mousedown","mousemove","mouseup","touchstart","touchmove","touchend"].forEach((function(r){Gs(n,r,e[r],t)}))}var dc=function(){function n(e){!function(n,e){if(!(n instanceof e))throw new TypeError("Cannot call a class as a function")}(this,n),this.target=Object.create(lc),this.overlay=Object.create(ac),this.handler=Object.create(tc),this.body=document.body,this.shown=!1,this.lock=!1,this.released=!0,this.lastScrollPosition=null,this.pressTimer=null,this.options=cc({},ec,e),this.overlay.init(this),this.handler.init(this)}return sc(n,[{key:"listen",value:function(n){if("string"==typeof n)for(var e=document.querySelectorAll(n),t=e.length;t--;)this.listen(e[t]);else"IMG"===n.tagName&&(n.style.cursor=Fs,Gs(n,"click",this.handler.click),this.options.preloadImage&&Js(Ws(n)));return this}},{key:"config",value:function(n){return n?(cc(this.options,n),this.overlay.updateStyle(this.options),this):this.options}},{key:"open",value:function(n){var e=this,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.options.onOpen;if(!this.shown&&!this.lock){var r="string"==typeof n?document.querySelector(n):n;if("IMG"===r.tagName){if(this.options.onBeforeOpen(r),this.target.init(r,this),!this.options.preloadImage){var o=this.target.srcOriginal;null!=o&&(this.options.onImageLoading(r),Js(o,this.options.onImageLoaded))}this.shown=!0,this.lock=!0,this.target.zoomIn(),this.overlay.insert(),this.overlay.fadeIn(),Gs(document,"scroll",this.handler.scroll),Gs(document,"keydown",this.handler.keydown),this.options.closeOnWindowResize&&Gs(window,"resize",this.handler.resizeWindow);var a=function n(){Gs(r,Ks,n,!1),e.lock=!1,e.target.upgradeSource(),e.options.enableGrab&&uc(document,e.handler,!0),t(r)};return Gs(r,Ks,a),this}}}},{key:"close",value:function(){var n=this,e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.options.onClose;if(this.shown&&!this.lock){var t=this.target.el;this.options.onBeforeClose(t),this.lock=!0,this.body.style.cursor=Ds,this.overlay.fadeOut(),this.target.zoomOut(),Gs(document,"scroll",this.handler.scroll,!1),Gs(document,"keydown",this.handler.keydown,!1),this.options.closeOnWindowResize&&Gs(window,"resize",this.handler.resizeWindow,!1);var r=function r(){Gs(t,Ks,r,!1),n.shown=!1,n.lock=!1,n.target.downgradeSource(),n.options.enableGrab&&uc(document,n.handler,!1),n.target.restoreCloseStyle(),n.overlay.remove(),e(t)};return Gs(t,Ks,r),this}}},{key:"grab",value:function(n,e){var t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:this.options.scaleExtra,r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:this.options.onGrab;if(this.shown&&!this.lock){var o=this.target.el;this.options.onBeforeGrab(o),this.released=!1,this.target.grab(n,e,t);var a=function n(){Gs(o,Ks,n,!1),r(o)};return Gs(o,Ks,a),this}}},{key:"move",value:function(n,e){var t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:this.options.scaleExtra,r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:this.options.onMove;if(this.shown&&!this.lock){this.released=!1,this.body.style.cursor=Vs,this.target.move(n,e,t);var o=this.target.el,a=function n(){Gs(o,Ks,n,!1),r(o)};return Gs(o,Ks,a),this}}},{key:"release",value:function(){var n=this,e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.options.onRelease;if(this.shown&&!this.lock){var t=this.target.el;this.options.onBeforeRelease(t),this.lock=!0,this.body.style.cursor=Ds,this.target.restoreOpenStyle();var r=function r(){Gs(t,Ks,r,!1),n.lock=!1,n.released=!0,e(t)};return Gs(t,Ks,r),this}}}]),n}();const mc=JSON.parse('{"bgColor":"rgba(0,0,0,0.6)"}'),fc=Number("500");class hc{constructor(){this.instance=new dc(mc)}update(n=".theme-vdoing-content img:not(.no-zoom)"){"undefined"!=typeof window&&this.instance.listen(n)}updateDelay(n=".theme-vdoing-content img:not(.no-zoom)",e=fc){setTimeout(()=>this.update(n),e)}}var gc=[vs,ks,js,As,Ms,{watch:{"$page.path"(){void 0!==this.$vuepress.zooming&&this.$vuepress.zooming.updateDelay()}},mounted(){this.$vuepress.zooming=new hc,this.$vuepress.zooming.updateDelay()}}],vc={name:"GlobalLayout",computed:{layout(){const n=this.getLayout();return ds("layout",n),Jt.component(n)}},methods:{getLayout(){if(this.$page.path){const n=this.$page.frontmatter.layout;return n&&(this.$vuepress.getLayoutAsyncComponent(n)||this.$vuepress.getVueComponent(n))?n:"Layout"}return"NotFound"}}},bc=t(8),yc=Object(bc.a)(vc,(function(){return(0,this._self._c)(this.layout,{tag:"component"})}),[],!1,null,null,null).exports;!function(n,e,t){switch(e){case"components":n[e]||(n[e]={}),Object.assign(n[e],t);break;case"mixins":n[e]||(n[e]=[]),n[e].push(...t);break;default:throw new Error("Unknown option name.")}}(yc,"mixins",gc);const xc=[{name:"v-410ad6d6",path:"/pages/f25df1/",component:yc,beforeEnter:(n,e,t)=>{us("Layout","v-410ad6d6").then(t)}},{path:"/pages/f25df1/index.html",redirect:"/pages/f25df1/"},{path:"/01.linux/01.linux安装/01.下载与安装.html",redirect:"/pages/f25df1/"},{name:"v-506dde02",path:"/pages/e3e055/",component:yc,beforeEnter:(n,e,t)=>{us("Layout","v-506dde02").then(t)}},{path:"/pages/e3e055/index.html",redirect:"/pages/e3e055/"},{path:"/01.linux/01.linux安装/02.修改ip.html",redirect:"/pages/e3e055/"},{name:"v-6924a398",path:"/pages/a00a23/",component:yc,beforeEnter:(n,e,t)=>{us("Layout","v-6924a398").then(t)}},{path:"/pages/a00a23/index.html",redirect:"/pages/a00a23/"},{path:"/01.linux/01.linux安装/03.开放端口.html",redirect:"/pages/a00a23/"},{name:"v-146a0386",path:"/pages/8efd89/",component:yc,beforeEnter:(n,e,t)=>{us("Layout","v-146a0386").then(t)}},{path:"/pages/8efd89/index.html",redirect:"/pages/8efd89/"},{path:"/01.linux/02.linux使用/02.目录.html",redirect:"/pages/8efd89/"},{name:"v-61cd19e7",path:"/pages/949754/",component:yc,beforeEnter:(n,e,t)=>{us("Layout","v-61cd19e7").then(t)}},{path:"/pages/949754/index.html",redirect:"/pages/949754/"},{path:"/01.linux/02.linux使用/01.linux使用.html",redirect:"/pages/949754/"},{name:"v-6d09a66b",path:"/pages/6f7a06/",component:yc,beforeEnter:(n,e,t)=>{us("Layout","v-6d09a66b").then(t)}},{path:"/pages/6f7a06/index.html",redirect:"/pages/6f7a06/"},{path:"/01.linux/02.linux使用/03.查看磁盘空间cpu和内存情况.html",redirect:"/pages/6f7a06/"},{name:"v-4ad90504",path:"/pages/974661/",component:yc,beforeEnter:(n,e,t)=>{us("Layout","v-4ad90504").then(t)}},{path:"/pages/974661/index.html",redirect:"/pages/974661/"},{path:"/01.linux/02.linux使用/05.java安装.html",redirect:"/pages/974661/"},{name:"v-39cba1eb",path:"/pages/bd4244/",component:yc,beforeEnter:(n,e,t)=>{us("Layout","v-39cba1eb").then(t)}},{path:"/pages/bd4244/index.html",redirect:"/pages/bd4244/"},{path:"/01.linux/02.linux使用/04.往文件内写数据.html",redirect:"/pages/bd4244/"},{name:"v-ee33d822",path:"/pages/ee5e94/",component:yc,beforeEnter:(n,e,t)=>{us("Layout","v-ee33d822").then(t)}},{path:"/pages/ee5e94/index.html",redirect:"/pages/ee5e94/"},{path:"/01.linux/02.linux使用/06.shell脚本.html",redirect:"/pages/ee5e94/"},{name:"v-53e17527",path:"/pages/7a89d1/",component:yc,beforeEnter:(n,e,t)=>{us("Layout","v-53e17527").then(t)}},{path:"/pages/7a89d1/index.html",redirect:"/pages/7a89d1/"},{path:"/01.linux/02.linux使用/07.shell脚本dome.html",redirect:"/pages/7a89d1/"},{name:"v-2a3585a3",path:"/pages/e29cdb/",component:yc,beforeEnter:(n,e,t)=>{us("Layout","v-2a3585a3").then(t)}},{path:"/pages/e29cdb/index.html",redirect:"/pages/e29cdb/"},{path:"/02.docker/01.安装/01.docker安装.html",redirect:"/pages/e29cdb/"},{name:"v-d8969a0a",path:"/pages/813dae/",component:yc,beforeEnter:(n,e,t)=>{us("Layout","v-d8969a0a").then(t)}},{path:"/pages/813dae/index.html",redirect:"/pages/813dae/"},{path:"/02.docker/01.安装/02.docker自动清理日志.html",redirect:"/pages/813dae/"},{name:"v-47e66a74",path:"/pages/53bb04/",component:yc,beforeEnter:(n,e,t)=>{us("Layout","v-47e66a74").then(t)}},{path:"/pages/53bb04/index.html",redirect:"/pages/53bb04/"},{path:"/02.docker/02.命令/02.run命令详解.html",redirect:"/pages/53bb04/"},{name:"v-77125a1f",path:"/pages/918bcc/",component:yc,beforeEnter:(n,e,t)=>{us("Layout","v-77125a1f").then(t)}},{path:"/pages/918bcc/index.html",redirect:"/pages/918bcc/"},{path:"/02.docker/02.命令/03.docker容器开机自动启动.html",redirect:"/pages/918bcc/"},{name:"v-95f7aaaa",path:"/pages/2d8481/",component:yc,beforeEnter:(n,e,t)=>{us("Layout","v-95f7aaaa").then(t)}},{path:"/pages/2d8481/index.html",redirect:"/pages/2d8481/"},{path:"/02.docker/02.命令/01.docker命令.html",redirect:"/pages/2d8481/"},{name:"v-c4a888e6",path:"/pages/bb988d/",component:yc,beforeEnter:(n,e,t)=>{us("Layout","v-c4a888e6").then(t)}},{path:"/pages/bb988d/index.html",redirect:"/pages/bb988d/"},{path:"/02.docker/03.dockerfile/01.dockerfile.html",redirect:"/pages/bb988d/"},{name:"v-60ad81ab",path:"/pages/5ad05b/",component:yc,beforeEnter:(n,e,t)=>{us("Layout","v-60ad81ab").then(t)}},{path:"/pages/5ad05b/index.html",redirect:"/pages/5ad05b/"},{path:"/02.docker/04.常用软件安装/01.安装nginx.html",redirect:"/pages/5ad05b/"},{name:"v-4bd643ff",path:"/pages/140d94/",component:yc,beforeEnter:(n,e,t)=>{us("Layout","v-4bd643ff").then(t)}},{path:"/pages/140d94/index.html",redirect:"/pages/140d94/"},{path:"/02.docker/03.dockerfile/02.Dockerfile构建Java程序.html",redirect:"/pages/140d94/"},{name:"v-c2802dce",path:"/pages/a5f378/",component:yc,beforeEnter:(n,e,t)=>{us("Layout","v-c2802dce").then(t)}},{path:"/pages/a5f378/index.html",redirect:"/pages/a5f378/"},{path:"/02.docker/04.常用软件安装/02.安装mysql.html",redirect:"/pages/a5f378/"},{name:"v-6a32665f",path:"/pages/e2502e/",component:yc,beforeEnter:(n,e,t)=>{us("Layout","v-6a32665f").then(t)}},{path:"/pages/e2502e/index.html",redirect:"/pages/e2502e/"},{path:"/02.docker/04.常用软件安装/04.安装elasticsearch.html",redirect:"/pages/e2502e/"},{name:"v-60d673cf",path:"/pages/ce054c/",component:yc,beforeEnter:(n,e,t)=>{us("Layout","v-60d673cf").then(t)}},{path:"/pages/ce054c/index.html",redirect:"/pages/ce054c/"},{path:"/02.docker/04.常用软件安装/05.安装rabbitmq.html",redirect:"/pages/ce054c/"},{name:"v-c214eb36",path:"/pages/487fe4/",component:yc,beforeEnter:(n,e,t)=>{us("Layout","v-c214eb36").then(t)}},{path:"/pages/487fe4/index.html",redirect:"/pages/487fe4/"},{path:"/02.docker/04.常用软件安装/03.安装redis.html",redirect:"/pages/487fe4/"},{name:"v-677903a2",path:"/pages/615d3b/",component:yc,beforeEnter:(n,e,t)=>{us("Layout","v-677903a2").then(t)}},{path:"/pages/615d3b/index.html",redirect:"/pages/615d3b/"},{path:"/02.docker/04.常用软件安装/06.安装RocketMQ.html",redirect:"/pages/615d3b/"},{name:"v-03ee28ba",path:"/pages/b740a1/",component:yc,beforeEnter:(n,e,t)=>{us("Layout","v-03ee28ba").then(t)}},{path:"/pages/b740a1/index.html",redirect:"/pages/b740a1/"},{path:"/03.util/01.git/01.git文档.html",redirect:"/pages/b740a1/"},{name:"v-1f734aeb",path:"/pages/5a835a/",component:yc,beforeEnter:(n,e,t)=>{us("Layout","v-1f734aeb").then(t)}},{path:"/pages/5a835a/index.html",redirect:"/pages/5a835a/"},{path:"/02.docker/04.常用软件安装/07.安装nacos.html",redirect:"/pages/5a835a/"},{name:"v-747f3d61",path:"/pages/36e470/",component:yc,beforeEnter:(n,e,t)=>{us("Layout","v-747f3d61").then(t)}},{path:"/pages/36e470/index.html",redirect:"/pages/36e470/"},{path:"/03.util/02.idea/03.idea连接mysql.html",redirect:"/pages/36e470/"},{name:"v-6eeef438",path:"/pages/f993f7/",component:yc,beforeEnter:(n,e,t)=>{us("Layout","v-6eeef438").then(t)}},{path:"/pages/f993f7/index.html",redirect:"/pages/f993f7/"},{path:"/03.util/02.idea/02.idea没有servise窗口解决办法.html",redirect:"/pages/f993f7/"},{name:"v-48df9765",path:"/pages/638375/",component:yc,beforeEnter:(n,e,t)=>{us("Layout","v-48df9765").then(t)}},{path:"/pages/638375/index.html",redirect:"/pages/638375/"},{path:"/04.db/01.mysql/01.MySQL下载和安装.html",redirect:"/pages/638375/"},{name:"v-29f4206e",path:"/pages/e6306e/",component:yc,beforeEnter:(n,e,t)=>{us("Layout","v-29f4206e").then(t)}},{path:"/pages/e6306e/index.html",redirect:"/pages/e6306e/"},{path:"/03.util/02.idea/01.idea快捷键.html",redirect:"/pages/e6306e/"},{name:"v-8faaed78",path:"/pages/d00bbc/",component:yc,beforeEnter:(n,e,t)=>{us("Layout","v-8faaed78").then(t)}},{path:"/pages/d00bbc/index.html",redirect:"/pages/d00bbc/"},{path:"/04.db/01.mysql/02.mysql数据类型.html",redirect:"/pages/d00bbc/"},{name:"v-7658d99d",path:"/pages/25cd5e/",component:yc,beforeEnter:(n,e,t)=>{us("Layout","v-7658d99d").then(t)}},{path:"/pages/25cd5e/index.html",redirect:"/pages/25cd5e/"},{path:"/04.db/01.mysql/03.mysql表操作.html",redirect:"/pages/25cd5e/"},{name:"v-b3a54f2a",path:"/pages/91a56f/",component:yc,beforeEnter:(n,e,t)=>{us("Layout","v-b3a54f2a").then(t)}},{path:"/pages/91a56f/index.html",redirect:"/pages/91a56f/"},{path:"/04.db/01.mysql/04.mysql添加索引.html",redirect:"/pages/91a56f/"},{name:"v-a4f5841a",path:"/pages/4e3826/",component:yc,beforeEnter:(n,e,t)=>{us("Layout","v-a4f5841a").then(t)}},{path:"/pages/4e3826/index.html",redirect:"/pages/4e3826/"},{path:"/04.db/01.mysql/06.视图函数存储过程.html",redirect:"/pages/4e3826/"},{name:"v-76e23ba6",path:"/pages/7119b3/",component:yc,beforeEnter:(n,e,t)=>{us("Layout","v-76e23ba6").then(t)}},{path:"/pages/7119b3/index.html",redirect:"/pages/7119b3/"},{path:"/04.db/01.mysql/05.mysql查询语句执行顺序.html",redirect:"/pages/7119b3/"},{name:"v-033068e6",path:"/pages/ad55d0/",component:yc,beforeEnter:(n,e,t)=>{us("Layout","v-033068e6").then(t)}},{path:"/pages/ad55d0/index.html",redirect:"/pages/ad55d0/"},{path:"/05.java工具/01.lombok/01.lombok.html",redirect:"/pages/ad55d0/"},{name:"v-5ab7a8b6",path:"/pages/f9c7e0/",component:yc,beforeEnter:(n,e,t)=>{us("Layout","v-5ab7a8b6").then(t)}},{path:"/pages/f9c7e0/index.html",redirect:"/pages/f9c7e0/"},{path:"/04.db/01.mysql/07.脏读幻读可重复读.html",redirect:"/pages/f9c7e0/"},{name:"v-50fbb838",path:"/pages/fd9178/",component:yc,beforeEnter:(n,e,t)=>{us("Layout","v-50fbb838").then(t)}},{path:"/pages/fd9178/index.html",redirect:"/pages/fd9178/"},{path:"/04.db/01.mysql/08.mysql特殊数据处理.html",redirect:"/pages/fd9178/"},{name:"v-44f2eec0",path:"/pages/7e52b3/",component:yc,beforeEnter:(n,e,t)=>{us("Layout","v-44f2eec0").then(t)}},{path:"/pages/7e52b3/index.html",redirect:"/pages/7e52b3/"},{path:"/05.java工具/02.mapstruct/01.mapstruct.html",redirect:"/pages/7e52b3/"},{name:"v-5d5a30a0",path:"/pages/009a23/",component:yc,beforeEnter:(n,e,t)=>{us("Layout","v-5d5a30a0").then(t)}},{path:"/pages/009a23/index.html",redirect:"/pages/009a23/"},{path:"/05.java工具/02.mapstruct/02.mapstruct无法获取lombok生成的get和set方法.html",redirect:"/pages/009a23/"},{name:"v-9067353e",path:"/pages/3eb2d0/",component:yc,beforeEnter:(n,e,t)=>{us("Layout","v-9067353e").then(t)}},{path:"/pages/3eb2d0/index.html",redirect:"/pages/3eb2d0/"},{path:"/06.spring/09.spring应用/01.aop应用.html",redirect:"/pages/3eb2d0/"},{name:"v-56d56947",path:"/pages/64a6f5/",component:yc,beforeEnter:(n,e,t)=>{us("Layout","v-56d56947").then(t)}},{path:"/pages/64a6f5/index.html",redirect:"/pages/64a6f5/"},{path:"/06.spring/09.spring应用/06.网关gateway.html",redirect:"/pages/64a6f5/"},{name:"v-366ac91b",path:"/pages/34dc29/",component:yc,beforeEnter:(n,e,t)=>{us("Layout","v-366ac91b").then(t)}},{path:"/pages/34dc29/index.html",redirect:"/pages/34dc29/"},{path:"/06.spring/08.Springboot启动扩展点超详细总结/01.Springboot启动扩展点超详细总结.html",redirect:"/pages/34dc29/"},{name:"v-77e443c8",path:"/pages/ab1f38/",component:yc,beforeEnter:(n,e,t)=>{us("Layout","v-77e443c8").then(t)}},{path:"/pages/ab1f38/index.html",redirect:"/pages/ab1f38/"},{path:"/06.spring/09.spring应用/08.获取当前类的代理对象.html",redirect:"/pages/ab1f38/"},{name:"v-32a7bf17",path:"/pages/0e930c/",component:yc,beforeEnter:(n,e,t)=>{us("Layout","v-32a7bf17").then(t)}},{path:"/pages/0e930c/index.html",redirect:"/pages/0e930c/"},{path:"/06.spring/09.spring应用/07.SpringSecurity中跨域配置.html",redirect:"/pages/0e930c/"},{name:"v-4b1a12f8",path:"/pages/0ea346/",component:yc,beforeEnter:(n,e,t)=>{us("Layout","v-4b1a12f8").then(t)}},{path:"/pages/0ea346/index.html",redirect:"/pages/0ea346/"},{path:"/06.spring/09.spring应用/09.自定义SpringBootStarter.html",redirect:"/pages/0ea346/"},{name:"v-5cb574ec",path:"/pages/61f88f/",component:yc,beforeEnter:(n,e,t)=>{us("Layout","v-5cb574ec").then(t)}},{path:"/pages/61f88f/index.html",redirect:"/pages/61f88f/"},{path:"/07.nginx/01.nginx/02.nginx配置详情.html",redirect:"/pages/61f88f/"},{name:"v-5abd2300",path:"/pages/ce5255/",component:yc,beforeEnter:(n,e,t)=>{us("Layout","v-5abd2300").then(t)}},{path:"/pages/ce5255/index.html",redirect:"/pages/ce5255/"},{path:"/07.nginx/01.nginx/01.nginx安装.html",redirect:"/pages/ce5255/"},{name:"v-5438e202",path:"/pages/ad2c6a/",component:yc,beforeEnter:(n,e,t)=>{us("Layout","v-5438e202").then(t)}},{path:"/pages/ad2c6a/index.html",redirect:"/pages/ad2c6a/"},{path:"/07.nginx/01.nginx/03.nginx配置清单.html",redirect:"/pages/ad2c6a/"},{name:"v-2d87f8c3",path:"/pages/5de167/",component:yc,beforeEnter:(n,e,t)=>{us("Layout","v-2d87f8c3").then(t)}},{path:"/pages/5de167/index.html",redirect:"/pages/5de167/"},{path:"/07.nginx/01.nginx/04.反向代理配置.html",redirect:"/pages/5de167/"},{name:"v-767608dd",path:"/pages/3a71f1/",component:yc,beforeEnter:(n,e,t)=>{us("Layout","v-767608dd").then(t)}},{path:"/pages/3a71f1/index.html",redirect:"/pages/3a71f1/"},{path:"/07.nginx/01.nginx/05.root和alias的区别.html",redirect:"/pages/3a71f1/"},{name:"v-65d3be39",path:"/pages/788324/",component:yc,beforeEnter:(n,e,t)=>{us("Layout","v-65d3be39").then(t)}},{path:"/pages/788324/index.html",redirect:"/pages/788324/"},{path:"/07.nginx/01.nginx/06.nginx拿到真实域名和ip.html",redirect:"/pages/788324/"},{name:"v-f38b20e2",path:"/pages/807961/",component:yc,beforeEnter:(n,e,t)=>{us("Layout","v-f38b20e2").then(t)}},{path:"/pages/807961/index.html",redirect:"/pages/807961/"},{path:"/08.java/04.util/03.mapstruct无法获取lombok生成的get和set方法.html",redirect:"/pages/807961/"},{name:"v-1ad6532d",path:"/pages/ef0371/",component:yc,beforeEnter:(n,e,t)=>{us("Layout","v-1ad6532d").then(t)}},{path:"/pages/ef0371/index.html",redirect:"/pages/ef0371/"},{path:"/08.java/04.util/01.lombok.html",redirect:"/pages/ef0371/"},{name:"v-cf2a59ca",path:"/pages/b3cd0d/",component:yc,beforeEnter:(n,e,t)=>{us("Layout","v-cf2a59ca").then(t)}},{path:"/pages/b3cd0d/index.html",redirect:"/pages/b3cd0d/"},{path:"/08.java/04.util/02.mapstruct.html",redirect:"/pages/b3cd0d/"},{name:"v-eafc6aca",path:"/pages/be7ac1/",component:yc,beforeEnter:(n,e,t)=>{us("Layout","v-eafc6aca").then(t)}},{path:"/pages/be7ac1/index.html",redirect:"/pages/be7ac1/"},{path:"/08.java/04.util/04.okhttp3.html",redirect:"/pages/be7ac1/"},{name:"v-0cc3d734",path:"/blog/",component:yc,beforeEnter:(n,e,t)=>{us("Layout","v-0cc3d734").then(t)}},{path:"/blog/index.html",redirect:"/blog/"},{path:"/@pages/archivesPage.html",redirect:"/blog/"},{name:"v-69114fa0",path:"/",component:yc,beforeEnter:(n,e,t)=>{us("Layout","v-69114fa0").then(t)}},{path:"/index.html",redirect:"/"},{name:"v-51d5b4ef",path:"/pages/04cd7d/",component:yc,beforeEnter:(n,e,t)=>{us("Layout","v-51d5b4ef").then(t)}},{path:"/pages/04cd7d/index.html",redirect:"/pages/04cd7d/"},{path:"/07.nginx/01.nginx/07.nginx请求超时问题.html",redirect:"/pages/04cd7d/"},{path:"*",component:yc}],_c={title:"vuepress-theme-vdoing",description:"一个基于VuePress的 知识管理&博客 主题",base:"/expect-doc-page",headTags:[["link",{rel:"icon",href:"/expect-doc-pageimg/favicon.ico"}],["meta",{name:"keywords",content:"vuepress,theme,blog,vdoing"}],["meta",{name:"theme-color",content:"#11a8cd"}],["meta",{name:"wwads-cn-verify",content:"6c4b761a28b734fe93831e3fb400ce87"}],["script",{src:"https://cdn.wwads.cn/js/makemoney.js",type:"text/javascript"}]],pages:[{title:"下载与安装",frontmatter:{title:"下载与安装",date:"2024-04-16T17:23:33.000Z",permalink:"/pages/f25df1/"},regularPath:"/01.linux/01.linux%E5%AE%89%E8%A3%85/01.%E4%B8%8B%E8%BD%BD%E4%B8%8E%E5%AE%89%E8%A3%85.html",relativePath:"01.linux/01.linux安装/01.下载与安装.md",key:"v-410ad6d6",path:"/pages/f25df1/",headers:[{level:2,title:"centos7几种版本x86_64、aarch64、armhfp、i386、power9、ppc64、ppc64el简单说明",slug:"centos7几种版本x86-64、aarch64、armhfp、i386、power9、ppc64、ppc64el简单说明",normalizedTitle:"centos7几种版本x86_64、aarch64、armhfp、i386、power9、ppc64、ppc64el简单说明",charIndex:17},{level:2,title:"CentOS LiveCD、LiveDVD、BinDVD、netinstall、minimal版区别在哪里",slug:"centos-livecd、livedvd、bindvd、netinstall、minimal版区别在哪里",normalizedTitle:"centos livecd、livedvd、bindvd、netinstall、minimal版区别在哪里",charIndex:1391},{level:4,title:"使用x86_64就行了",slug:"使用x86-64就行了",normalizedTitle:"使用x86_64就行了",charIndex:1748}],headersStr:"centos7几种版本x86_64、aarch64、armhfp、i386、power9、ppc64、ppc64el简单说明 CentOS LiveCD、LiveDVD、BinDVD、netinstall、minimal版区别在哪里 使用x86_64就行了",content:"# 1.centos官网\n\n\n# centos7几种版本x86_64、aarch64、armhfp、i386、power9、ppc64、ppc64el简单说明\n\n一直用的x86_64的系统，今天去找一个ARM架构的centos，看到这么多版本，一脸懵逼，通过sc大概总结了一点说明，请参考：\n\n以centos7的iso下载位链接http://isoredirect.centos.org/centos/7/isos/\n\nURL                                                     IMAGES\nhttp://isoredirect.centos.org/centos/7/isos/x86_64/     for CentOS 7 x86_64 iso images\nhttp://isoredirect.centos.org/altarch/7/isos/aarch64/   for CentOS 7 AltArch AArch64 iso images\nhttp://isoredirect.centos.org/altarch/7/isos/armhfp/    for CentOS 7 AltArch armhfp disk images\nhttp://isoredirect.centos.org/altarch/7/isos/i386/      for CentOS 7 AltArch i386 iso images\nhttp://isoredirect.centos.org/altarch/7/isos/power9/    for CentOS 7 AltArch POWER9 iso images\nhttp://isoredirect.centos.org/altarch/7/isos/ppc64/     for CentOS 7 AltArch ppc64 iso images\nhttp://isoredirect.centos.org/altarch/7/isos/ppc64le/   for CentOS 7 AltArch ppc64le iso images\n\nx86_64 我们常说的主流的64位架构，代表厂家有Intel、AMD\n\naltarch 个人理解我其他架构，除了x86_64以外的其他CPU架构，centos把支持的每个版本单独拎出来，这样看起来一个很庞大的系列：\n\naarch64 就是arm架构的64位系统，基于armv8指令集的64位架构，应该是后续ARM主流商用服务器的标准\n\narmhfp 主要是对armv7hl兼容，支持基于arm的一系列单板计算机和嵌入式设备\n\ni386 就是已经即将被淘汰的x86的以奔腾系列位代表的32位架构\n\n后面3种都是IMb的power系列：\n\npower9 对应IBM的power9架构cpu\n\nppc64 IBM power系列架构，目标架构为64位PowerPC和Power Architecture处理器，并对此优化的应用程序的标识符，编译源代码时经常使用\n\nppc64el 纯小端模式，POWER8作为首要目标，OpenPower基金会基础的技术，试图使基于x86的Linux软件的移植工作以最小的工作量进行\n\n\n# CentOS LiveCD、LiveDVD、BinDVD、netinstall、minimal版区别在哪里\n\nBinDVD版——就是普通安装版，需安装到计算机硬盘才能用，bin一般都比较大，而且包含大量的常用软件，安装时无需再在线下载（大部分情况）。\n\nminimal版——这个镜像文件用于安装一个非常基本的 CentOS系统,包含了一些基本所需的最小安装包。\n\nnetinstall版——用于网络安装和系统救援的镜像文件。\n\nLiveDVD版——就是一个光盘CentOS系统，可通过光盘启动电脑，启动出CentOS系统，也有图形界面，也有终端。也可以安装到计算机，但是有些内容可能还需要再次到网站下载（自动）。 LiveCD版——相比LiveDVD是个精简的光盘CentOS系统。体积更小，便于维护使用。\n\n# 使用x86_64就行了\n\n阿里云镜像地址\n\nhttp://mirrors.aliyun.com/centos/7.9.2009/isos/x86_64/\n",normalizedContent:"# 1.centos官网\n\n\n# centos7几种版本x86_64、aarch64、armhfp、i386、power9、ppc64、ppc64el简单说明\n\n一直用的x86_64的系统，今天去找一个arm架构的centos，看到这么多版本，一脸懵逼，通过sc大概总结了一点说明，请参考：\n\n以centos7的iso下载位链接http://isoredirect.centos.org/centos/7/isos/\n\nurl                                                     images\nhttp://isoredirect.centos.org/centos/7/isos/x86_64/     for centos 7 x86_64 iso images\nhttp://isoredirect.centos.org/altarch/7/isos/aarch64/   for centos 7 altarch aarch64 iso images\nhttp://isoredirect.centos.org/altarch/7/isos/armhfp/    for centos 7 altarch armhfp disk images\nhttp://isoredirect.centos.org/altarch/7/isos/i386/      for centos 7 altarch i386 iso images\nhttp://isoredirect.centos.org/altarch/7/isos/power9/    for centos 7 altarch power9 iso images\nhttp://isoredirect.centos.org/altarch/7/isos/ppc64/     for centos 7 altarch ppc64 iso images\nhttp://isoredirect.centos.org/altarch/7/isos/ppc64le/   for centos 7 altarch ppc64le iso images\n\nx86_64 我们常说的主流的64位架构，代表厂家有intel、amd\n\naltarch 个人理解我其他架构，除了x86_64以外的其他cpu架构，centos把支持的每个版本单独拎出来，这样看起来一个很庞大的系列：\n\naarch64 就是arm架构的64位系统，基于armv8指令集的64位架构，应该是后续arm主流商用服务器的标准\n\narmhfp 主要是对armv7hl兼容，支持基于arm的一系列单板计算机和嵌入式设备\n\ni386 就是已经即将被淘汰的x86的以奔腾系列位代表的32位架构\n\n后面3种都是imb的power系列：\n\npower9 对应ibm的power9架构cpu\n\nppc64 ibm power系列架构，目标架构为64位powerpc和power architecture处理器，并对此优化的应用程序的标识符，编译源代码时经常使用\n\nppc64el 纯小端模式，power8作为首要目标，openpower基金会基础的技术，试图使基于x86的linux软件的移植工作以最小的工作量进行\n\n\n# centos livecd、livedvd、bindvd、netinstall、minimal版区别在哪里\n\nbindvd版——就是普通安装版，需安装到计算机硬盘才能用，bin一般都比较大，而且包含大量的常用软件，安装时无需再在线下载（大部分情况）。\n\nminimal版——这个镜像文件用于安装一个非常基本的 centos系统,包含了一些基本所需的最小安装包。\n\nnetinstall版——用于网络安装和系统救援的镜像文件。\n\nlivedvd版——就是一个光盘centos系统，可通过光盘启动电脑，启动出centos系统，也有图形界面，也有终端。也可以安装到计算机，但是有些内容可能还需要再次到网站下载（自动）。 livecd版——相比livedvd是个精简的光盘centos系统。体积更小，便于维护使用。\n\n# 使用x86_64就行了\n\n阿里云镜像地址\n\nhttp://mirrors.aliyun.com/centos/7.9.2009/isos/x86_64/\n",charsets:{cjk:!0},lastUpdated:"2024/04/29, 11:14:33",lastUpdatedTimestamp:1714360473e3},{title:"修改ip",frontmatter:{title:"修改ip",date:"2024-04-16T17:35:49.000Z",permalink:"/pages/e3e055/"},regularPath:"/01.linux/01.linux%E5%AE%89%E8%A3%85/02.%E4%BF%AE%E6%94%B9ip.html",relativePath:"01.linux/01.linux安装/02.修改ip.md",key:"v-506dde02",path:"/pages/e3e055/",headersStr:null,content:"vi /etc/sysconfig/network-scripts/ifcfg-ens33\n\n\nTYPE=Ethernet\nPROXY_METHOD=none\nBROWSER_ONLY=no\nBOOTPROTO=static\nDEFROUTE=yes\nIPV4_FAILURE_FATAL=no\nNAME=ens33\nUUID=12037371-f4f9-42fc-8fce-90e429330d0c\nDEVICE=ens33\nONBOOT=yes\nIPADDR=192.168.48.12\nNETMASK=255.255.255.0\nGATEWAY=192.168.48.2\nDNS1=114.114.114.114\nDNS2=8.8.8.8\n\n\n\n重启网络服务\n\nsystemctl restart network\n",normalizedContent:"vi /etc/sysconfig/network-scripts/ifcfg-ens33\n\n\ntype=ethernet\nproxy_method=none\nbrowser_only=no\nbootproto=static\ndefroute=yes\nipv4_failure_fatal=no\nname=ens33\nuuid=12037371-f4f9-42fc-8fce-90e429330d0c\ndevice=ens33\nonboot=yes\nipaddr=192.168.48.12\nnetmask=255.255.255.0\ngateway=192.168.48.2\ndns1=114.114.114.114\ndns2=8.8.8.8\n\n\n\n重启网络服务\n\nsystemctl restart network\n",charsets:{cjk:!0},lastUpdated:"2024/04/29, 11:14:33",lastUpdatedTimestamp:1714360473e3},{title:"开放端口",frontmatter:{title:"开放端口",date:"2024-04-16T17:35:49.000Z",permalink:"/pages/a00a23/"},regularPath:"/01.linux/01.linux%E5%AE%89%E8%A3%85/03.%E5%BC%80%E6%94%BE%E7%AB%AF%E5%8F%A3.html",relativePath:"01.linux/01.linux安装/03.开放端口.md",key:"v-6924a398",path:"/pages/a00a23/",headers:[{level:3,title:"1、开放端口",slug:"_1、开放端口",normalizedTitle:"1、开放端口",charIndex:2},{level:3,title:"2、查看防火墙所有开放的端口",slug:"_2、查看防火墙所有开放的端口",normalizedTitle:"2、查看防火墙所有开放的端口",charIndex:192},{level:3,title:"3.、关闭防火墙",slug:"_3-、关闭防火墙",normalizedTitle:"3.、关闭防火墙",charIndex:253},{level:3,title:"4、查看防火墙状态",slug:"_4、查看防火墙状态",normalizedTitle:"4、查看防火墙状态",charIndex:333},{level:3,title:"5、查看监听的端口",slug:"_5、查看监听的端口",normalizedTitle:"5、查看监听的端口",charIndex:371},{level:3,title:"6、检查端口被哪个进程占用",slug:"_6、检查端口被哪个进程占用",normalizedTitle:"6、检查端口被哪个进程占用",charIndex:401},{level:3,title:"7、查看进程的详细信息",slug:"_7、查看进程的详细信息",normalizedTitle:"7、查看进程的详细信息",charIndex:446},{level:3,title:"8、中止进程",slug:"_8、中止进程",normalizedTitle:"8、中止进程",charIndex:472}],headersStr:"1、开放端口 2、查看防火墙所有开放的端口 3.、关闭防火墙 4、查看防火墙状态 5、查看监听的端口 6、检查端口被哪个进程占用 7、查看进程的详细信息 8、中止进程",content:"# 1、开放端口\n\nfirewall-cmd --zone=public --add-port=5672/tcp --permanent  # 开放5672端口\n\nfirewall-cmd --zone=public --remove-port=5672/tcp --permanent #关闭5672端口\n\nfirewall-cmd --reload  # 配置立即生效\n\n\n\n# 2、查看防火墙所有开放的端口\n\nfirewall-cmd --zone=public --list-ports\n\n\n\n# 3.、关闭防火墙\n\n如果要开放的端口太多，嫌麻烦，可以关闭防火墙，安全性自行评估\n\nsystemctl stop firewalld.service\n\n\n\n# 4、查看防火墙状态\n\n firewall-cmd --state\n\n\n\n# 5、查看监听的端口\n\nnetstat -lnpt\n\n\n\n# 6、检查端口被哪个进程占用\n\nnetstat -lnpt |grep 3306\n\n\n\n# 7、查看进程的详细信息\n\nps 3306\n\n\n\n# 8、中止进程\n\nkill -9 3306\n",normalizedContent:"# 1、开放端口\n\nfirewall-cmd --zone=public --add-port=5672/tcp --permanent  # 开放5672端口\n\nfirewall-cmd --zone=public --remove-port=5672/tcp --permanent #关闭5672端口\n\nfirewall-cmd --reload  # 配置立即生效\n\n\n\n# 2、查看防火墙所有开放的端口\n\nfirewall-cmd --zone=public --list-ports\n\n\n\n# 3.、关闭防火墙\n\n如果要开放的端口太多，嫌麻烦，可以关闭防火墙，安全性自行评估\n\nsystemctl stop firewalld.service\n\n\n\n# 4、查看防火墙状态\n\n firewall-cmd --state\n\n\n\n# 5、查看监听的端口\n\nnetstat -lnpt\n\n\n\n# 6、检查端口被哪个进程占用\n\nnetstat -lnpt |grep 3306\n\n\n\n# 7、查看进程的详细信息\n\nps 3306\n\n\n\n# 8、中止进程\n\nkill -9 3306\n",charsets:{cjk:!0},lastUpdated:"2024/04/29, 11:14:33",lastUpdatedTimestamp:1714360473e3},{title:"目录",frontmatter:{title:"目录",date:"2024-04-16T17:39:03.000Z",permalink:"/pages/8efd89/"},regularPath:"/01.linux/02.linux%E4%BD%BF%E7%94%A8/02.%E7%9B%AE%E5%BD%95.html",relativePath:"01.linux/02.linux使用/02.目录.md",key:"v-146a0386",path:"/pages/8efd89/",headersStr:null,content:"目录            \n/bin          存放二进制可执行文件(ls,cat,mkdir等)，常用命令一般都在这里。\n/etc          存放系统管理和配置文件\n/home         存放所有用户文件的根目录，是用户主目录的基点，比如用户user的主目录就是/home/user，可以用~user表示\n/usr          用于存放系统应用程序，比较重要的目录/usr/local\n              本地系统管理员软件安装目录（安装系统级的应用）。这是最庞大的目录，要用到的应用程序和文件几乎都在这个目录。/usr/x11r6\n              存放x window的目录/usr/bin 众多的应用程序 /usr/sbin 超级用户的一些管理程序 /usr/doc\n              linux文档 /usr/include linux下开发和编译应用程序所需要的头文件 /usr/lib\n              常用的动态链接库和软件包的配置文件 /usr/man 帮助文档 /usr/src\n              源代码，linux内核的源代码就放在/usr/src/linux里 /usr/local/bin 本地增加的命令\n              /usr/local/lib 本地增加的库\n/opt          额外安装的可选应用程序包所放置的位置。一般情况下，我们可以把tomcat等都安装到这里。\n/proc         虚拟文件系统目录，是系统内存的映射。可直接访问这个目录来获取系统信息。\n/root         超级用户（系统管理员）的主目录（特权阶级^o^）\n/sbin         存放二进制可执行文件，只有root才能访问。这里存放的是系统管理员使用的系统级别的管理命令和程序。如ifconfig等。\n/dev          用于存放设备文件。\n/mnt          系统管理员安装临时文件系统的安装点，系统提供这个目录是让用户临时挂载其他的文件系统。\n/boot         存放用于系统引导时使用的各种文件\n/lib          存放跟文件系统中的程序运行所需要的共享库及内核模块。共享库又叫动态链接共享库，作用类似windows里的.dll文件，存放了根文件系统程序运行所需的共享文件。\n/tmp          用于存放各种临时文件，是公用的临时文件存储点。\n/var          用于存放运行时需要改变数据的文件，也是某些大文件的溢出区，比方说各种服务的日志文件（系统启动日志等。）等。\n/lost+found   这个目录平时是空的，系统非正常关机而留下“无家可归”的文件（windows下叫什么.chk）就在这里",normalizedContent:"目录            \n/bin          存放二进制可执行文件(ls,cat,mkdir等)，常用命令一般都在这里。\n/etc          存放系统管理和配置文件\n/home         存放所有用户文件的根目录，是用户主目录的基点，比如用户user的主目录就是/home/user，可以用~user表示\n/usr          用于存放系统应用程序，比较重要的目录/usr/local\n              本地系统管理员软件安装目录（安装系统级的应用）。这是最庞大的目录，要用到的应用程序和文件几乎都在这个目录。/usr/x11r6\n              存放x window的目录/usr/bin 众多的应用程序 /usr/sbin 超级用户的一些管理程序 /usr/doc\n              linux文档 /usr/include linux下开发和编译应用程序所需要的头文件 /usr/lib\n              常用的动态链接库和软件包的配置文件 /usr/man 帮助文档 /usr/src\n              源代码，linux内核的源代码就放在/usr/src/linux里 /usr/local/bin 本地增加的命令\n              /usr/local/lib 本地增加的库\n/opt          额外安装的可选应用程序包所放置的位置。一般情况下，我们可以把tomcat等都安装到这里。\n/proc         虚拟文件系统目录，是系统内存的映射。可直接访问这个目录来获取系统信息。\n/root         超级用户（系统管理员）的主目录（特权阶级^o^）\n/sbin         存放二进制可执行文件，只有root才能访问。这里存放的是系统管理员使用的系统级别的管理命令和程序。如ifconfig等。\n/dev          用于存放设备文件。\n/mnt          系统管理员安装临时文件系统的安装点，系统提供这个目录是让用户临时挂载其他的文件系统。\n/boot         存放用于系统引导时使用的各种文件\n/lib          存放跟文件系统中的程序运行所需要的共享库及内核模块。共享库又叫动态链接共享库，作用类似windows里的.dll文件，存放了根文件系统程序运行所需的共享文件。\n/tmp          用于存放各种临时文件，是公用的临时文件存储点。\n/var          用于存放运行时需要改变数据的文件，也是某些大文件的溢出区，比方说各种服务的日志文件（系统启动日志等。）等。\n/lost+found   这个目录平时是空的，系统非正常关机而留下“无家可归”的文件（windows下叫什么.chk）就在这里",charsets:{cjk:!0},lastUpdated:"2024/04/29, 11:14:33",lastUpdatedTimestamp:1714360473e3},{title:"linux使用",frontmatter:{title:"linux使用",date:"2024-04-16T17:39:03.000Z",permalink:"/pages/949754/"},regularPath:"/01.linux/02.linux%E4%BD%BF%E7%94%A8/01.linux%E4%BD%BF%E7%94%A8.html",relativePath:"01.linux/02.linux使用/01.linux使用.md",key:"v-61cd19e7",path:"/pages/949754/",headers:[{level:2,title:"1.1 关机和重启",slug:"_1-1-关机和重启",normalizedTitle:"1.1 关机和重启",charIndex:13},{level:2,title:"1.2 帮助命令",slug:"_1-2-帮助命令",normalizedTitle:"1.2 帮助命令",charIndex:182},{level:2,title:"2.1 目录切换 cd",slug:"_2-1-目录切换-cd",normalizedTitle:"2.1 目录切换 cd",charIndex:1509},{level:2,title:"2.2 目录查看 ls [-al]",slug:"_2-2-目录查看-ls-al",normalizedTitle:"2.2 目录查看 ls [-al]",charIndex:1625},{level:2,title:"2.3 目录操作【增，删，改，查】",slug:"_2-3-目录操作【增-删-改-查】",normalizedTitle:"2.3 目录操作【增，删，改，查】",charIndex:1786},{level:3,title:"2.3.1 创建目录【增】 mkdir",slug:"_2-3-1-创建目录【增】-mkdir",normalizedTitle:"2.3.1 创建目录【增】 mkdir",charIndex:1808},{level:3,title:"2.3.2 删除目录或文件【删】rm",slug:"_2-3-2-删除目录或文件【删】rm",normalizedTitle:"2.3.2 删除目录或文件【删】rm",charIndex:1908},{level:3,title:"2.3.3 目录修改【改】mv 和 cp",slug:"_2-3-3-目录修改【改】mv-和-cp",normalizedTitle:"2.3.3 目录修改【改】mv 和 cp",charIndex:2207},{level:3,title:"2.3.4 搜索目录【查】find",slug:"_2-3-4-搜索目录【查】find",normalizedTitle:"2.3.4 搜索目录【查】find",charIndex:2584},{level:2,title:"3.1 文件操作【增，删，改，查】",slug:"_3-1-文件操作【增-删-改-查】",normalizedTitle:"3.1 文件操作【增，删，改，查】",charIndex:2694},{level:3,title:"3.1.1 新建文件【增】touch",slug:"_3-1-1-新建文件【增】touch",normalizedTitle:"3.1.1 新建文件【增】touch",charIndex:2716},{level:3,title:"3.1.2 删除文件 【删】 rm",slug:"_3-1-2-删除文件-【删】-rm",normalizedTitle:"3.1.2 删除文件 【删】 rm",charIndex:2790},{level:3,title:"3.1.3 修改文件【改】 vi或vim",slug:"_3-1-3-修改文件【改】-vi或vim",normalizedTitle:"3.1.3 修改文件【改】 vi或vim",charIndex:2827},{level:3,title:"3.1.4 文件的查看【查】",slug:"_3-1-4-文件的查看【查】",normalizedTitle:"3.1.4 文件的查看【查】",charIndex:3640},{level:2,title:"3.2 权限修改",slug:"_3-2-权限修改",normalizedTitle:"3.2 权限修改",charIndex:4004},{level:2,title:"4.1 打包和压缩",slug:"_4-1-打包和压缩",normalizedTitle:"4.1 打包和压缩",charIndex:4305},{level:2,title:"4.2 解压",slug:"_4-2-解压",normalizedTitle:"4.2 解压",charIndex:4659},{level:2,title:"5.1 grep",slug:"_5-1-grep",normalizedTitle:"5.1 grep",charIndex:4815},{level:2,title:"5.2 find",slug:"_5-2-find",normalizedTitle:"5.2 find",charIndex:4975},{level:2,title:"5.3 locate",slug:"_5-3-locate",normalizedTitle:"5.3 locate",charIndex:5309},{level:2,title:"5.4 whereis",slug:"_5-4-whereis",normalizedTitle:"5.4 whereis",charIndex:5673},{level:2,title:"5.5 which",slug:"_5-5-which",normalizedTitle:"5.5 which",charIndex:5796},{level:2,title:"6.1 su",slug:"_6-1-su",normalizedTitle:"6.1 su",charIndex:5936},{level:2,title:"6.2 sudo",slug:"_6-2-sudo",normalizedTitle:"6.2 sudo",charIndex:6211},{level:2,title:"8.1 主机名配置",slug:"_8-1-主机名配置",normalizedTitle:"8.1 主机名配置",charIndex:6778},{level:2,title:"8.2 IP 地址配置",slug:"_8-2-ip-地址配置",normalizedTitle:"8.2 ip 地址配置",charIndex:6866},{level:2,title:"8.3 域名映射",slug:"_8-3-域名映射",normalizedTitle:"8.3 域名映射",charIndex:7308},{level:2,title:"9.1 命令格式",slug:"_9-1-命令格式",normalizedTitle:"9.1 命令格式",charIndex:7765},{level:2,title:"9.2 配置说明、实例",slug:"_9-2-配置说明、实例",normalizedTitle:"9.2 配置说明、实例",charIndex:8261},{level:2,title:"10.1 查看当前目录：pwd",slug:"_10-1-查看当前目录-pwd",normalizedTitle:"10.1 查看当前目录：pwd",charIndex:8847},{level:2,title:"10.2 查看进程：ps -ef",slug:"_10-2-查看进程-ps-ef",normalizedTitle:"10.2 查看进程：ps -ef",charIndex:8884},{level:2,title:"10.3 结束进程：kill",slug:"_10-3-结束进程-kill",normalizedTitle:"10.3 结束进程：kill",charIndex:8928},{level:2,title:"10.4 网络通信命令：",slug:"_10-4-网络通信命令",normalizedTitle:"10.4 网络通信命令：",charIndex:8991},{level:2,title:"10.5 配置网络",slug:"_10-5-配置网络",normalizedTitle:"10.5 配置网络",charIndex:9154},{level:2,title:"10.6 重启网络",slug:"_10-6-重启网络",normalizedTitle:"10.6 重启网络",charIndex:9178},{level:2,title:"10.7 切换用户",slug:"_10-7-切换用户",normalizedTitle:"10.7 切换用户",charIndex:9220},{level:2,title:"10.8 关闭防火墙",slug:"_10-8-关闭防火墙",normalizedTitle:"10.8 关闭防火墙",charIndex:9247},{level:2,title:"10.9 修改文件权限",slug:"_10-9-修改文件权限",normalizedTitle:"10.9 修改文件权限",charIndex:9346},{level:2,title:"10.10 清屏",slug:"_10-10-清屏",normalizedTitle:"10.10 清屏",charIndex:9376},{level:2,title:"10.11 vi模式下快捷键",slug:"_10-11-vi模式下快捷键",normalizedTitle:"10.11 vi模式下快捷键",charIndex:9402}],headersStr:"1.1 关机和重启 1.2 帮助命令 2.1 目录切换 cd 2.2 目录查看 ls [-al] 2.3 目录操作【增，删，改，查】 2.3.1 创建目录【增】 mkdir 2.3.2 删除目录或文件【删】rm 2.3.3 目录修改【改】mv 和 cp 2.3.4 搜索目录【查】find 3.1 文件操作【增，删，改，查】 3.1.1 新建文件【增】touch 3.1.2 删除文件 【删】 rm 3.1.3 修改文件【改】 vi或vim 3.1.4 文件的查看【查】 3.2 权限修改 4.1 打包和压缩 4.2 解压 5.1 grep 5.2 find 5.3 locate 5.4 whereis 5.5 which 6.1 su 6.2 sudo 8.1 主机名配置 8.2 IP 地址配置 8.3 域名映射 9.1 命令格式 9.2 配置说明、实例 10.1 查看当前目录：pwd 10.2 查看进程：ps -ef 10.3 结束进程：kill 10.4 网络通信命令： 10.5 配置网络 10.6 重启网络 10.7 切换用户 10.8 关闭防火墙 10.9 修改文件权限 10.10 清屏 10.11 vi模式下快捷键",content:'# 一、基本命令\n\n\n# 1.1 关机和重启\n\n关机\n\nshutdown -h now     #立刻关机\nshutdown -h 5     #5分钟后关机\npoweroff       立#刻关机\n\n\n重启\n\nshutdown -r now     立刻重启\nshutdown -r 5     5分钟后重启\nreboot         立刻重启\n\n\n\n# 1.2 帮助命令\n\n--help命令 shutdown --help： ifconfig --help：查看网卡信息 man命令（命令说明书） man shutdown 注意：man shutdown打开命令说明书之后，使用按键q退出\n\n\n# 二、目录操作命令\n\n目录            \n/bin          存放二进制可执行文件(ls,cat,mkdir等)，常用命令一般都在这里。\n/etc          存放系统管理和配置文件\n/home         存放所有用户文件的根目录，是用户主目录的基点，比如用户user的主目录就是/home/user，可以用~user表示\n/usr          用于存放系统应用程序，比较重要的目录/usr/local\n              本地系统管理员软件安装目录（安装系统级的应用）。这是最庞大的目录，要用到的应用程序和文件几乎都在这个目录。/usr/x11r6\n              存放x window的目录/usr/bin 众多的应用程序 /usr/sbin 超级用户的一些管理程序 /usr/doc\n              linux文档 /usr/include linux下开发和编译应用程序所需要的头文件 /usr/lib\n              常用的动态链接库和软件包的配置文件 /usr/man 帮助文档 /usr/src\n              源代码，linux内核的源代码就放在/usr/src/linux里 /usr/local/bin 本地增加的命令\n              /usr/local/lib 本地增加的库\n/opt          额外安装的可选应用程序包所放置的位置。一般情况下，我们可以把tomcat等都安装到这里。\n/proc         虚拟文件系统目录，是系统内存的映射。可直接访问这个目录来获取系统信息。\n/root         超级用户（系统管理员）的主目录（特权阶级^o^）\n/sbin         存放二进制可执行文件，只有root才能访问。这里存放的是系统管理员使用的系统级别的管理命令和程序。如ifconfig等。\n/dev          用于存放设备文件。\n/mnt          系统管理员安装临时文件系统的安装点，系统提供这个目录是让用户临时挂载其他的文件系统。\n/boot         存放用于系统引导时使用的各种文件\n/lib          存放跟文件系统中的程序运行所需要的共享库及内核模块。共享库又叫动态链接共享库，作用类似windows里的.dll文件，存放了根文件系统程序运行所需的共享文件。\n/tmp          用于存放各种临时文件，是公用的临时文件存储点。\n/var          用于存放运行时需要改变数据的文件，也是某些大文件的溢出区，比方说各种服务的日志文件（系统启动日志等。）等。\n/lost+found   这个目录平时是空的，系统非正常关机而留下“无家可归”的文件（windows下叫什么.chk）就在这里\n\n\n# 2.1 目录切换 cd\n\n命令：cd 目录 cd / 切换到根目录 cd /usr 切换到根目录下的usr目录 cd ../ 切换到上一级目录 或者 cd .. cd ~ 切换到home目录 cd - 切换到上次访问的目录\n\n\n# 2.2 目录查看 ls [-al]\n\n命令：ls [-al] ls 查看当前目录下的所有目录和文件 ls -a 查看当前目录下的所有目录和文件（包括隐藏的文件） ls -l 或 ll 列表查看当前目录下的所有目录和文件（列表查看，显示更多信息） ls /dir 查看指定目录下的所有目录和文件 如：ls /usr\n\n\n# 2.3 目录操作【增，删，改，查】\n\n\n# 2.3.1 创建目录【增】 mkdir\n\n命令：mkdir 目录 mkdir aaa 在当前目录下创建一个名为aaa的目录 mkdir /usr/aaa 在指定目录下创建一个名为aaa的目录\n\n\n# 2.3.2 删除目录或文件【删】rm\n\n命令：rm [-rf] 目录 删除文件： rm 文件 删除当前目录下的文件 rm -f 文件 删除当前目录的的文件（不询问） 删除目录： rm -r aaa 递归删除当前目录下的aaa目录 rm -rf aaa 递归删除当前目录下的aaa目录（不询问） 全部删除： rm -rf * 将当前目录下的所有目录和文件全部删除 rm -rf /* 【自杀命令！慎用！慎用！慎用！】将根目录下的所有文件全部删除 注意：rm不仅可以删除目录，也可以删除其他文件或压缩包，为了方便大家的记忆，无论删除任何目录或文件，都直接使用 rm -rf 目录/文件/压缩包\n\n\n# 2.3.3 目录修改【改】mv 和 cp\n\n一、重命名目录 命令：mv 当前目录 新目录 例如：mv aaa bbb 将目录aaa改为bbb 注意：mv的语法不仅可以对目录进行重命名而且也可以对各种文件，压缩包等进行 重命名的操作 二、剪切目录 命令：mv 目录名称 目录的新位置 示例：将/usr/tmp目录下的aaa目录剪切到 /usr目录下面 mv /usr/tmp/aaa /usr 注意：mv语法不仅可以对目录进行剪切操作，对文件和压缩包等都可执行剪切操作 三、拷贝目录 命令：cp -r 目录名称 目录拷贝的目标位置 -r代表递归 示例：将/usr/tmp目录下的aaa目录复制到 /usr目录下面 cp /usr/tmp/aaa /usr 注意：cp命令不仅可以拷贝目录还可以拷贝文件，压缩包等，拷贝文件和压缩包时不 用写-r递归\n\n\n# 2.3.4 搜索目录【查】find\n\n命令：find 目录 参数 文件名称 示例：find /usr/tmp -name \'a*\' 查找/usr/tmp目录下的所有以a开头的目录或文件\n\n\n# 三、文件操作命令\n\n\n# 3.1 文件操作【增，删，改，查】\n\n\n# 3.1.1 新建文件【增】touch\n\n命令：touch 文件名 示例：在当前目录创建一个名为aa.txt的文件 touch aa.txt\n\n\n# 3.1.2 删除文件 【删】 rm\n\n命令：rm -rf 文件名\n\n\n# 3.1.3 修改文件【改】 vi或vim\n\n【vi编辑器的3种模式】 基本上vi可以分为三种状态，分别是命令模式（command mode）、插入模式（Insert mode）和底行模式（last line mode），各模式的功能区分如下：\n\n 1. 命令行模式command mode） 控制屏幕光标的移动，字符、字或行的删除，查找，移动复制某区段及进入Insert mode下，或者到 last line mode。 命令行模式下的常用命令： 【1】控制光标移动：↑，↓，j 【2】删除当前行：dd 【3】查找：/字符 【4】进入编辑模式：i o a 【5】进入底行模式：:\n 2. 编辑模式（Insert mode） 只有在Insert mode下，才可以做文字输入，按「ESC」键可回到命令行模式。 编辑模式下常用命令： 【1】ESC 退出编辑模式到命令行模式；\n 3. 底行模式（last line mode） 将文件保存或退出vi，也可以设置编辑环境，如寻找字符串、列出行号……等。 底行模式下常用命令： 【1】退出编辑： :q 【2】强制退出： :q! 【3】保存并退出： :wq 打开文件 命令：vi 文件名 示例：打开当前目录下的aa.txt文件 vi aa.txt 或者 vim aa.txt 注意：使用vi编辑器打开文件后，并不能编辑，因为此时处于命令模式，点击键盘i/a/o进入编辑模式。 编辑文件 使用vi编辑器打开文件后点击按键：i ，a或者o即可进入编辑模式。 i:在光标所在字符前开始插入 a:在光标所在字符后开始插入 o:在光标所在行的下面另起一新行插入 保存或者取消编辑 保存文件： 第一步：ESC 进入命令行模式 第二步：: 进入底行模式 第三步：wq 保存并退出编辑 取消编辑： 第一步：ESC 进入命令行模式 第二步：: 进入底行模式 第三步：q! 撤销本次修改并退出编辑\n\n\n# 3.1.4 文件的查看【查】\n\n文件的查看命令：cat/more/less/tail cat：看最后一屏 示例：使用cat查看/etc/sudo.conf文件，只能显示最后一屏内容 cat sudo.conf more：百分比显示 示例：使用more查看/etc/sudo.conf文件，可以显示百分比，回车可以向下一行，空格可以向下一页，q可以退出查看 more sudo.conf less：翻页查看 示例：使用less查看/etc/sudo.conf文件，可以使用键盘上的PgUp和PgDn向上 和向下翻页，q结束查看 less sudo.conf tail：指定行数或者动态查看 示例：使用tail -10 查看/etc/sudo.conf文件的后10行，Ctrl+C结束\ntail -10 sudo.conf\n\n\n# 3.2 权限修改\n\nrwx：r代表可读，w代表可写，x代表该文件是一个可执行文件，如果rwx任意位置变为-则代表不可读或不可写或不可执行文件。 示例：给aaa.txt文件权限改为可执行文件权限，aaa.txt文件的权限是-rw------- 第一位：-就代表是文件，d代表是文件夹 第一段（3位）：代表拥有者的权限 第二段（3位）：代表拥有者所在的组，组员的权限 第三段（最后3位）：代表的是其他用户的权限 421 421 421 - rw- --- ---\n\n命令：chmod +x aaa.txt\n或者采用8421法\n\n命令：chmod 100 aaa.txt\n\n\n\n# 四、压缩文件操作\n\n\n# 4.1 打包和压缩\n\nWindows的压缩文件的扩展名 .zip/.rar linux中的打包文件：aa.tar\nlinux中的压缩文件：bb.gz\nlinux中打包并压缩的文件：.tar.gz Linux中的打包文件一般是以.tar结尾的，压缩的命令一般是以.gz结尾的。 而一般情况下打包和压缩是一起进行的，打包并压缩后的文件的后缀名一般.tar.gz。 命令：tar -zcvf 打包压缩后的文件名 要打包的文件 其中：z：调用gzip压缩命令进行压缩 c：打包文件 v：显示运行过程 f：指定文件名 示例：打包并压缩/usr/tmp 下的所有文件 压缩后的压缩包指定名称为xxx.tar tar -zcvf ab.tar aa.txt bb.txt 或：tar -zcvf ab.tar *\n\n\n# 4.2 解压\n\n命令：tar [-zxvf] 压缩文件\n其中：x：代表解压 示例：将/usr/tmp 下的ab.tar解压到当前目录下 示例：将/usr/tmp 下的ab.tar解压到根目录/usr下 tar -xvf ab.tar -C /usr------C代表指定解压的位置\n\n\n# 五、查找命令\n\n\n# 5.1 grep\n\ngrep命令是一种强大的文本搜索工具 使用实例：\n\nps -ef | grep sshd  查找指定ssh服务进程 \n\nps -ef | grep sshd | grep -v grep 查找指定服务进程，排除gerp身 \n\nps -ef | grep sshd -c 查找指定进程个数 \n\n\n\n# 5.2 find\n\nfind命令在目录结构中搜索文件，并对搜索结果执行指定的操作。 find 默认搜索当前目录及其子目录，并且不过滤任何结果（也就是返回所有文件），将它们全都显示在屏幕上。 使用实例：\n\nfind . -name "*.log" -ls  在当前目录查找以.log结尾的文件，并显示详细信息。 \n\nfind /root/ -perm 600   查找/root/目录下权限为600的文件 \n\nfind . -type f -name "*.log"  查找当目录，以.log结尾的普通文件 \n\nfind . -type d | sort   查找当前所有目录并排序 \n\nfind . -size +100M  查找当前目录大于100M的文件\n\n\n\n# 5.3 locate\n\nlocate 让使用者可以很快速的搜寻某个路径。默认每天自动更新一次，所以使用locate 命令查不到最新变动过的文件。为了避免这种情况，可以在使用locate之前，先使用updatedb命令，手动更新数据库。如果数据库中没有查询的数据，则会报出locate: can not stat () `/var/lib/mlocate/mlocate.db\': No such file or directory该错误！updatedb即可！ yum -y install mlocate 如果是精简版CentOS系统需要安装locate命令 使用实例：\n\nupdatedb\n\nlocate /etc/sh 搜索etc目录下所有以sh开头的文件 \n\nlocate pwd 查找和pwd相关的所有文件\n\n\n\n# 5.4 whereis\n\nwhereis命令是定位可执行文件、源代码文件、帮助文件在文件系统中的位置。这些文件的属性应属于原始代码，二进制文件，或是帮助文件。 使用实例：\n\nwhereis ls    将和ls文件相关的文件都查找出来\n\n\n\n# 5.5 which\n\nwhich命令的作用是在PATH变量指定的路径中，搜索某个系统命令的位置，并且返回第一个搜索结果。 使用实例：\n\nwhich pwd  查找pwd命令所在路径 \n\nwhich java  查找path中java的路径 \n\n\n\n# 六、su、sudo\n\n\n# 6.1 su\n\nsu用于用户之间的切换。但是切换前的用户依然保持登录状态。如果是root 向普通或虚拟用户切换不需要密码，反之普通用户切换到其它任何用户都需要密码验证。\n\nsu test:切换到test用户，但是路径还是/root目录\n\nsu - test : 切换到test用户，路径变成了/home/test\n\nsu : 切换到root用户，但是路径还是原来的路径\n\nsu - : 切换到root用户，并且路径是/root\n\n\nsu不足：如果某个用户需要使用root权限、则必须要把root密码告诉此用户。 退出返回之前的用户：exit\n\n\n# 6.2 sudo\n\nsudo是为所有想使用root权限的普通用户设计的。可以让普通用户具有临时使用root权限的权利。只需输入自己账户的密码即可。 进入sudo配置文件命令：\n\nvi /etc/sudoer或者visudo\n案例：\n\n允许hadoop用户以root身份执行各种应用命令，需要输入hadoop用户的密码。\n\nhadoop  ALL=(ALL)   ALL \n\n案例：\n\n只允许hadoop用户以root身份执行ls 、cat命令，并且执行时候免输入密码。 \n\n配置文件中： \n\nhadoop  ALL=NOPASSWD:  /bin/ls, /bin/cat \n\n\n\n# 七、系统服务\n\nservice iptables status  --查看iptables服务的状态\nservice iptables start  --开启iptables服务\nservice iptables stop  --停止iptables服务\nservice iptables restart  --重启iptables服务\nchkconfig iptables off  --关闭iptables服务的开机自启动\nchkconfig iptables on  --开启iptables服务的开机自启动\n\n\n\n# 八、网络管理\n\n\n# 8.1 主机名配置\n\n[root@node1 ~]# vi /etc/sysconfig/network\nNETWORKING=yes\nHOSTNAME=node1\n\n\n\n# 8.2 IP 地址配置\n\n[root@node1 ~]# vi /etc/sysconfig/network-scripts/ifcfg-eth0\n[root@localhost sysconfig]# vim /etc/sysconfig/network-scripts/ifcfg-ens33\nTYPE=Ethernet\nPROXY_METHOD=none\nBROWSER_ONLY=no\nBOOTPROTO=static\nDEFROUTE=yes\nIPV4_FAILURE_FATAL=no\nNAME=ens33\nNAME=ens33\nUUID=12037371-f4f9-42fc-8fce-90e429330d0c\nDEVICE=ens33\nONBOOT=yes\nIPADDR=192.168.48.10\nNETMASK=255.255.255.0\nGATEWAY=192.168.48.2\nDNS1=114.114.114.114\nDNS2=8.8.8.8\n~\n\n\n\n# 8.3 域名映射\n\n/etc/hosts文件用于在通过主机名进行访问时做ip地址解析之用。所以，你想访问一个什么样的主机名，就需要把这个主机名和它对应的ip地址。\n\n[root@node1 ~]# vi /etc/hosts\n#### 在最后加上\n192.168.52.201  node1\n192.168.52.202  node2\n192.168.52.203  node3\n\n\n\n# 九、定时任务指令crontab 配置\n\ncrontab是Unix和Linux用于设置定时任务的指令。通过crontab命令，可以在固定间隔时间,执行指定的系统指令或shell脚本。时间间隔的单位可以是分钟、小时、日、月、周及以上的任意组合。 crontab安装：\n\nyum install crontabs\n\n\n服务操作说明：\n\nservice crond start   ## 启动服务 \nservice crond stop    ## 关闭服务 \nservice crond restart ## 重启服务\n\n\n\n# 9.1 命令格式\n\ncrontab [-u user] file crontab [-u user] [ -e | -l | -r ] 参数说明： **-u user：**用来设定某个用户的crontab服务\n**file：**file是命令文件的名字,表示将file做为crontab的任务列表文件 并载入crontab。 **-e：**编辑某个用户的crontab文件内容。如果不指定用户，则表示编辑当前 用户的crontab文件。 **-l：**显示某个用户的crontab文件内容。如果不指定用户，则表示显示当前 用户的crontab文件内容。 **-r：**删除定时任务配置，从/var/spool/cron目录中删除某个用户的crontab 文件，如果不指定用户，则默认删除当前用户的crontab文件。 命令示例：\n\ncrontab file [-u user] ## 用指定的文件替代目前的crontab\ncrontab -l [-u user]  ## 列出用户目前的crontab\ncrontab -e [-u user]  ## 编辑用户目前的crontab\n\n\n\n# 9.2 配置说明、实例\n\n命令：* * * * * command\n解释：分 时 日 月 周 命令 第1列表示分钟1～59 每分钟用*或者 */1表示\n第2列表示小时0～23（0表示0点） 第3列表示日期1～31\n第4列表示月份1～12\n第5列标识号星期0～6（0表示星期天）\n第6列要运行的命令 配置实例：\n\n先打开定时任务所在的文件：\ncrontab -e\n每分钟执行一次date命令 \n*/1 * * * * date >> /root/date.txt\n每晚的21:30重启apache。 \n30 21 * * * service httpd restart\n每月1、10、22日的4 : 45重启apache。  \n45 4 1,10,22 * * service httpd restart\n每周六、周日的1 : 10重启apache。 \n10 1 * * 6,0 service httpd restart\n每天18 : 00至23 : 00之间每隔30分钟重启apache。\n0,30   18-23    *   *   *   service httpd restart\n晚上11点到早上7点之间，每隔一小时重启apache\n*  23-7/1    *   *   *   service httpd restart\n\n\n\n# 十、其他命令\n\n\n# 10.1 查看当前目录：pwd\n\n命令：pwd 查看当前目录路径\n\n\n# 10.2 查看进程：ps -ef\n\n命令：ps -ef 查看所有正在运行的进程\n\n\n# 10.3 结束进程：kill\n\n命令：kill pid 或者 kill -9 pid(强制杀死进程) pid:进程号\n\n\n# 10.4 网络通信命令：\n\nifconfig：查看网卡信息 命令：ifconfig 或 ifconfig | more ping：查看与某台机器的连接情况 命令：ping ip netstat -an：查看当前系统端口 命令：netstat -an 搜索指定端口 命令：netstat -an | grep 8080\n\n\n# 10.5 配置网络\n\n命令：setup\n\n\n# 10.6 重启网络\n\n命令：service network restart\n\n\n# 10.7 切换用户\n\n命令：su - 用户名\n\n\n# 10.8 关闭防火墙\n\n命令：chkconfig iptables off 或者：\n\n iptables -L;\n iptables -F;\n service iptables stop\n\n\n\n# 10.9 修改文件权限\n\n命令：chmod 777\n\n\n# 10.10 清屏\n\n命令：ctrl + l\n\n\n# 10.11 vi模式下快捷键\n\nesc后: 保存并退出快捷键：shift+z+z 光标跳到最后一行快捷键：shift+g 删除一行：dd 复制一行内容：y+y 粘贴复制的内容：p',normalizedContent:'# 一、基本命令\n\n\n# 1.1 关机和重启\n\n关机\n\nshutdown -h now     #立刻关机\nshutdown -h 5     #5分钟后关机\npoweroff       立#刻关机\n\n\n重启\n\nshutdown -r now     立刻重启\nshutdown -r 5     5分钟后重启\nreboot         立刻重启\n\n\n\n# 1.2 帮助命令\n\n--help命令 shutdown --help： ifconfig --help：查看网卡信息 man命令（命令说明书） man shutdown 注意：man shutdown打开命令说明书之后，使用按键q退出\n\n\n# 二、目录操作命令\n\n目录            \n/bin          存放二进制可执行文件(ls,cat,mkdir等)，常用命令一般都在这里。\n/etc          存放系统管理和配置文件\n/home         存放所有用户文件的根目录，是用户主目录的基点，比如用户user的主目录就是/home/user，可以用~user表示\n/usr          用于存放系统应用程序，比较重要的目录/usr/local\n              本地系统管理员软件安装目录（安装系统级的应用）。这是最庞大的目录，要用到的应用程序和文件几乎都在这个目录。/usr/x11r6\n              存放x window的目录/usr/bin 众多的应用程序 /usr/sbin 超级用户的一些管理程序 /usr/doc\n              linux文档 /usr/include linux下开发和编译应用程序所需要的头文件 /usr/lib\n              常用的动态链接库和软件包的配置文件 /usr/man 帮助文档 /usr/src\n              源代码，linux内核的源代码就放在/usr/src/linux里 /usr/local/bin 本地增加的命令\n              /usr/local/lib 本地增加的库\n/opt          额外安装的可选应用程序包所放置的位置。一般情况下，我们可以把tomcat等都安装到这里。\n/proc         虚拟文件系统目录，是系统内存的映射。可直接访问这个目录来获取系统信息。\n/root         超级用户（系统管理员）的主目录（特权阶级^o^）\n/sbin         存放二进制可执行文件，只有root才能访问。这里存放的是系统管理员使用的系统级别的管理命令和程序。如ifconfig等。\n/dev          用于存放设备文件。\n/mnt          系统管理员安装临时文件系统的安装点，系统提供这个目录是让用户临时挂载其他的文件系统。\n/boot         存放用于系统引导时使用的各种文件\n/lib          存放跟文件系统中的程序运行所需要的共享库及内核模块。共享库又叫动态链接共享库，作用类似windows里的.dll文件，存放了根文件系统程序运行所需的共享文件。\n/tmp          用于存放各种临时文件，是公用的临时文件存储点。\n/var          用于存放运行时需要改变数据的文件，也是某些大文件的溢出区，比方说各种服务的日志文件（系统启动日志等。）等。\n/lost+found   这个目录平时是空的，系统非正常关机而留下“无家可归”的文件（windows下叫什么.chk）就在这里\n\n\n# 2.1 目录切换 cd\n\n命令：cd 目录 cd / 切换到根目录 cd /usr 切换到根目录下的usr目录 cd ../ 切换到上一级目录 或者 cd .. cd ~ 切换到home目录 cd - 切换到上次访问的目录\n\n\n# 2.2 目录查看 ls [-al]\n\n命令：ls [-al] ls 查看当前目录下的所有目录和文件 ls -a 查看当前目录下的所有目录和文件（包括隐藏的文件） ls -l 或 ll 列表查看当前目录下的所有目录和文件（列表查看，显示更多信息） ls /dir 查看指定目录下的所有目录和文件 如：ls /usr\n\n\n# 2.3 目录操作【增，删，改，查】\n\n\n# 2.3.1 创建目录【增】 mkdir\n\n命令：mkdir 目录 mkdir aaa 在当前目录下创建一个名为aaa的目录 mkdir /usr/aaa 在指定目录下创建一个名为aaa的目录\n\n\n# 2.3.2 删除目录或文件【删】rm\n\n命令：rm [-rf] 目录 删除文件： rm 文件 删除当前目录下的文件 rm -f 文件 删除当前目录的的文件（不询问） 删除目录： rm -r aaa 递归删除当前目录下的aaa目录 rm -rf aaa 递归删除当前目录下的aaa目录（不询问） 全部删除： rm -rf * 将当前目录下的所有目录和文件全部删除 rm -rf /* 【自杀命令！慎用！慎用！慎用！】将根目录下的所有文件全部删除 注意：rm不仅可以删除目录，也可以删除其他文件或压缩包，为了方便大家的记忆，无论删除任何目录或文件，都直接使用 rm -rf 目录/文件/压缩包\n\n\n# 2.3.3 目录修改【改】mv 和 cp\n\n一、重命名目录 命令：mv 当前目录 新目录 例如：mv aaa bbb 将目录aaa改为bbb 注意：mv的语法不仅可以对目录进行重命名而且也可以对各种文件，压缩包等进行 重命名的操作 二、剪切目录 命令：mv 目录名称 目录的新位置 示例：将/usr/tmp目录下的aaa目录剪切到 /usr目录下面 mv /usr/tmp/aaa /usr 注意：mv语法不仅可以对目录进行剪切操作，对文件和压缩包等都可执行剪切操作 三、拷贝目录 命令：cp -r 目录名称 目录拷贝的目标位置 -r代表递归 示例：将/usr/tmp目录下的aaa目录复制到 /usr目录下面 cp /usr/tmp/aaa /usr 注意：cp命令不仅可以拷贝目录还可以拷贝文件，压缩包等，拷贝文件和压缩包时不 用写-r递归\n\n\n# 2.3.4 搜索目录【查】find\n\n命令：find 目录 参数 文件名称 示例：find /usr/tmp -name \'a*\' 查找/usr/tmp目录下的所有以a开头的目录或文件\n\n\n# 三、文件操作命令\n\n\n# 3.1 文件操作【增，删，改，查】\n\n\n# 3.1.1 新建文件【增】touch\n\n命令：touch 文件名 示例：在当前目录创建一个名为aa.txt的文件 touch aa.txt\n\n\n# 3.1.2 删除文件 【删】 rm\n\n命令：rm -rf 文件名\n\n\n# 3.1.3 修改文件【改】 vi或vim\n\n【vi编辑器的3种模式】 基本上vi可以分为三种状态，分别是命令模式（command mode）、插入模式（insert mode）和底行模式（last line mode），各模式的功能区分如下：\n\n 1. 命令行模式command mode） 控制屏幕光标的移动，字符、字或行的删除，查找，移动复制某区段及进入insert mode下，或者到 last line mode。 命令行模式下的常用命令： 【1】控制光标移动：↑，↓，j 【2】删除当前行：dd 【3】查找：/字符 【4】进入编辑模式：i o a 【5】进入底行模式：:\n 2. 编辑模式（insert mode） 只有在insert mode下，才可以做文字输入，按「esc」键可回到命令行模式。 编辑模式下常用命令： 【1】esc 退出编辑模式到命令行模式；\n 3. 底行模式（last line mode） 将文件保存或退出vi，也可以设置编辑环境，如寻找字符串、列出行号……等。 底行模式下常用命令： 【1】退出编辑： :q 【2】强制退出： :q! 【3】保存并退出： :wq 打开文件 命令：vi 文件名 示例：打开当前目录下的aa.txt文件 vi aa.txt 或者 vim aa.txt 注意：使用vi编辑器打开文件后，并不能编辑，因为此时处于命令模式，点击键盘i/a/o进入编辑模式。 编辑文件 使用vi编辑器打开文件后点击按键：i ，a或者o即可进入编辑模式。 i:在光标所在字符前开始插入 a:在光标所在字符后开始插入 o:在光标所在行的下面另起一新行插入 保存或者取消编辑 保存文件： 第一步：esc 进入命令行模式 第二步：: 进入底行模式 第三步：wq 保存并退出编辑 取消编辑： 第一步：esc 进入命令行模式 第二步：: 进入底行模式 第三步：q! 撤销本次修改并退出编辑\n\n\n# 3.1.4 文件的查看【查】\n\n文件的查看命令：cat/more/less/tail cat：看最后一屏 示例：使用cat查看/etc/sudo.conf文件，只能显示最后一屏内容 cat sudo.conf more：百分比显示 示例：使用more查看/etc/sudo.conf文件，可以显示百分比，回车可以向下一行，空格可以向下一页，q可以退出查看 more sudo.conf less：翻页查看 示例：使用less查看/etc/sudo.conf文件，可以使用键盘上的pgup和pgdn向上 和向下翻页，q结束查看 less sudo.conf tail：指定行数或者动态查看 示例：使用tail -10 查看/etc/sudo.conf文件的后10行，ctrl+c结束\ntail -10 sudo.conf\n\n\n# 3.2 权限修改\n\nrwx：r代表可读，w代表可写，x代表该文件是一个可执行文件，如果rwx任意位置变为-则代表不可读或不可写或不可执行文件。 示例：给aaa.txt文件权限改为可执行文件权限，aaa.txt文件的权限是-rw------- 第一位：-就代表是文件，d代表是文件夹 第一段（3位）：代表拥有者的权限 第二段（3位）：代表拥有者所在的组，组员的权限 第三段（最后3位）：代表的是其他用户的权限 421 421 421 - rw- --- ---\n\n命令：chmod +x aaa.txt\n或者采用8421法\n\n命令：chmod 100 aaa.txt\n\n\n\n# 四、压缩文件操作\n\n\n# 4.1 打包和压缩\n\nwindows的压缩文件的扩展名 .zip/.rar linux中的打包文件：aa.tar\nlinux中的压缩文件：bb.gz\nlinux中打包并压缩的文件：.tar.gz linux中的打包文件一般是以.tar结尾的，压缩的命令一般是以.gz结尾的。 而一般情况下打包和压缩是一起进行的，打包并压缩后的文件的后缀名一般.tar.gz。 命令：tar -zcvf 打包压缩后的文件名 要打包的文件 其中：z：调用gzip压缩命令进行压缩 c：打包文件 v：显示运行过程 f：指定文件名 示例：打包并压缩/usr/tmp 下的所有文件 压缩后的压缩包指定名称为xxx.tar tar -zcvf ab.tar aa.txt bb.txt 或：tar -zcvf ab.tar *\n\n\n# 4.2 解压\n\n命令：tar [-zxvf] 压缩文件\n其中：x：代表解压 示例：将/usr/tmp 下的ab.tar解压到当前目录下 示例：将/usr/tmp 下的ab.tar解压到根目录/usr下 tar -xvf ab.tar -c /usr------c代表指定解压的位置\n\n\n# 五、查找命令\n\n\n# 5.1 grep\n\ngrep命令是一种强大的文本搜索工具 使用实例：\n\nps -ef | grep sshd  查找指定ssh服务进程 \n\nps -ef | grep sshd | grep -v grep 查找指定服务进程，排除gerp身 \n\nps -ef | grep sshd -c 查找指定进程个数 \n\n\n\n# 5.2 find\n\nfind命令在目录结构中搜索文件，并对搜索结果执行指定的操作。 find 默认搜索当前目录及其子目录，并且不过滤任何结果（也就是返回所有文件），将它们全都显示在屏幕上。 使用实例：\n\nfind . -name "*.log" -ls  在当前目录查找以.log结尾的文件，并显示详细信息。 \n\nfind /root/ -perm 600   查找/root/目录下权限为600的文件 \n\nfind . -type f -name "*.log"  查找当目录，以.log结尾的普通文件 \n\nfind . -type d | sort   查找当前所有目录并排序 \n\nfind . -size +100m  查找当前目录大于100m的文件\n\n\n\n# 5.3 locate\n\nlocate 让使用者可以很快速的搜寻某个路径。默认每天自动更新一次，所以使用locate 命令查不到最新变动过的文件。为了避免这种情况，可以在使用locate之前，先使用updatedb命令，手动更新数据库。如果数据库中没有查询的数据，则会报出locate: can not stat () `/var/lib/mlocate/mlocate.db\': no such file or directory该错误！updatedb即可！ yum -y install mlocate 如果是精简版centos系统需要安装locate命令 使用实例：\n\nupdatedb\n\nlocate /etc/sh 搜索etc目录下所有以sh开头的文件 \n\nlocate pwd 查找和pwd相关的所有文件\n\n\n\n# 5.4 whereis\n\nwhereis命令是定位可执行文件、源代码文件、帮助文件在文件系统中的位置。这些文件的属性应属于原始代码，二进制文件，或是帮助文件。 使用实例：\n\nwhereis ls    将和ls文件相关的文件都查找出来\n\n\n\n# 5.5 which\n\nwhich命令的作用是在path变量指定的路径中，搜索某个系统命令的位置，并且返回第一个搜索结果。 使用实例：\n\nwhich pwd  查找pwd命令所在路径 \n\nwhich java  查找path中java的路径 \n\n\n\n# 六、su、sudo\n\n\n# 6.1 su\n\nsu用于用户之间的切换。但是切换前的用户依然保持登录状态。如果是root 向普通或虚拟用户切换不需要密码，反之普通用户切换到其它任何用户都需要密码验证。\n\nsu test:切换到test用户，但是路径还是/root目录\n\nsu - test : 切换到test用户，路径变成了/home/test\n\nsu : 切换到root用户，但是路径还是原来的路径\n\nsu - : 切换到root用户，并且路径是/root\n\n\nsu不足：如果某个用户需要使用root权限、则必须要把root密码告诉此用户。 退出返回之前的用户：exit\n\n\n# 6.2 sudo\n\nsudo是为所有想使用root权限的普通用户设计的。可以让普通用户具有临时使用root权限的权利。只需输入自己账户的密码即可。 进入sudo配置文件命令：\n\nvi /etc/sudoer或者visudo\n案例：\n\n允许hadoop用户以root身份执行各种应用命令，需要输入hadoop用户的密码。\n\nhadoop  all=(all)   all \n\n案例：\n\n只允许hadoop用户以root身份执行ls 、cat命令，并且执行时候免输入密码。 \n\n配置文件中： \n\nhadoop  all=nopasswd:  /bin/ls, /bin/cat \n\n\n\n# 七、系统服务\n\nservice iptables status  --查看iptables服务的状态\nservice iptables start  --开启iptables服务\nservice iptables stop  --停止iptables服务\nservice iptables restart  --重启iptables服务\nchkconfig iptables off  --关闭iptables服务的开机自启动\nchkconfig iptables on  --开启iptables服务的开机自启动\n\n\n\n# 八、网络管理\n\n\n# 8.1 主机名配置\n\n[root@node1 ~]# vi /etc/sysconfig/network\nnetworking=yes\nhostname=node1\n\n\n\n# 8.2 ip 地址配置\n\n[root@node1 ~]# vi /etc/sysconfig/network-scripts/ifcfg-eth0\n[root@localhost sysconfig]# vim /etc/sysconfig/network-scripts/ifcfg-ens33\ntype=ethernet\nproxy_method=none\nbrowser_only=no\nbootproto=static\ndefroute=yes\nipv4_failure_fatal=no\nname=ens33\nname=ens33\nuuid=12037371-f4f9-42fc-8fce-90e429330d0c\ndevice=ens33\nonboot=yes\nipaddr=192.168.48.10\nnetmask=255.255.255.0\ngateway=192.168.48.2\ndns1=114.114.114.114\ndns2=8.8.8.8\n~\n\n\n\n# 8.3 域名映射\n\n/etc/hosts文件用于在通过主机名进行访问时做ip地址解析之用。所以，你想访问一个什么样的主机名，就需要把这个主机名和它对应的ip地址。\n\n[root@node1 ~]# vi /etc/hosts\n#### 在最后加上\n192.168.52.201  node1\n192.168.52.202  node2\n192.168.52.203  node3\n\n\n\n# 九、定时任务指令crontab 配置\n\ncrontab是unix和linux用于设置定时任务的指令。通过crontab命令，可以在固定间隔时间,执行指定的系统指令或shell脚本。时间间隔的单位可以是分钟、小时、日、月、周及以上的任意组合。 crontab安装：\n\nyum install crontabs\n\n\n服务操作说明：\n\nservice crond start   ## 启动服务 \nservice crond stop    ## 关闭服务 \nservice crond restart ## 重启服务\n\n\n\n# 9.1 命令格式\n\ncrontab [-u user] file crontab [-u user] [ -e | -l | -r ] 参数说明： **-u user：**用来设定某个用户的crontab服务\n**file：**file是命令文件的名字,表示将file做为crontab的任务列表文件 并载入crontab。 **-e：**编辑某个用户的crontab文件内容。如果不指定用户，则表示编辑当前 用户的crontab文件。 **-l：**显示某个用户的crontab文件内容。如果不指定用户，则表示显示当前 用户的crontab文件内容。 **-r：**删除定时任务配置，从/var/spool/cron目录中删除某个用户的crontab 文件，如果不指定用户，则默认删除当前用户的crontab文件。 命令示例：\n\ncrontab file [-u user] ## 用指定的文件替代目前的crontab\ncrontab -l [-u user]  ## 列出用户目前的crontab\ncrontab -e [-u user]  ## 编辑用户目前的crontab\n\n\n\n# 9.2 配置说明、实例\n\n命令：* * * * * command\n解释：分 时 日 月 周 命令 第1列表示分钟1～59 每分钟用*或者 */1表示\n第2列表示小时0～23（0表示0点） 第3列表示日期1～31\n第4列表示月份1～12\n第5列标识号星期0～6（0表示星期天）\n第6列要运行的命令 配置实例：\n\n先打开定时任务所在的文件：\ncrontab -e\n每分钟执行一次date命令 \n*/1 * * * * date >> /root/date.txt\n每晚的21:30重启apache。 \n30 21 * * * service httpd restart\n每月1、10、22日的4 : 45重启apache。  \n45 4 1,10,22 * * service httpd restart\n每周六、周日的1 : 10重启apache。 \n10 1 * * 6,0 service httpd restart\n每天18 : 00至23 : 00之间每隔30分钟重启apache。\n0,30   18-23    *   *   *   service httpd restart\n晚上11点到早上7点之间，每隔一小时重启apache\n*  23-7/1    *   *   *   service httpd restart\n\n\n\n# 十、其他命令\n\n\n# 10.1 查看当前目录：pwd\n\n命令：pwd 查看当前目录路径\n\n\n# 10.2 查看进程：ps -ef\n\n命令：ps -ef 查看所有正在运行的进程\n\n\n# 10.3 结束进程：kill\n\n命令：kill pid 或者 kill -9 pid(强制杀死进程) pid:进程号\n\n\n# 10.4 网络通信命令：\n\nifconfig：查看网卡信息 命令：ifconfig 或 ifconfig | more ping：查看与某台机器的连接情况 命令：ping ip netstat -an：查看当前系统端口 命令：netstat -an 搜索指定端口 命令：netstat -an | grep 8080\n\n\n# 10.5 配置网络\n\n命令：setup\n\n\n# 10.6 重启网络\n\n命令：service network restart\n\n\n# 10.7 切换用户\n\n命令：su - 用户名\n\n\n# 10.8 关闭防火墙\n\n命令：chkconfig iptables off 或者：\n\n iptables -l;\n iptables -f;\n service iptables stop\n\n\n\n# 10.9 修改文件权限\n\n命令：chmod 777\n\n\n# 10.10 清屏\n\n命令：ctrl + l\n\n\n# 10.11 vi模式下快捷键\n\nesc后: 保存并退出快捷键：shift+z+z 光标跳到最后一行快捷键：shift+g 删除一行：dd 复制一行内容：y+y 粘贴复制的内容：p',charsets:{cjk:!0},lastUpdated:"2024/04/29, 11:14:33",lastUpdatedTimestamp:1714360473e3},{title:"查看磁盘空间cpu和内存情况",frontmatter:{title:"查看磁盘空间cpu和内存情况",date:"2024-04-16T17:39:03.000Z",permalink:"/pages/6f7a06/"},regularPath:"/01.linux/02.linux%E4%BD%BF%E7%94%A8/03.%E6%9F%A5%E7%9C%8B%E7%A3%81%E7%9B%98%E7%A9%BA%E9%97%B4cpu%E5%92%8C%E5%86%85%E5%AD%98%E6%83%85%E5%86%B5.html",relativePath:"01.linux/02.linux使用/03.查看磁盘空间cpu和内存情况.md",key:"v-6d09a66b",path:"/pages/6f7a06/",headersStr:null,content:"# 查看磁盘空间(查看硬盘占用)\n\n#查看磁盘空间大小\ndf -h\n\n#查看当前文件夹所有文件大小\ndu -sh\n\n#查看指定文件夹大小\ndu -h /data\n\n#查看指定文件夹下所有文件的大小\ndu -h /data/\n\n#查看指定文件大小\ndu -h data.log查看目录挂载点df /data加上-kh以g单位显示df /data -kh\n\n\n查看cpu\n\ntop\n\n查看内存\n\nfree -h",normalizedContent:"# 查看磁盘空间(查看硬盘占用)\n\n#查看磁盘空间大小\ndf -h\n\n#查看当前文件夹所有文件大小\ndu -sh\n\n#查看指定文件夹大小\ndu -h /data\n\n#查看指定文件夹下所有文件的大小\ndu -h /data/\n\n#查看指定文件大小\ndu -h data.log查看目录挂载点df /data加上-kh以g单位显示df /data -kh\n\n\n查看cpu\n\ntop\n\n查看内存\n\nfree -h",charsets:{cjk:!0},lastUpdated:"2024/04/29, 11:14:33",lastUpdatedTimestamp:1714360473e3},{title:"java安装",frontmatter:{title:"java安装",date:"2024-04-16T17:39:03.000Z",permalink:"/pages/974661/"},regularPath:"/01.linux/02.linux%E4%BD%BF%E7%94%A8/05.java%E5%AE%89%E8%A3%85.html",relativePath:"01.linux/02.linux使用/05.java安装.md",key:"v-4ad90504",path:"/pages/974661/",headersStr:null,content:'# CentOS7安装JDK11\n\n第一步：肯定是下载jdk，我下载的是".tar.gz"格式的文件。然后传到合适的地址上。\n\n第二步：解压jdk的安装包，"tar -zxvf jdk-11_linux-x64_bin.tar.gz" 之后就看到当前目录下多了一个jdk-11的文件；\n\n\n\n第三步: 运行 vim /etc/profile 命令\n\n在文件的末尾处添加上一下内容：\n\n#java environment\nexport JAVA_HOME=/home/jdk-11.0.11\nexport CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar\nexport PATH=$PATH:$JAVA_HOME/bin\n\n\n\n\n第四步：使配置文件生效 ：\n\nsource /etc/profile\n\n\n第五步：运行java -version 出现以下信息，就成功了\n\njava -version\n\n\n',normalizedContent:'# centos7安装jdk11\n\n第一步：肯定是下载jdk，我下载的是".tar.gz"格式的文件。然后传到合适的地址上。\n\n第二步：解压jdk的安装包，"tar -zxvf jdk-11_linux-x64_bin.tar.gz" 之后就看到当前目录下多了一个jdk-11的文件；\n\n\n\n第三步: 运行 vim /etc/profile 命令\n\n在文件的末尾处添加上一下内容：\n\n#java environment\nexport java_home=/home/jdk-11.0.11\nexport classpath=.:$java_home/lib/dt.jar:$java_home/lib/tools.jar\nexport path=$path:$java_home/bin\n\n\n\n\n第四步：使配置文件生效 ：\n\nsource /etc/profile\n\n\n第五步：运行java -version 出现以下信息，就成功了\n\njava -version\n\n\n',charsets:{cjk:!0},lastUpdated:"2024/04/29, 11:14:33",lastUpdatedTimestamp:1714360473e3},{title:"往文件内写数据",frontmatter:{title:"往文件内写数据",date:"2024-04-16T17:39:03.000Z",permalink:"/pages/bd4244/"},regularPath:"/01.linux/02.linux%E4%BD%BF%E7%94%A8/04.%E5%BE%80%E6%96%87%E4%BB%B6%E5%86%85%E5%86%99%E6%95%B0%E6%8D%AE.html",relativePath:"01.linux/02.linux使用/04.往文件内写数据.md",key:"v-39cba1eb",path:"/pages/bd4244/",headersStr:null,content:"Linux中，在一个文件中写入内容，可以vim打开编辑模式，输入我们想要的内容，此次我们使用echo命令\n\n来在一个文件夹中写入内容。\n\necho命令：\n\n第一种：\n\necho 'i love u' >a.txt  *在a.txt这个文件中输入i love u，如果没有这个文件则创建。如果有这个文件，那么\n新内容代替原来的内容。\n\n\n第二种：\n\necho 'i love u' >>a.txt  *在a.txt这个文件中输入i love u，如果没有这个文件则创建.如果有这个文件，那么\n新内容添加在原来内容的后面\n",normalizedContent:"linux中，在一个文件中写入内容，可以vim打开编辑模式，输入我们想要的内容，此次我们使用echo命令\n\n来在一个文件夹中写入内容。\n\necho命令：\n\n第一种：\n\necho 'i love u' >a.txt  *在a.txt这个文件中输入i love u，如果没有这个文件则创建。如果有这个文件，那么\n新内容代替原来的内容。\n\n\n第二种：\n\necho 'i love u' >>a.txt  *在a.txt这个文件中输入i love u，如果没有这个文件则创建.如果有这个文件，那么\n新内容添加在原来内容的后面\n",charsets:{cjk:!0},lastUpdated:"2024/04/29, 11:14:33",lastUpdatedTimestamp:1714360473e3},{title:"shell脚本",frontmatter:{title:"shell脚本",date:"2024-04-16T17:39:03.000Z",permalink:"/pages/ee5e94/"},regularPath:"/01.linux/02.linux%E4%BD%BF%E7%94%A8/06.shell%E8%84%9A%E6%9C%AC.html",relativePath:"01.linux/02.linux使用/06.shell脚本.md",key:"v-ee33d822",path:"/pages/ee5e94/",headersStr:null,content:"文件添加运行权限\n\nchmod +x 文件名\n\n\nhttps://blog.csdn.net/qq_36119192/article/details/82964713",normalizedContent:"文件添加运行权限\n\nchmod +x 文件名\n\n\nhttps://blog.csdn.net/qq_36119192/article/details/82964713",charsets:{cjk:!0},lastUpdated:"2024/04/29, 11:14:33",lastUpdatedTimestamp:1714360473e3},{title:"shell脚本dome",frontmatter:{title:"shell脚本dome",date:"2024-04-16T17:39:03.000Z",permalink:"/pages/7a89d1/"},regularPath:"/01.linux/02.linux%E4%BD%BF%E7%94%A8/07.shell%E8%84%9A%E6%9C%ACdome.html",relativePath:"01.linux/02.linux使用/07.shell脚本dome.md",key:"v-53e17527",path:"/pages/7a89d1/",headers:[{level:2,title:"1.docker容器jar包更新并备份",slug:"_1-docker容器jar包更新并备份",normalizedTitle:"1.docker容器jar包更新并备份",charIndex:2},{level:2,title:"2.回滚（与1配合使用）",slug:"_2-回滚-与1配合使用",normalizedTitle:"2.回滚（与1配合使用）",charIndex:1026},{level:2,title:"3.http健康检测",slug:"_3-http健康检测",normalizedTitle:"3.http健康检测",charIndex:1865}],headersStr:"1.docker容器jar包更新并备份 2.回滚（与1配合使用） 3.http健康检测",content:'# 1.docker容器jar包更新并备份\n\n#!/bin/bash\n\n\n#老文件备份名\ndd=`date +%Y-%m-%d-%H-%M-%S`\n\n#工作目录\nwork_dir=/opt/java\n#备份目录\nbackups_dir=/opt/java/backups\n\n#新文件\nnew_file=$work_dir/supply-chain-dev.jar\n\n#日志\nlog_file=/root/updateService/updateService.log\n\n#保存备份个数，备份31天数据\nnumber=31\n\n#docker容器\ndocker_container=supply-chain-service\n\n#保证文件存在\nif [[ -e $work_dir/app.jar && -e $new_file ]]\nthen\n        echo "开始更新系统"\n\t#备份老文件\n\techo "备份老文件"\n\tmv $work_dir/app.jar $backups_dir/$dd.jar\n\t#新文件改名\n\techo "新文件改名"\n\tmv $new_file $work_dir/app.jar\n\n\t#判断现在的备份数量是否大于$number\n\tcount=`ls -l -crt $backups_dir/*.jar | wc -l`\n\n\tif [ $count -gt $number ]\n\tthen\n\t\t#找出需要删除的备份\n        \tdelfile=`ls -l -crt $backups_dir/*.jar | awk \'{print $9 }\' | head -1`\n        \t#删除最早生成的备份，只保留number数量的备份\n        \trm $delfile\n        \t#写删除文件日志\n\t\techo "删除文件: ${delfile}"\n\t\techo "$(date "+%Y-%m-%d %H:%M:%S") 删除文件: ${delfile}">>${log_file}\nfi\n\n\n\techo "重启系统"\n\tdocker restart  ${docker_container}\n\techo "打印日志"\n\tdocker logs -f  --tail 200 ${docker_container}\nelse\n        echo "条件不满足"\nfi\n\n\n\n# 2.回滚（与1配合使用）\n\n#!/bin/bash\n\n#工作目录\nwork_dir=/opt/java\n#备份目录\nbackups_dir=/opt/java/backups\n#日志文件\nlog_file=/root/rollback.log\n#docker容器\ndocker_container=supply-chain-service\n\n\nold_file=${backups_dir}/$(ls -Art $backups_dir | tail -n 1)\necho "$(date "+%Y-%m-%d %H:%M:%S")删除当前文件${work_dir}/app.jar"\necho "$(date "+%Y-%m-%d %H:%M:%S")删除当前文件${work_dir}/app.jar">>${log_file}\nrm -f $work_dir/app.jar\necho "$(date "+%Y-%m-%d %H:%M:%S")复制文件${old_file}到${work_dir}/app.jar"\necho "$(date "+%Y-%m-%d %H:%M:%S")复制文件${old_file}到${work_dir}/app.jar">>${log_file}\ncp $backups_dir/$(ls -Art $backups_dir | tail -n 1) /opt/java/app.jar\necho "$(date "+%Y-%m-%d %H:%M:%S")重新启动服务"\necho "$(date "+%Y-%m-%d %H:%M:%S")重新启动服务">>${log_file}\ndocker restart ${docker_container}\necho "$(date "+%Y-%m-%d %H:%M:%S")查看日志"\ndocker logs -f --tail 200 ${docker_container}\n\n\n\n# 3.http健康检测\n\n#!/bin/bash\n\n#日志保存位置\nlog_url=/root/heartbeat.log\n#异常日志位置\nerror_log_url=/root/heartbeat_error.log\n\n#请求地址\nurl=http://127.0.0.1:8080/tdd/v1/heartbeat/inspection\n#请求超时时间 单位秒\ntime_out=3 \n#请求间隔时间 单位秒\ninterval_time=60\n#系统准备时间 单位秒\nreadiness_time=120\n#docker容器\ndocker_container=supply-chain-service\nwhile true\ndo\n        resp=$(curl -i -m ${time_out} -o /dev/null -s -w %{http_code} $url)\n        if test $resp -ge 200 && test $resp -le 399\n        then\n                echo "$(date "+%Y-%m-%d %H:%M:%S") ${url} successful" >> ${log_url}\n                sleep ${interval_time}s\n        else\n                echo "$(date "+%Y-%m-%d %H:%M:%S") ${url} failed" >> ${log_url}\n                echo "$(date "+%Y-%m-%d %H:%M:%S") ${url} failed" >> ${error_log_url}\n                echo "$(date "+%Y-%m-%d %H:%M:%S") 重启系统" >> ${log_url}\n                echo "$(date "+%Y-%m-%d %H:%M:%S") 重启系统" >> ${error_log_url}\n                docker restart ${docker_container}\n                sleep ${readiness_time}s\n        fi\n\ndone\n\n\n3.1使用 nohup 命令：nohup 命令可以忽略挂起信号（SIGHUP），允许程序在终端关闭后继续在后台运行。\n\n使用 nohup 会生成一个 nohup.out文件,该文件会保存执行中的输出\n\nnohup xxx.sh &\n',normalizedContent:'# 1.docker容器jar包更新并备份\n\n#!/bin/bash\n\n\n#老文件备份名\ndd=`date +%y-%m-%d-%h-%m-%s`\n\n#工作目录\nwork_dir=/opt/java\n#备份目录\nbackups_dir=/opt/java/backups\n\n#新文件\nnew_file=$work_dir/supply-chain-dev.jar\n\n#日志\nlog_file=/root/updateservice/updateservice.log\n\n#保存备份个数，备份31天数据\nnumber=31\n\n#docker容器\ndocker_container=supply-chain-service\n\n#保证文件存在\nif [[ -e $work_dir/app.jar && -e $new_file ]]\nthen\n        echo "开始更新系统"\n\t#备份老文件\n\techo "备份老文件"\n\tmv $work_dir/app.jar $backups_dir/$dd.jar\n\t#新文件改名\n\techo "新文件改名"\n\tmv $new_file $work_dir/app.jar\n\n\t#判断现在的备份数量是否大于$number\n\tcount=`ls -l -crt $backups_dir/*.jar | wc -l`\n\n\tif [ $count -gt $number ]\n\tthen\n\t\t#找出需要删除的备份\n        \tdelfile=`ls -l -crt $backups_dir/*.jar | awk \'{print $9 }\' | head -1`\n        \t#删除最早生成的备份，只保留number数量的备份\n        \trm $delfile\n        \t#写删除文件日志\n\t\techo "删除文件: ${delfile}"\n\t\techo "$(date "+%y-%m-%d %h:%m:%s") 删除文件: ${delfile}">>${log_file}\nfi\n\n\n\techo "重启系统"\n\tdocker restart  ${docker_container}\n\techo "打印日志"\n\tdocker logs -f  --tail 200 ${docker_container}\nelse\n        echo "条件不满足"\nfi\n\n\n\n# 2.回滚（与1配合使用）\n\n#!/bin/bash\n\n#工作目录\nwork_dir=/opt/java\n#备份目录\nbackups_dir=/opt/java/backups\n#日志文件\nlog_file=/root/rollback.log\n#docker容器\ndocker_container=supply-chain-service\n\n\nold_file=${backups_dir}/$(ls -art $backups_dir | tail -n 1)\necho "$(date "+%y-%m-%d %h:%m:%s")删除当前文件${work_dir}/app.jar"\necho "$(date "+%y-%m-%d %h:%m:%s")删除当前文件${work_dir}/app.jar">>${log_file}\nrm -f $work_dir/app.jar\necho "$(date "+%y-%m-%d %h:%m:%s")复制文件${old_file}到${work_dir}/app.jar"\necho "$(date "+%y-%m-%d %h:%m:%s")复制文件${old_file}到${work_dir}/app.jar">>${log_file}\ncp $backups_dir/$(ls -art $backups_dir | tail -n 1) /opt/java/app.jar\necho "$(date "+%y-%m-%d %h:%m:%s")重新启动服务"\necho "$(date "+%y-%m-%d %h:%m:%s")重新启动服务">>${log_file}\ndocker restart ${docker_container}\necho "$(date "+%y-%m-%d %h:%m:%s")查看日志"\ndocker logs -f --tail 200 ${docker_container}\n\n\n\n# 3.http健康检测\n\n#!/bin/bash\n\n#日志保存位置\nlog_url=/root/heartbeat.log\n#异常日志位置\nerror_log_url=/root/heartbeat_error.log\n\n#请求地址\nurl=http://127.0.0.1:8080/tdd/v1/heartbeat/inspection\n#请求超时时间 单位秒\ntime_out=3 \n#请求间隔时间 单位秒\ninterval_time=60\n#系统准备时间 单位秒\nreadiness_time=120\n#docker容器\ndocker_container=supply-chain-service\nwhile true\ndo\n        resp=$(curl -i -m ${time_out} -o /dev/null -s -w %{http_code} $url)\n        if test $resp -ge 200 && test $resp -le 399\n        then\n                echo "$(date "+%y-%m-%d %h:%m:%s") ${url} successful" >> ${log_url}\n                sleep ${interval_time}s\n        else\n                echo "$(date "+%y-%m-%d %h:%m:%s") ${url} failed" >> ${log_url}\n                echo "$(date "+%y-%m-%d %h:%m:%s") ${url} failed" >> ${error_log_url}\n                echo "$(date "+%y-%m-%d %h:%m:%s") 重启系统" >> ${log_url}\n                echo "$(date "+%y-%m-%d %h:%m:%s") 重启系统" >> ${error_log_url}\n                docker restart ${docker_container}\n                sleep ${readiness_time}s\n        fi\n\ndone\n\n\n3.1使用 nohup 命令：nohup 命令可以忽略挂起信号（sighup），允许程序在终端关闭后继续在后台运行。\n\n使用 nohup 会生成一个 nohup.out文件,该文件会保存执行中的输出\n\nnohup xxx.sh &\n',charsets:{cjk:!0},lastUpdated:"2024/04/29, 11:14:33",lastUpdatedTimestamp:1714360473e3},{title:"docker安装",frontmatter:{title:"docker安装",date:"2024-04-16T17:53:11.000Z",permalink:"/pages/e29cdb/"},regularPath:"/02.docker/01.%E5%AE%89%E8%A3%85/01.docker%E5%AE%89%E8%A3%85.html",relativePath:"02.docker/01.安装/01.docker安装.md",key:"v-2a3585a3",path:"/pages/e29cdb/",headersStr:null,content:'# Docker\n\nDocker从1.13版本之后采用时间线的方式作为版本号，分为社区版CE和企业版EE。\n\n社区版是免费提供给个人开发者和小型团体使用的，企业版会提供额外的收费服务，比如经过官方测试认证过的基础设施、容器、插件等。\n\n社区版按照stable和edge两种方式发布，每个季度更新stable版本，如17.06，17.09；每个月份更新edge版本，如17.09，17.10。\n\n\n# 一、安装docker\n\n1、Docker 要求 CentOS 系统的内核版本高于 3.10 ，查看本页面的前提条件来验证你的CentOS 版本是否支持 Docker 。\n\n通过 uname -r 命令查看你当前的内核版本\n\nuname -r\n\n\n2、使用 root 权限登录 Centos。确保 yum 包更新到最新。\n\nyum update\n\n\n3、卸载旧版本(如果安装过旧版本的话)\n\nyum remove docker  docker-common docker-selinux docker-engine\n\n\n4、安装需要的软件包， yum-util 提供yum-config-manager功能，另外两个是devicemapper驱动依赖的\n\nyum install -y yum-utils device-mapper-persistent-data lvm2\n\n\n5、设置yum源\n\nyum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo\n\n\n\n\n更新yum缓存\n\n\n\nyum makecache fast\n\n\n6、可以查看所有仓库中所有docker版本，并选择特定版本安装\n\nyum list docker-ce --showduplicates | sort -r\n\n\n\n\n7、安装docker\n\nyum install docker-ce  #由于repo中默认只开启stable仓库，故这里安装的是最新稳定版17.12.0\nyum install <FQPN>  # 例如：sudo yum install docker-ce-17.12.0.ce\n\n\n\n\n8、启动并加入开机启动\n\nsystemctl start docker\nsystemctl enable docker\n\n\n9、验证安装是否成功(有client和service两部分表示docker安装启动都成功了)\n\ndocker version\n\n\n\n\n\n# 二、问题\n\n1、因为之前已经安装过旧版本的docker，在安装的时候报错如下：\n\nTransaction check error:\n  file /usr/bin/docker from install of docker-ce-17.12.0.ce-1.el7.centos.x86_64 conflicts with file from package docker-common-2:1.12.6-68.gitec8512b.el7.centos.x86_64\n  file /usr/bin/docker-containerd from install of docker-ce-17.12.0.ce-1.el7.centos.x86_64 conflicts with file from package docker-common-2:1.12.6-68.gitec8512b.el7.centos.x86_64\n  file /usr/bin/docker-containerd-shim from install of docker-ce-17.12.0.ce-1.el7.centos.x86_64 conflicts with file from package docker-common-2:1.12.6-68.gitec8512b.el7.centos.x86_64\n  file /usr/bin/dockerd from install of docker-ce-17.12.0.ce-1.el7.centos.x86_64 conflicts with file from package docker-common-2:1.12.6-68.gitec8512b.el7.centos.x86_64\n\n\n2、卸载旧版本的包\n\nyum erase docker-common-2:1.12.6-68.gitec8512b.el7.centos.x86_64\n\n\n\n\n3、再次安装docker\n\nyum install docker-ce\n\n\nhttps://www.cnblogs.com/yufeng218/p/8370670.html\n\n\n# 三、设置阿里云镜像加速和日志配置\n\nsudo mkdir -p /etc/docker\nsudo tee /etc/docker/daemon.json <<-\'EOF\'\n{\n  "registry-mirrors": ["https://8dqfgjuq.mirror.aliyuncs.com"],\n  "log-driver":"json-file",\n  "log-opts": {"max-size":"100m", "max-file":"50"}\n}\nEOF\nsudo systemctl daemon-reload\nsudo systemctl restart docker\n',normalizedContent:'# docker\n\ndocker从1.13版本之后采用时间线的方式作为版本号，分为社区版ce和企业版ee。\n\n社区版是免费提供给个人开发者和小型团体使用的，企业版会提供额外的收费服务，比如经过官方测试认证过的基础设施、容器、插件等。\n\n社区版按照stable和edge两种方式发布，每个季度更新stable版本，如17.06，17.09；每个月份更新edge版本，如17.09，17.10。\n\n\n# 一、安装docker\n\n1、docker 要求 centos 系统的内核版本高于 3.10 ，查看本页面的前提条件来验证你的centos 版本是否支持 docker 。\n\n通过 uname -r 命令查看你当前的内核版本\n\nuname -r\n\n\n2、使用 root 权限登录 centos。确保 yum 包更新到最新。\n\nyum update\n\n\n3、卸载旧版本(如果安装过旧版本的话)\n\nyum remove docker  docker-common docker-selinux docker-engine\n\n\n4、安装需要的软件包， yum-util 提供yum-config-manager功能，另外两个是devicemapper驱动依赖的\n\nyum install -y yum-utils device-mapper-persistent-data lvm2\n\n\n5、设置yum源\n\nyum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo\n\n\n\n\n更新yum缓存\n\n\n\nyum makecache fast\n\n\n6、可以查看所有仓库中所有docker版本，并选择特定版本安装\n\nyum list docker-ce --showduplicates | sort -r\n\n\n\n\n7、安装docker\n\nyum install docker-ce  #由于repo中默认只开启stable仓库，故这里安装的是最新稳定版17.12.0\nyum install <fqpn>  # 例如：sudo yum install docker-ce-17.12.0.ce\n\n\n\n\n8、启动并加入开机启动\n\nsystemctl start docker\nsystemctl enable docker\n\n\n9、验证安装是否成功(有client和service两部分表示docker安装启动都成功了)\n\ndocker version\n\n\n\n\n\n# 二、问题\n\n1、因为之前已经安装过旧版本的docker，在安装的时候报错如下：\n\ntransaction check error:\n  file /usr/bin/docker from install of docker-ce-17.12.0.ce-1.el7.centos.x86_64 conflicts with file from package docker-common-2:1.12.6-68.gitec8512b.el7.centos.x86_64\n  file /usr/bin/docker-containerd from install of docker-ce-17.12.0.ce-1.el7.centos.x86_64 conflicts with file from package docker-common-2:1.12.6-68.gitec8512b.el7.centos.x86_64\n  file /usr/bin/docker-containerd-shim from install of docker-ce-17.12.0.ce-1.el7.centos.x86_64 conflicts with file from package docker-common-2:1.12.6-68.gitec8512b.el7.centos.x86_64\n  file /usr/bin/dockerd from install of docker-ce-17.12.0.ce-1.el7.centos.x86_64 conflicts with file from package docker-common-2:1.12.6-68.gitec8512b.el7.centos.x86_64\n\n\n2、卸载旧版本的包\n\nyum erase docker-common-2:1.12.6-68.gitec8512b.el7.centos.x86_64\n\n\n\n\n3、再次安装docker\n\nyum install docker-ce\n\n\nhttps://www.cnblogs.com/yufeng218/p/8370670.html\n\n\n# 三、设置阿里云镜像加速和日志配置\n\nsudo mkdir -p /etc/docker\nsudo tee /etc/docker/daemon.json <<-\'eof\'\n{\n  "registry-mirrors": ["https://8dqfgjuq.mirror.aliyuncs.com"],\n  "log-driver":"json-file",\n  "log-opts": {"max-size":"100m", "max-file":"50"}\n}\neof\nsudo systemctl daemon-reload\nsudo systemctl restart docker\n',charsets:{cjk:!0},lastUpdated:"2024/04/29, 11:14:33",lastUpdatedTimestamp:1714360473e3},{title:"docker自动清理日志",frontmatter:{title:"docker自动清理日志",date:"2024-04-16T17:53:11.000Z",permalink:"/pages/813dae/"},regularPath:"/02.docker/01.%E5%AE%89%E8%A3%85/02.docker%E8%87%AA%E5%8A%A8%E6%B8%85%E7%90%86%E6%97%A5%E5%BF%97.html",relativePath:"02.docker/01.安装/02.docker自动清理日志.md",key:"v-d8969a0a",path:"/pages/813dae/",headers:[{level:3,title:"一：/etc/docker文件下新建文件daemon.json",slug:"一-etc-docker文件下新建文件daemon-json",normalizedTitle:"一：/etc/docker文件下新建文件daemon.json",charIndex:2},{level:3,title:"二：重启docker",slug:"二-重启docker",normalizedTitle:"二：重启docker",charIndex:234}],headersStr:"一：/etc/docker文件下新建文件daemon.json 二：重启docker",content:'# 一：/etc/docker文件下新建文件daemon.json\n\n{\n  "registry-mirrors": ["https://8dqfgjuq.mirror.aliyuncs.com"],\n  "log-driver":"json-file",\n  "log-opts": {"max-size":"100m", "max-file":"50"}\n}\n\n\n表示docker容器运行时，每个日志文件的最大为100m，每个容器最多保留50个日志文件。\n\n\n# 二：重启docker\n\nsystemctl restart docker \n\n\n注意：只对设置后创建的容器起作用',normalizedContent:'# 一：/etc/docker文件下新建文件daemon.json\n\n{\n  "registry-mirrors": ["https://8dqfgjuq.mirror.aliyuncs.com"],\n  "log-driver":"json-file",\n  "log-opts": {"max-size":"100m", "max-file":"50"}\n}\n\n\n表示docker容器运行时，每个日志文件的最大为100m，每个容器最多保留50个日志文件。\n\n\n# 二：重启docker\n\nsystemctl restart docker \n\n\n注意：只对设置后创建的容器起作用',charsets:{cjk:!0},lastUpdated:"2024/04/29, 11:14:33",lastUpdatedTimestamp:1714360473e3},{title:"run命令详解",frontmatter:{title:"run命令详解",date:"2024-04-16T17:53:11.000Z",permalink:"/pages/53bb04/"},regularPath:"/02.docker/02.%E5%91%BD%E4%BB%A4/02.run%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3.html",relativePath:"02.docker/02.命令/02.run命令详解.md",key:"v-47e66a74",path:"/pages/53bb04/",headers:[{level:3,title:"docker run常用命令",slug:"docker-run常用命令",normalizedTitle:"docker run常用命令",charIndex:2},{level:4,title:"1.OPTIONS说明",slug:"_1-options说明",normalizedTitle:"1.options说明",charIndex:100},{level:4,title:"2.使用docker镜像tomcat:latest以后台模式启动一个容器,并将容器命名为mytomcat",slug:"_2-使用docker镜像tomcat-latest以后台模式启动一个容器-并将容器命名为mytomcat",normalizedTitle:"2.使用docker镜像tomcat:latest以后台模式启动一个容器,并将容器命名为mytomcat",charIndex:299},{level:4,title:"3.使用镜像tomcat:latest以后台模式启动一个容器,并将容器的8080端口映射到宿主机的8080端口。",slug:"_3-使用镜像tomcat-latest以后台模式启动一个容器-并将容器的8080端口映射到宿主机的8080端口。",normalizedTitle:"3.使用镜像tomcat:latest以后台模式启动一个容器,并将容器的8080端口映射到宿主机的8080端口。",charIndex:403},{level:4,title:"4.使用镜像tomcat:latest以后台模式启动一个容器,并将容器的8080端口映射到宿主机的8080端口,主机的目录 /home 映射到容器的 /home",slug:"_4-使用镜像tomcat-latest以后台模式启动一个容器-并将容器的8080端口映射到宿主机的8080端口-主机的目录-home-映射到容器的-home",normalizedTitle:"4.使用镜像tomcat:latest以后台模式启动一个容器,并将容器的8080端口映射到宿主机的8080端口,主机的目录 /home 映射到容器的 /home",charIndex:524},{level:4,title:"5.使用镜像tomcat:latest启动一个容器,在容器内执行/bin/bash命令。",slug:"_5-使用镜像tomcat-latest启动一个容器-在容器内执行-bin-bash命令。",normalizedTitle:"5.使用镜像tomcat:latest启动一个容器,在容器内执行/bin/bash命令。",charIndex:684}],headersStr:"docker run常用命令 1.OPTIONS说明 2.使用docker镜像tomcat:latest以后台模式启动一个容器,并将容器命名为mytomcat 3.使用镜像tomcat:latest以后台模式启动一个容器,并将容器的8080端口映射到宿主机的8080端口。 4.使用镜像tomcat:latest以后台模式启动一个容器,并将容器的8080端口映射到宿主机的8080端口,主机的目录 /home 映射到容器的 /home 5.使用镜像tomcat:latest启动一个容器,在容器内执行/bin/bash命令。",content:"# docker run常用命令\n\ndocker run :创建一个新的容器并运行一个命令\n\n语法：docker run [OPTIONS] IMAGE [COMMAND] [ARG...]\n\n\n# 1.OPTIONS说明\n\n-t:为容器重新分配一个伪输入终端，通常与 -i 同时使用\n-i:以交互模式运行容器，通常与 -t 同时使用\n-d:后台运行容器，并返回容器ID\n--name:为容器指定一个名称\n-p:端口映射，格式为：主机(宿主)端口:容器端口\n-v:\t挂载宿主机文件夹，格式为： 宿主机文件夹：容器文件夹\n--link: 添加链接到另一个容器\n-m:设置容器使用内存最大值；\n\n\n# 2.使用docker镜像tomcat:latest以后台模式启动一个容器,并将容器命名为mytomcat\n\ndocker run -tid --name mytomcat tomcat:latest\n\n\n# 3.使用镜像tomcat:latest以后台模式启动一个容器,并将容器的8080端口映射到宿主机的8080端口。\n\ndocker run -tid --name mytomcat -p 8080:8080 tomcat:latest\n\n\n# 4.使用镜像tomcat:latest以后台模式启动一个容器,并将容器的8080端口映射到宿主机的8080端口,主机的目录 /home 映射到容器的 /home\n\ndocker run -tid --name mytomcat -p 8080:8080 -v /home:/home tomcat:latest\n\n\n# 5.使用镜像tomcat:latest启动一个容器,在容器内执行/bin/bash命令。\n\ndocker run -it tomcat:latest /bin/bash\n",normalizedContent:"# docker run常用命令\n\ndocker run :创建一个新的容器并运行一个命令\n\n语法：docker run [options] image [command] [arg...]\n\n\n# 1.options说明\n\n-t:为容器重新分配一个伪输入终端，通常与 -i 同时使用\n-i:以交互模式运行容器，通常与 -t 同时使用\n-d:后台运行容器，并返回容器id\n--name:为容器指定一个名称\n-p:端口映射，格式为：主机(宿主)端口:容器端口\n-v:\t挂载宿主机文件夹，格式为： 宿主机文件夹：容器文件夹\n--link: 添加链接到另一个容器\n-m:设置容器使用内存最大值；\n\n\n# 2.使用docker镜像tomcat:latest以后台模式启动一个容器,并将容器命名为mytomcat\n\ndocker run -tid --name mytomcat tomcat:latest\n\n\n# 3.使用镜像tomcat:latest以后台模式启动一个容器,并将容器的8080端口映射到宿主机的8080端口。\n\ndocker run -tid --name mytomcat -p 8080:8080 tomcat:latest\n\n\n# 4.使用镜像tomcat:latest以后台模式启动一个容器,并将容器的8080端口映射到宿主机的8080端口,主机的目录 /home 映射到容器的 /home\n\ndocker run -tid --name mytomcat -p 8080:8080 -v /home:/home tomcat:latest\n\n\n# 5.使用镜像tomcat:latest启动一个容器,在容器内执行/bin/bash命令。\n\ndocker run -it tomcat:latest /bin/bash\n",charsets:{cjk:!0},lastUpdated:"2024/04/29, 11:14:33",lastUpdatedTimestamp:1714360473e3},{title:"docker容器开机自动启动",frontmatter:{title:"docker容器开机自动启动",date:"2024-04-16T17:53:11.000Z",permalink:"/pages/918bcc/"},regularPath:"/02.docker/02.%E5%91%BD%E4%BB%A4/03.docker%E5%AE%B9%E5%99%A8%E5%BC%80%E6%9C%BA%E8%87%AA%E5%8A%A8%E5%90%AF%E5%8A%A8.html",relativePath:"02.docker/02.命令/03.docker容器开机自动启动.md",key:"v-77125a1f",path:"/pages/918bcc/",headers:[{level:3,title:"创建容器时",slug:"创建容器时",normalizedTitle:"创建容器时",charIndex:2},{level:3,title:"容器已经创建后",slug:"容器已经创建后",normalizedTitle:"容器已经创建后",charIndex:252}],headersStr:"创建容器时 容器已经创建后",content:"# 创建容器时\n\ndocker run --restart=always \n\n\n--restart具体参数值详细信息：\n\nno - 容器退出时，不重启容器；\n\non-failure - 只有在非0状态退出时才从新启动容器；\n\nalways - 无论退出状态是如何，都重启容器；\n\n还可以在使用on - failure策略时，指定Docker将尝试重新启动容器的最大次数。默认情况下，Docker将尝试永远重新启动容器。\n\ndocker run --restart=on-failure:10 \n\n\n\n# 容器已经创建后\n\ndocker update --restart=always 容器id/容器名\n",normalizedContent:"# 创建容器时\n\ndocker run --restart=always \n\n\n--restart具体参数值详细信息：\n\nno - 容器退出时，不重启容器；\n\non-failure - 只有在非0状态退出时才从新启动容器；\n\nalways - 无论退出状态是如何，都重启容器；\n\n还可以在使用on - failure策略时，指定docker将尝试重新启动容器的最大次数。默认情况下，docker将尝试永远重新启动容器。\n\ndocker run --restart=on-failure:10 \n\n\n\n# 容器已经创建后\n\ndocker update --restart=always 容器id/容器名\n",charsets:{cjk:!0},lastUpdated:"2024/04/29, 11:14:33",lastUpdatedTimestamp:1714360473e3},{title:"docker命令",frontmatter:{title:"docker命令",date:"2024-04-16T17:55:16.000Z",permalink:"/pages/2d8481/"},regularPath:"/02.docker/02.%E5%91%BD%E4%BB%A4/01.docker%E5%91%BD%E4%BB%A4.html",relativePath:"02.docker/02.命令/01.docker命令.md",key:"v-95f7aaaa",path:"/pages/2d8481/",headers:[{level:2,title:"常用命令",slug:"常用命令",normalizedTitle:"常用命令",charIndex:2},{level:3,title:"帮助命令",slug:"帮助命令",normalizedTitle:"帮助命令",charIndex:11},{level:3,title:"镜像命令",slug:"镜像命令",normalizedTitle:"镜像命令",charIndex:123},{level:3,title:"容器命令",slug:"容器命令",normalizedTitle:"容器命令",charIndex:475},{level:5,title:"",slug:"",normalizedTitle:"",charIndex:0},{level:3,title:"查看日志",slug:"查看日志",normalizedTitle:"查看日志",charIndex:1735},{level:3,title:"进入容器",slug:"进入容器",normalizedTitle:"进入容器",charIndex:1884},{level:2,title:"高级命令",slug:"高级命令",normalizedTitle:"高级命令",charIndex:2061}],headersStr:"常用命令 帮助命令 镜像命令 容器命令  查看日志 进入容器 高级命令",content:'# 常用命令\n\n\n# 帮助命令\n\ndocker version    #显示docker的版本信息。\ndocker info       #显示docker的系统信息，包括镜像和容器的数量\ndocker 命令 --help #帮助命令\n\n\n\n# 镜像命令\n\ndocker pull ${CONTAINER NAME}                    #拉取镜像\ndocker images                                    #查看本地所有镜像\ndocker rmi ${IMAGE NAME/ID}                      #删除镜像\ndocker rmi -f ${IMAGE NAME/ID}                   #删除镜像\ndocker save ${IMAGE NAME} > ${FILE NAME}.tar     #将镜像保存成文件\ndocker load < ${FILE NAME}.tar                   #从文件加载镜像\n\n\n\n# 容器命令\n\ndocker run...                                         #运行一个容器\n    --name ${container name}                          #设置容器名称\n    -p ${host port}:${container port}                 #映射主机和容器内的端口\n    -e ${env name}=${env value}                       #添加环境变量\n    -d                                                #后台运行\n    -v ${host folder path}:${container folder path}   #将主机目录挂在到容器内\ndocker start ${CONTAINER NAME/ID}                     #运行一个以前运行过的容器\ndocker restart ${CONTAINER NAME/ID}                   #重启正在运行的容器\ndocker stop ${CONTAINER NAME/ID}                      #停止一个正在运行的容器\ndocker logs ${CONTAINER NAME/ID}                      #显示运行容器的日志\ndocker ps                                             #列出当前正在运行的容器\n    -a, --all                                           #显示所有容器(默认显示正在运行)\n    -n, --last int                                      #显示最近创建的容器(包括所有状态)(默认为-1)\n    -q, --quiet                                         #只显示数字id\ndocker rm                                             #删除指定容器\ndocker start ${CONTAINER NAME/ID}                     #启动容器\ndocker restart ${CONTAINER NAME/ID}                   #重启容器\ndocker stop ${CONTAINER NAME/ID}                      #停止当前正在运行的容器\ndocker kill ${CONTAINER NAME/ID}                      #强制停止当前容器\n\n\n#\n\n\n# 查看日志\n\ndocker logs --help\n#显示日志\n-tf        #显示日志信息（一直更新）\n--tail number #需要显示日志条数\ndocker logs -t --tail n 容器id #查看n行日志\ndocker logs -ft 容器id #跟着日志\n\n\n\n# 进入容器\n\ndocker exec -it ${CONTAINER NAME/ID} /bin/bash                 #进入容器内\ndocker exec -it ${CONTAINER NAME/ID} ping ${CONTAINER NAME/ID} #一个容器ping另外一个容器\n#推出当前容器\nCtrl+Q+P\n\n\n\n# 高级命令\n\n# Advance use \ndocker inspect ${CONTAINER NAME/ID}                            #显示容器详细信息\ndocker ps -f "status=exited"                                   #显示所有退出的容器\ndocker ps -a -q                                                #显示所有容器id\ndocker ps -f "status=exited" -q                                #显示所有退出容器的id\ndocker restart $(docker ps -q)                                 #重启所有正在运行的容器\ndocker stop $(docker ps -a -q)                                 #停止所有容器\ndocker rm $(docker ps -a -q)                                   #删除所有容器\ndocker rm $(docker ps -f "status=exited" -q)                   #删除所有退出的容器\ndocker rm $(docker stop $(docker ps -a -q))                    #停止并删除所有容器\ndocker start $(docker ps -a -q)                                #启动所有容器\ndocker rmi $(docker images -a -q)                              #删除所有镜像\ndocker top ${CONTAINER NAME/ID}                                #显示一个容器的top信息\ndocker stats                                                   #显示容器统计信息(正在运行)\n\tdocker stats -a                                            #显示所有容器的统计信息(包括没有运行的)\n\tdocker stats -a --no-stream                                #显示所有容器的统计信息(包括没有运行的) ，只显示一次\n    docker stats --no-stream | sort -k8 -h                     #统计容器信息并以使用流量作为倒序\ndocker system \n\tdocker system df           #显示硬盘占用\n    docker system events       #显示容器的实时事件\n    docker system info         #显示系统信息\n    docker system prune        #清理文件\n',normalizedContent:'# 常用命令\n\n\n# 帮助命令\n\ndocker version    #显示docker的版本信息。\ndocker info       #显示docker的系统信息，包括镜像和容器的数量\ndocker 命令 --help #帮助命令\n\n\n\n# 镜像命令\n\ndocker pull ${container name}                    #拉取镜像\ndocker images                                    #查看本地所有镜像\ndocker rmi ${image name/id}                      #删除镜像\ndocker rmi -f ${image name/id}                   #删除镜像\ndocker save ${image name} > ${file name}.tar     #将镜像保存成文件\ndocker load < ${file name}.tar                   #从文件加载镜像\n\n\n\n# 容器命令\n\ndocker run...                                         #运行一个容器\n    --name ${container name}                          #设置容器名称\n    -p ${host port}:${container port}                 #映射主机和容器内的端口\n    -e ${env name}=${env value}                       #添加环境变量\n    -d                                                #后台运行\n    -v ${host folder path}:${container folder path}   #将主机目录挂在到容器内\ndocker start ${container name/id}                     #运行一个以前运行过的容器\ndocker restart ${container name/id}                   #重启正在运行的容器\ndocker stop ${container name/id}                      #停止一个正在运行的容器\ndocker logs ${container name/id}                      #显示运行容器的日志\ndocker ps                                             #列出当前正在运行的容器\n    -a, --all                                           #显示所有容器(默认显示正在运行)\n    -n, --last int                                      #显示最近创建的容器(包括所有状态)(默认为-1)\n    -q, --quiet                                         #只显示数字id\ndocker rm                                             #删除指定容器\ndocker start ${container name/id}                     #启动容器\ndocker restart ${container name/id}                   #重启容器\ndocker stop ${container name/id}                      #停止当前正在运行的容器\ndocker kill ${container name/id}                      #强制停止当前容器\n\n\n#\n\n\n# 查看日志\n\ndocker logs --help\n#显示日志\n-tf        #显示日志信息（一直更新）\n--tail number #需要显示日志条数\ndocker logs -t --tail n 容器id #查看n行日志\ndocker logs -ft 容器id #跟着日志\n\n\n\n# 进入容器\n\ndocker exec -it ${container name/id} /bin/bash                 #进入容器内\ndocker exec -it ${container name/id} ping ${container name/id} #一个容器ping另外一个容器\n#推出当前容器\nctrl+q+p\n\n\n\n# 高级命令\n\n# advance use \ndocker inspect ${container name/id}                            #显示容器详细信息\ndocker ps -f "status=exited"                                   #显示所有退出的容器\ndocker ps -a -q                                                #显示所有容器id\ndocker ps -f "status=exited" -q                                #显示所有退出容器的id\ndocker restart $(docker ps -q)                                 #重启所有正在运行的容器\ndocker stop $(docker ps -a -q)                                 #停止所有容器\ndocker rm $(docker ps -a -q)                                   #删除所有容器\ndocker rm $(docker ps -f "status=exited" -q)                   #删除所有退出的容器\ndocker rm $(docker stop $(docker ps -a -q))                    #停止并删除所有容器\ndocker start $(docker ps -a -q)                                #启动所有容器\ndocker rmi $(docker images -a -q)                              #删除所有镜像\ndocker top ${container name/id}                                #显示一个容器的top信息\ndocker stats                                                   #显示容器统计信息(正在运行)\n\tdocker stats -a                                            #显示所有容器的统计信息(包括没有运行的)\n\tdocker stats -a --no-stream                                #显示所有容器的统计信息(包括没有运行的) ，只显示一次\n    docker stats --no-stream | sort -k8 -h                     #统计容器信息并以使用流量作为倒序\ndocker system \n\tdocker system df           #显示硬盘占用\n    docker system events       #显示容器的实时事件\n    docker system info         #显示系统信息\n    docker system prune        #清理文件\n',charsets:{cjk:!0},lastUpdated:"2024/04/29, 11:14:33",lastUpdatedTimestamp:1714360473e3},{title:"dockerfile",frontmatter:{title:"dockerfile",date:"2024-04-16T17:53:11.000Z",permalink:"/pages/bb988d/"},regularPath:"/02.docker/03.dockerfile/01.dockerfile.html",relativePath:"02.docker/03.dockerfile/01.dockerfile.md",key:"v-c4a888e6",path:"/pages/bb988d/",headersStr:null,content:'# Docker image for springboot application\n# VERSION 0.0.1\n# Author: bolingcavalry\n\n### 基础镜像，使用alpine操作系统，openjkd使用8u201\nFROM openjdk:8u201-jdk-alpine3.9\n\n#作者\nMAINTAINER BolingCavalry <zq2599@gmail.com>\n\n#系统编码\nENV LANG=C.UTF-8 LC_ALL=C.UTF-8\n\n#声明一个挂载点，容器内此路径会对应宿主机的某个文件夹\nVOLUME /tmp\n\n#应用构建成功后的jar文件被复制到镜像内，名字也改成了app.jar\nADD target/dockerplugindemo-0.0.1-SNAPSHOT.jar app.jar\n\n#启动容器时的进程\nENTRYPOINT ["java","-jar","/app.jar"]\n\n#暴露8080端口\nEXPOSE 8080\n\n',normalizedContent:'# docker image for springboot application\n# version 0.0.1\n# author: bolingcavalry\n\n### 基础镜像，使用alpine操作系统，openjkd使用8u201\nfrom openjdk:8u201-jdk-alpine3.9\n\n#作者\nmaintainer bolingcavalry <zq2599@gmail.com>\n\n#系统编码\nenv lang=c.utf-8 lc_all=c.utf-8\n\n#声明一个挂载点，容器内此路径会对应宿主机的某个文件夹\nvolume /tmp\n\n#应用构建成功后的jar文件被复制到镜像内，名字也改成了app.jar\nadd target/dockerplugindemo-0.0.1-snapshot.jar app.jar\n\n#启动容器时的进程\nentrypoint ["java","-jar","/app.jar"]\n\n#暴露8080端口\nexpose 8080\n\n',charsets:{cjk:!0},lastUpdated:"2024/04/29, 11:14:33",lastUpdatedTimestamp:1714360473e3},{title:"安装nginx",frontmatter:{title:"安装nginx",date:"2024-04-16T17:59:01.000Z",permalink:"/pages/5ad05b/"},regularPath:"/02.docker/04.%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/01.%E5%AE%89%E8%A3%85nginx.html",relativePath:"02.docker/04.常用软件安装/01.安装nginx.md",key:"v-60ad81ab",path:"/pages/5ad05b/",headers:[{level:4,title:"搜索nginx",slug:"搜索nginx",normalizedTitle:"搜索nginx",charIndex:2},{level:4,title:"拉取 nginx",slug:"拉取-nginx",normalizedTitle:"拉取 nginx",charIndex:35},{level:4,title:"随便启动一下nginx",slug:"随便启动一下nginx",normalizedTitle:"随便启动一下nginx",charIndex:67},{level:4,title:"宿主机创建文件夹",slug:"宿主机创建文件夹",normalizedTitle:"宿主机创建文件夹",charIndex:114},{level:4,title:"复制容器内的nginx.conf文件到宿主机",slug:"复制容器内的nginx-conf文件到宿主机",normalizedTitle:"复制容器内的nginx.conf文件到宿主机",charIndex:154},{level:4,title:"复制conf.d和html目录",slug:"复制conf-d和html目录",normalizedTitle:"复制conf.d和html目录",charIndex:237},{level:4,title:"删除原来的容器",slug:"删除原来的容器",normalizedTitle:"删除原来的容器",charIndex:373},{level:4,title:"再次创建容器挂载目录",slug:"再次创建容器挂载目录",normalizedTitle:"再次创建容器挂载目录",charIndex:420}],headersStr:"搜索nginx 拉取 nginx 随便启动一下nginx 宿主机创建文件夹 复制容器内的nginx.conf文件到宿主机 复制conf.d和html目录 删除原来的容器 再次创建容器挂载目录",content:"# 搜索nginx\n\ndocker search nginx\n\n\n# 拉取 nginx\n\ndocker pull nginx\n\n\n# 随便启动一下nginx\n\ndocker run --name nginx nginx\n\n\n# 宿主机创建文件夹\n\nmkdir -p /root/nginx/conf\n\n\n# 复制容器内的nginx.conf文件到宿主机\n\ndocker cp nginx:/etc/nginx/nginx.conf /root/nginx/conf\n\n\n# 复制conf.d和html目录\n\ndocker cp nginx:/etc/nginx/conf.d /root/nginx/conf/conf.d\n\n\ndocker cp nginx:/usr/share/nginx/html /root/nginx/html\n\n\n# 删除原来的容器\n\ndocker stop nginx\ndocker rm nginx\n\n\n# 再次创建容器挂载目录\n\ndocker run --name nginx -d -p 80:80 -p 443:443 \\\n-v /root/nginx/log:/var/log/nginx \\\n-v /root/nginx/conf/conf.d:/etc/nginx/conf.d \\\n-v /root/nginx/html:/usr/share/nginx/html \\\n-v /root/nginx/conf/nginx.conf:/etc/nginx/nginx.conf \\\nnginx\n\n\n\n注意文件夹可以直接挂载（但文件夹里的文件不能同步） 文件必须存在才能挂载\n\n这个指定网络\n\ndocker run --name nginx -d -p 80:80 -p 443:443 \\\n-v /root/nginx/log:/var/log/nginx \\\n-v /root/nginx/conf/conf.d:/etc/nginx/conf.d \\\n-v /root/nginx/html:/usr/share/nginx/html \\\n-v /root/nginx/conf/nginx.conf:/etc/nginx/nginx.conf \\\n--network expect \\\nnginx\n",normalizedContent:"# 搜索nginx\n\ndocker search nginx\n\n\n# 拉取 nginx\n\ndocker pull nginx\n\n\n# 随便启动一下nginx\n\ndocker run --name nginx nginx\n\n\n# 宿主机创建文件夹\n\nmkdir -p /root/nginx/conf\n\n\n# 复制容器内的nginx.conf文件到宿主机\n\ndocker cp nginx:/etc/nginx/nginx.conf /root/nginx/conf\n\n\n# 复制conf.d和html目录\n\ndocker cp nginx:/etc/nginx/conf.d /root/nginx/conf/conf.d\n\n\ndocker cp nginx:/usr/share/nginx/html /root/nginx/html\n\n\n# 删除原来的容器\n\ndocker stop nginx\ndocker rm nginx\n\n\n# 再次创建容器挂载目录\n\ndocker run --name nginx -d -p 80:80 -p 443:443 \\\n-v /root/nginx/log:/var/log/nginx \\\n-v /root/nginx/conf/conf.d:/etc/nginx/conf.d \\\n-v /root/nginx/html:/usr/share/nginx/html \\\n-v /root/nginx/conf/nginx.conf:/etc/nginx/nginx.conf \\\nnginx\n\n\n\n注意文件夹可以直接挂载（但文件夹里的文件不能同步） 文件必须存在才能挂载\n\n这个指定网络\n\ndocker run --name nginx -d -p 80:80 -p 443:443 \\\n-v /root/nginx/log:/var/log/nginx \\\n-v /root/nginx/conf/conf.d:/etc/nginx/conf.d \\\n-v /root/nginx/html:/usr/share/nginx/html \\\n-v /root/nginx/conf/nginx.conf:/etc/nginx/nginx.conf \\\n--network expect \\\nnginx\n",charsets:{cjk:!0},lastUpdated:"2024/04/29, 11:14:33",lastUpdatedTimestamp:1714360473e3},{title:"Dockerfile构建Java程序",frontmatter:{title:"Dockerfile构建Java程序",date:"2024-04-16T17:53:11.000Z",permalink:"/pages/140d94/"},regularPath:"/02.docker/03.dockerfile/02.Dockerfile%E6%9E%84%E5%BB%BAJava%E7%A8%8B%E5%BA%8F.html",relativePath:"02.docker/03.dockerfile/02.Dockerfile构建Java程序.md",key:"v-4bd643ff",path:"/pages/140d94/",headers:[{level:2,title:"准备文件",slug:"准备文件",normalizedTitle:"准备文件",charIndex:2},{level:3,title:"1.新建Dockerfile",slug:"_1-新建dockerfile",normalizedTitle:"1.新建dockerfile",charIndex:88},{level:2,title:"通过DockerFile构建镜像",slug:"通过dockerfile构建镜像",normalizedTitle:"通过dockerfile构建镜像",charIndex:552},{level:2,title:"查看构建的镜像",slug:"查看构建的镜像",normalizedTitle:"查看构建的镜像",charIndex:620},{level:2,title:"创建容器",slug:"创建容器",normalizedTitle:"创建容器",charIndex:647},{level:2,title:"创建容器指定网络",slug:"创建容器指定网络",normalizedTitle:"创建容器指定网络",charIndex:747},{level:2,title:"查看日志",slug:"查看日志",normalizedTitle:"查看日志",charIndex:868}],headersStr:"准备文件 1.新建Dockerfile 通过DockerFile构建镜像 查看构建的镜像 创建容器 创建容器指定网络 查看日志",content:'# 准备文件\n\nopenjdk-17+35_linux-x64_bin.tar.gz(如果版本不一样请修改Dockerfile中的jdk版本)\n\nDockerfile\n\n\n# 1.新建Dockerfile\n\nFROM centos\nMAINTAINER expect<321766987@qq.com>\n\nADD openjdk-17+35_linux-x64_bin.tar.gz /usr/local/\n\nRUN mkdir -p /opt/java\nENV MYPATH /opt/java\nWORKDIR $MYPATH\n\nENV TZ=Asia/Shanghai\nENV JAVA_HOME /usr/local/jdk-17\nENV CLASSPATH $JAVA_HOME/lib/dt.jar :$JAVA_ HOME/lib/tools.jar\nENV PATH $PATH:$JAVA_HOME/bin\nEXPOSE 8080\n\nENTRYPOINT ["java","-Duser.timezone=GMT+8","-Dfile.encoding=UTF-8","-Dsun.jnu.encoding=UTF-8","-jar","/opt/java/app.jar"]\n\n\n\n# 通过DockerFile构建镜像\n\n docker build -t openjdk:17 .\n\n\n注意 后面的 . 不能省略\n\n\n# 查看构建的镜像\n\ndocker imags\n\n\n\n# 创建容器\n\ndocker run --name java -d -p 8080:8080 -v /opt/java/app.jar:/opt/java/app.jar openjdk:17\n\n\n\n# 创建容器指定网络\n\ndocker run --name java -d -p 8080:8080 -v /opt/java/app.jar:/opt/java/app.jar --network expect openjdk:17\n\n\n\n# 查看日志\n\ndocker logs -f --tail 200 java\n',normalizedContent:'# 准备文件\n\nopenjdk-17+35_linux-x64_bin.tar.gz(如果版本不一样请修改dockerfile中的jdk版本)\n\ndockerfile\n\n\n# 1.新建dockerfile\n\nfrom centos\nmaintainer expect<321766987@qq.com>\n\nadd openjdk-17+35_linux-x64_bin.tar.gz /usr/local/\n\nrun mkdir -p /opt/java\nenv mypath /opt/java\nworkdir $mypath\n\nenv tz=asia/shanghai\nenv java_home /usr/local/jdk-17\nenv classpath $java_home/lib/dt.jar :$java_ home/lib/tools.jar\nenv path $path:$java_home/bin\nexpose 8080\n\nentrypoint ["java","-duser.timezone=gmt+8","-dfile.encoding=utf-8","-dsun.jnu.encoding=utf-8","-jar","/opt/java/app.jar"]\n\n\n\n# 通过dockerfile构建镜像\n\n docker build -t openjdk:17 .\n\n\n注意 后面的 . 不能省略\n\n\n# 查看构建的镜像\n\ndocker imags\n\n\n\n# 创建容器\n\ndocker run --name java -d -p 8080:8080 -v /opt/java/app.jar:/opt/java/app.jar openjdk:17\n\n\n\n# 创建容器指定网络\n\ndocker run --name java -d -p 8080:8080 -v /opt/java/app.jar:/opt/java/app.jar --network expect openjdk:17\n\n\n\n# 查看日志\n\ndocker logs -f --tail 200 java\n',charsets:{cjk:!0},lastUpdated:"2024/04/29, 11:14:33",lastUpdatedTimestamp:1714360473e3},{title:"安装mysql",frontmatter:{title:"安装mysql",date:"2024-04-16T17:59:00.000Z",permalink:"/pages/a5f378/"},regularPath:"/02.docker/04.%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/02.%E5%AE%89%E8%A3%85mysql.html",relativePath:"02.docker/04.常用软件安装/02.安装mysql.md",key:"v-c2802dce",path:"/pages/a5f378/",headers:[{level:3,title:"一、安装mysql",slug:"一、安装mysql",normalizedTitle:"一、安装mysql",charIndex:2},{level:3,title:"二、设置root账户远程连接权限",slug:"二、设置root账户远程连接权限",normalizedTitle:"二、设置root账户远程连接权限",charIndex:149}],headersStr:"一、安装mysql 二、设置root账户远程连接权限",content:"# 一、安装mysql\n\ndocker run -itd --name mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123456  mysql \n\n\n解释：以后台启动 、端口映射、设置容器名、 参数设置（设置123456用户密码）、镜像id或镜像名\n\n\n# 二、设置root账户远程连接权限\n\ndocker exec -it mysql /bin/sh\n\n\n解释：进入容器、以交互模式、容器id 、/bin/sh\n\nmysql -p localhost -uroot -p\nroot\n\n\n解释：连接mysql\n\nalter user 'root'@'%' identified with mysql_native_password by '123456';\n\n\n解释：设置root账户远程连接权限",normalizedContent:"# 一、安装mysql\n\ndocker run -itd --name mysql -p 3306:3306 -e mysql_root_password=123456  mysql \n\n\n解释：以后台启动 、端口映射、设置容器名、 参数设置（设置123456用户密码）、镜像id或镜像名\n\n\n# 二、设置root账户远程连接权限\n\ndocker exec -it mysql /bin/sh\n\n\n解释：进入容器、以交互模式、容器id 、/bin/sh\n\nmysql -p localhost -uroot -p\nroot\n\n\n解释：连接mysql\n\nalter user 'root'@'%' identified with mysql_native_password by '123456';\n\n\n解释：设置root账户远程连接权限",charsets:{cjk:!0},lastUpdated:"2024/04/29, 11:14:33",lastUpdatedTimestamp:1714360473e3},{title:"安装elasticsearch",frontmatter:{title:"安装elasticsearch",date:"2024-04-16T17:59:00.000Z",permalink:"/pages/e2502e/"},regularPath:"/02.docker/04.%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/04.%E5%AE%89%E8%A3%85elasticsearch.html",relativePath:"02.docker/04.常用软件安装/04.安装elasticsearch.md",key:"v-6a32665f",path:"/pages/e2502e/",headers:[{level:2,title:"拉取镜像",slug:"拉取镜像",normalizedTitle:"拉取镜像",charIndex:2},{level:2,title:"elasticsearch",slug:"elasticsearch",normalizedTitle:"elasticsearch",charIndex:36},{level:3,title:"创建文件夹",slug:"创建文件夹",normalizedTitle:"创建文件夹",charIndex:118},{level:3,title:"删除容器",slug:"删除容器",normalizedTitle:"删除容器",charIndex:819},{level:3,title:"重新创建容器",slug:"重新创建容器",normalizedTitle:"重新创建容器",charIndex:854},{level:3,title:"修改配置文件",slug:"修改配置文件",normalizedTitle:"修改配置文件",charIndex:1280},{level:3,title:"重启容器",slug:"重启容器",normalizedTitle:"重启容器",charIndex:2395}],headersStr:"拉取镜像 elasticsearch 创建文件夹 删除容器 重新创建容器 修改配置文件 重启容器",content:'# 拉取镜像\n\n# elasticsear镜像\ndocker pull elasticsearch:8.10.2\n# kibana镜像\ndocker pull kibana:8.10.2\n\n\n\n\n# elasticsearch\n\n\n# 创建文件夹\n\nmkdir -p /mydata/elasticsearch/config\nmkdir -p /mydata/elasticsearch/data\nmkdir -p /mydata/elasticsearch/logs\nmkdir -p /mydata/elasticsearch/plugins\n\n## 保证权限\nchmod -R 777 /mydata/elasticsearch\n\n#启动一下 \ndocker run --name elasticsearch -p 9200:9200 -p9300:9300 \\\n-e "discovery.type=single-node" \\\n-e ES_JAVA_OPTS="-Xms64m -Xmx128m" \\\n-d elasticsearch:8.10.2\n\n#将配置文件拷贝出来\ndocker cp -a elasticsearch:/usr/share/elasticsearch/config /mydata/elasticsearch\ndocker cp -a elasticsearch:/usr/share/elasticsearch/data /mydata/elasticsearch\ndocker cp -a elasticsearch:/usr/share/elasticsearch/logs /mydata/elasticsearch\ndocker cp -a elasticsearch:/usr/share/elasticsearch/plugins /mydata/elasticsearch\n\n\n\n\n# 删除容器\n\ndocker rm elasticsearch\n\n\n\n# 重新创建容器\n\ndocker run --name elasticsearch -p 9200:9200 -p9300:9300 \\\n-e "discovery.type=single-node" \\\n-e ES_JAVA_OPTS="-Xms64m -Xmx128m" \\\n-v /mydata/elasticsearch/config:/usr/share/elasticsearch/config \\\n-v /mydata/elasticsearch/data:/usr/share/elasticsearch/data \\\n-v /mydata/elasticsearch/logs:/usr/share/elasticsearch/logs \\\n-v /mydata/elasticsearch/plugins:/usr/share/elasticsearch/plugins \\\n-d elasticsearch:8.10.2\n\n\n\n\n# 修改配置文件\n\nvi /mydata/elasticsearch/config/elasticsearch.yml \n\n\ncluster.name: "docker-cluster"\nnetwork.host: 0.0.0.0\n\n#----------------------- BEGIN SECURITY AUTO CONFIGURATION -----------------------\n#\n# The following settings, TLS certificates, and keys have been automatically      \n# generated to configure Elasticsearch security features on 13-12-2023 03:54:02\n#\n# --------------------------------------------------------------------------------\n\n# Enable security features\n#xpack.security.enabled: true(这里改为false)\nxpack.security.enabled: false\n\nxpack.security.enrollment.enabled: true\n\n# Enable encryption for HTTP API client connections, such as Kibana, Logstash, and Agents\nxpack.security.http.ssl:\n  enabled: true\n  keystore.path: certs/http.p12\n\n# Enable encryption and mutual authentication between cluster nodes\nxpack.security.transport.ssl:\n  enabled: true\n  verification_mode: certificate\n  keystore.path: certs/transport.p12\n  truststore.path: certs/transport.p12\n#----------------------- END SECURITY AUTO CONFIGURATION -------------------------\n#(添加)http.host: 0.0.0.0允许所有ip访问\nhttp.host: 0.0.0.0\n\n\n\n# 重启容器\n\ndocker restart  elasticsearch\n',normalizedContent:'# 拉取镜像\n\n# elasticsear镜像\ndocker pull elasticsearch:8.10.2\n# kibana镜像\ndocker pull kibana:8.10.2\n\n\n\n\n# elasticsearch\n\n\n# 创建文件夹\n\nmkdir -p /mydata/elasticsearch/config\nmkdir -p /mydata/elasticsearch/data\nmkdir -p /mydata/elasticsearch/logs\nmkdir -p /mydata/elasticsearch/plugins\n\n## 保证权限\nchmod -r 777 /mydata/elasticsearch\n\n#启动一下 \ndocker run --name elasticsearch -p 9200:9200 -p9300:9300 \\\n-e "discovery.type=single-node" \\\n-e es_java_opts="-xms64m -xmx128m" \\\n-d elasticsearch:8.10.2\n\n#将配置文件拷贝出来\ndocker cp -a elasticsearch:/usr/share/elasticsearch/config /mydata/elasticsearch\ndocker cp -a elasticsearch:/usr/share/elasticsearch/data /mydata/elasticsearch\ndocker cp -a elasticsearch:/usr/share/elasticsearch/logs /mydata/elasticsearch\ndocker cp -a elasticsearch:/usr/share/elasticsearch/plugins /mydata/elasticsearch\n\n\n\n\n# 删除容器\n\ndocker rm elasticsearch\n\n\n\n# 重新创建容器\n\ndocker run --name elasticsearch -p 9200:9200 -p9300:9300 \\\n-e "discovery.type=single-node" \\\n-e es_java_opts="-xms64m -xmx128m" \\\n-v /mydata/elasticsearch/config:/usr/share/elasticsearch/config \\\n-v /mydata/elasticsearch/data:/usr/share/elasticsearch/data \\\n-v /mydata/elasticsearch/logs:/usr/share/elasticsearch/logs \\\n-v /mydata/elasticsearch/plugins:/usr/share/elasticsearch/plugins \\\n-d elasticsearch:8.10.2\n\n\n\n\n# 修改配置文件\n\nvi /mydata/elasticsearch/config/elasticsearch.yml \n\n\ncluster.name: "docker-cluster"\nnetwork.host: 0.0.0.0\n\n#----------------------- begin security auto configuration -----------------------\n#\n# the following settings, tls certificates, and keys have been automatically      \n# generated to configure elasticsearch security features on 13-12-2023 03:54:02\n#\n# --------------------------------------------------------------------------------\n\n# enable security features\n#xpack.security.enabled: true(这里改为false)\nxpack.security.enabled: false\n\nxpack.security.enrollment.enabled: true\n\n# enable encryption for http api client connections, such as kibana, logstash, and agents\nxpack.security.http.ssl:\n  enabled: true\n  keystore.path: certs/http.p12\n\n# enable encryption and mutual authentication between cluster nodes\nxpack.security.transport.ssl:\n  enabled: true\n  verification_mode: certificate\n  keystore.path: certs/transport.p12\n  truststore.path: certs/transport.p12\n#----------------------- end security auto configuration -------------------------\n#(添加)http.host: 0.0.0.0允许所有ip访问\nhttp.host: 0.0.0.0\n\n\n\n# 重启容器\n\ndocker restart  elasticsearch\n',charsets:{cjk:!0},lastUpdated:"2024/04/29, 11:14:33",lastUpdatedTimestamp:1714360473e3},{title:"安装rabbitmq",frontmatter:{title:"安装rabbitmq",date:"2024-04-16T17:59:01.000Z",permalink:"/pages/ce054c/"},regularPath:"/02.docker/04.%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/05.%E5%AE%89%E8%A3%85rabbitmq.html",relativePath:"02.docker/04.常用软件安装/05.安装rabbitmq.md",key:"v-60d673cf",path:"/pages/ce054c/",headers:[{level:3,title:"一 下载镜像",slug:"一-下载镜像",normalizedTitle:"一 下载镜像",charIndex:2},{level:3,title:"二、安装和web界面启动",slug:"二、安装和web界面启动",normalizedTitle:"二、安装和web界面启动",charIndex:66}],headersStr:"一 下载镜像 二、安装和web界面启动",content:"# 一 下载镜像\n\n拉取镜像\n\ndocker pull rabbitmq\n\n\n查看所有镜像\n\ndocker images\n\n\n\n# 二、安装和web界面启动\n\n镜像创建和启动容器\n\ndocker run -d --name rabbitmq -p 5672:5672 -p 15672:15672 -v `pwd`/data:/var/lib/rabbitmq --hostname myRabbit -e RABBITMQ_DEFAULT_VHOST=my_vhost  -e RABBITMQ_DEFAULT_USER=admin -e RABBITMQ_DEFAULT_PASS=admin rabbitmq\n\n\n说明：\n\n * -d 后台运行容器；\n * --name 指定容器名；\n * -p 指定服务运行的端口（5672：应用访问端口；15672：控制台Web端口号）；\n * -v 映射目录或文件；\n * --hostname 主机名（RabbitMQ的一个重要注意事项是它根据所谓的 “节点名称” 存储数据，默认为主机名）；\n * -e 指定环境变量；（RABBITMQ_DEFAULT_VHOST：默认虚拟机名；RABBITMQ_DEFAULT_USER：默认的用户名；RABBITMQ_DEFAULT_PASS：默认用户名的密码）\n\n查看正在运行容器\n\ndocker ps\n\n\n启动rabbitmq_management\n\ndocker exec -it rabbitmq rabbitmq-plugins enable rabbitmq_management\n\n\nrabbit 为镜像的应用名称\n\n开启防火墙15672端口\n\n firewall-cmd --zone=public --add-port=15672/tcp --permanent　　　　　　　　\n\n firewall-cmd --reload \n\n\n浏览器打开web管理端：http://ip:15672",normalizedContent:"# 一 下载镜像\n\n拉取镜像\n\ndocker pull rabbitmq\n\n\n查看所有镜像\n\ndocker images\n\n\n\n# 二、安装和web界面启动\n\n镜像创建和启动容器\n\ndocker run -d --name rabbitmq -p 5672:5672 -p 15672:15672 -v `pwd`/data:/var/lib/rabbitmq --hostname myrabbit -e rabbitmq_default_vhost=my_vhost  -e rabbitmq_default_user=admin -e rabbitmq_default_pass=admin rabbitmq\n\n\n说明：\n\n * -d 后台运行容器；\n * --name 指定容器名；\n * -p 指定服务运行的端口（5672：应用访问端口；15672：控制台web端口号）；\n * -v 映射目录或文件；\n * --hostname 主机名（rabbitmq的一个重要注意事项是它根据所谓的 “节点名称” 存储数据，默认为主机名）；\n * -e 指定环境变量；（rabbitmq_default_vhost：默认虚拟机名；rabbitmq_default_user：默认的用户名；rabbitmq_default_pass：默认用户名的密码）\n\n查看正在运行容器\n\ndocker ps\n\n\n启动rabbitmq_management\n\ndocker exec -it rabbitmq rabbitmq-plugins enable rabbitmq_management\n\n\nrabbit 为镜像的应用名称\n\n开启防火墙15672端口\n\n firewall-cmd --zone=public --add-port=15672/tcp --permanent　　　　　　　　\n\n firewall-cmd --reload \n\n\n浏览器打开web管理端：http://ip:15672",charsets:{cjk:!0},lastUpdated:"2024/04/29, 11:14:33",lastUpdatedTimestamp:1714360473e3},{title:"安装redis",frontmatter:{title:"安装redis",date:"2024-04-16T17:59:01.000Z",permalink:"/pages/487fe4/"},regularPath:"/02.docker/04.%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/03.%E5%AE%89%E8%A3%85redis.html",relativePath:"02.docker/04.常用软件安装/03.安装redis.md",key:"v-c214eb36",path:"/pages/487fe4/",headers:[{level:3,title:"拉取redis镜像",slug:"拉取redis镜像",normalizedTitle:"拉取redis镜像",charIndex:2},{level:3,title:"配置文件",slug:"配置文件",normalizedTitle:"配置文件",charIndex:36},{level:3,title:"运行容器run",slug:"运行容器run",normalizedTitle:"运行容器run",charIndex:176}],headersStr:"拉取redis镜像 配置文件 运行容器run",content:"# 拉取redis镜像\n\ndocker pull redis\n\n\n\n# 配置文件\n\n本地新建redis配置文件 redis.conf ，写入以下内容\n\ntouch  redis.conf\n\n\n#允许外网访问\nbind 0.0.0.0\ndaemonize NO\nprotected-mode no\n#密码\nrequirepass 123456\n\n\n\n# 运行容器run\n\ndocker run \\\n--name redis \\\n--restart always \\\n-p 6379:6379 \\\n-v /root/redis/redis.conf:/etc/redis/redis.conf \\\n-v /root/redis/data/data:/data \\\n-d \\\nredis redis-server /etc/redis/redis.conf\\\n --appendonly yes \n\n\n #根据自己的情况 编写 --name  和-v\n docker run \\\n--name {容器名} \\\t#容器名\n--restart always \\ #设置开机自启动\n--network {网卡名称} \\ #指定网卡(若不需要则可取消此参数)\n-p {本机端口}:6379 \\ #端口映射\n-v /{本机redis.conf路径}/redis.conf:/etc/redis/redis.conf \\ #挂载redis.conf\n-v /{本机redisData路径}/data/data:/data \\ #挂载data目录\n-d \\ #后台运行\nredis redis-server /etc/redis/redis.conf\\  \n --appendonly yes\n",normalizedContent:"# 拉取redis镜像\n\ndocker pull redis\n\n\n\n# 配置文件\n\n本地新建redis配置文件 redis.conf ，写入以下内容\n\ntouch  redis.conf\n\n\n#允许外网访问\nbind 0.0.0.0\ndaemonize no\nprotected-mode no\n#密码\nrequirepass 123456\n\n\n\n# 运行容器run\n\ndocker run \\\n--name redis \\\n--restart always \\\n-p 6379:6379 \\\n-v /root/redis/redis.conf:/etc/redis/redis.conf \\\n-v /root/redis/data/data:/data \\\n-d \\\nredis redis-server /etc/redis/redis.conf\\\n --appendonly yes \n\n\n #根据自己的情况 编写 --name  和-v\n docker run \\\n--name {容器名} \\\t#容器名\n--restart always \\ #设置开机自启动\n--network {网卡名称} \\ #指定网卡(若不需要则可取消此参数)\n-p {本机端口}:6379 \\ #端口映射\n-v /{本机redis.conf路径}/redis.conf:/etc/redis/redis.conf \\ #挂载redis.conf\n-v /{本机redisdata路径}/data/data:/data \\ #挂载data目录\n-d \\ #后台运行\nredis redis-server /etc/redis/redis.conf\\  \n --appendonly yes\n",charsets:{cjk:!0},lastUpdated:"2024/04/29, 11:14:33",lastUpdatedTimestamp:1714360473e3},{title:"安装RocketMQ",frontmatter:{title:"安装RocketMQ",date:"2024-04-16T17:59:01.000Z",permalink:"/pages/615d3b/"},regularPath:"/02.docker/04.%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/06.%E5%AE%89%E8%A3%85RocketMQ.html",relativePath:"02.docker/04.常用软件安装/06.安装RocketMQ.md",key:"v-677903a2",path:"/pages/615d3b/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"2024/04/29, 11:14:33",lastUpdatedTimestamp:1714360473e3},{title:"git文档",frontmatter:{title:"git文档",date:"2024-04-19T11:41:17.000Z",permalink:"/pages/b740a1/"},regularPath:"/03.util/01.git/01.git%E6%96%87%E6%A1%A3.html",relativePath:"03.util/01.git/01.git文档.md",key:"v-03ee28ba",path:"/pages/b740a1/",headers:[{level:3,title:"一、Git GUI 客户端",slug:"一、git-gui-客户端",normalizedTitle:"一、git gui 客户端",charIndex:13},{level:3,title:"二、Git IDE 插件",slug:"二、git-ide-插件",normalizedTitle:"二、git ide 插件",charIndex:547},{level:3,title:"三、Git 浏览器插件",slug:"三、git-浏览器插件",normalizedTitle:"三、git 浏览器插件",charIndex:673},{level:3,title:"四、在线 Git 代码托管平台",slug:"四、在线-git-代码托管平台",normalizedTitle:"四、在线 git 代码托管平台",charIndex:820},{level:3,title:"五、搭建 Git 服务",slug:"五、搭建-git-服务",normalizedTitle:"五、搭建 git 服务",charIndex:889},{level:3,title:"六、Git 教程",slug:"六、git-教程",normalizedTitle:"六、git 教程",charIndex:1027},{level:3,title:"七、Git 常用命令",slug:"七、git-常用命令",normalizedTitle:"七、git 常用命令",charIndex:1201},{level:4,title:"仓库",slug:"仓库",normalizedTitle:"仓库",charIndex:1215},{level:4,title:"配置",slug:"配置",normalizedTitle:"配置",charIndex:1326},{level:4,title:"增加/删除文件",slug:"增加-删除文件",normalizedTitle:"增加/删除文件",charIndex:1505},{level:4,title:"代码提交",slug:"代码提交",normalizedTitle:"代码提交",charIndex:1816},{level:4,title:"分支",slug:"分支",normalizedTitle:"分支",charIndex:2141},{level:4,title:"标签",slug:"标签",normalizedTitle:"标签",charIndex:2754},{level:4,title:"查看信息",slug:"查看信息",normalizedTitle:"查看信息",charIndex:3073},{level:4,title:"远程同步",slug:"远程同步",normalizedTitle:"远程同步",charIndex:3924},{level:4,title:"撤销",slug:"撤销",normalizedTitle:"撤销",charIndex:4249},{level:4,title:"其他",slug:"其他",normalizedTitle:"其他",charIndex:4768}],headersStr:"一、Git GUI 客户端 二、Git IDE 插件 三、Git 浏览器插件 四、在线 Git 代码托管平台 五、搭建 Git 服务 六、Git 教程 七、Git 常用命令 仓库 配置 增加/删除文件 代码提交 分支 标签 查看信息 远程同步 撤销 其他",content:'# Git 大全\n\n\n# 一、Git GUI 客户端\n\nGit 客户端下载（Windows）\n\nTortoiseGit 客户端下载（Windows）\n\nSourcetree 客户端下载（Windows、Mac）\n\nGit Extensions 客户端下载（Windows、Mac、Linux）\n\nSmartGit 客户端下载（Windows、Mac、Linux）\n\nGitEye 客户端下载 （Windows、Mac、Linux）\n\ngitg 客户端下载（Windows、Linux）\n\nungit 客户端下载（Windows、Mac、Linux）\n\ngit-cola 客户端下载（Windows、Mac、Linux）\n\nTower 客户端下载（Windows、Mac）\n\nGitbox 客户端下载（Mac）\n\nGitUp 客户端下载（Mac）\n\ngiggle 客户端下载（Linux）\n\nPocket Git 客户端下载（Andorid）\n\nWorking Copy 客户端下载（IOS）\n\nGit2Go 客户端下载（IOS）\n\nGitDrive 客户端下载（IOS）\n\nFork 客户端（Windows、Mac）\n\nGitKraken 客户端（Windows、Mac、Linux）\n\n\n# 二、Git IDE 插件\n\nEclipse、Myeclipse 插件下载\n\nNetbeans 插件下载\n\nIntelliJ IDEA 插件下载\n\nVisual Studio 插件下载\n\nAtom 插件下载\n\nSublime Text 插件下载\n\n\n# 三、Git 浏览器插件\n\nGit 浏览器插件下载（Chrome、Firefox、Safari、Opera，支持码云和Github）\n\nOctotree 浏览器插件下载（Chrome，支持Github）\n\nGitLab-TreeView 浏览器插件下载（Chrome，支持GitLab）\n\n\n# 四、在线 Git 代码托管平台\n\n码云 Gitee 官网\n\nGitHub 官网\n\nGitLab 官网\n\nBitbucket 官网\n\n\n# 五、搭建 Git 服务\n\nGitLab 开源版本下载\n\nGitblit 开源版本下载\n\nGogs 开源版本下载\n\nGitea 开源版本下载\n\nGitosis 开源版本下载\n\nGitolite 开源版本下载\n\nGitStack 开源版本下载\n\nGidder开源版本下载\n\n\n# 六、Git 教程\n\n廖雪峰 | Git教程\n\nGit - Book\n\nPro Git\n\nGit 简易指南\n\n菜鸟教程 | Git教程\n\n博客园 | 深入浅出Git教程\n\nW3Cschool | Git教程\n\n易百教程 | Git教程\n\nBacklog | Git入门\n\nCSDN | Git 使用详细教程\n\nLufficc | Git教程\n\n\n# 七、Git 常用命令\n\n# 仓库\n\n在当前目录新建一个Git代码库\ngit init\n\n新建一个目录，将其初始化为Git代码库\ngit init [project-name]\n\n下载一个项目和它的整个代码历史\ngit clone [url]\n\n\n# 配置\n\n显示当前的Git配置\ngit config --list\n\n编辑Git配置文件\ngit config -e [--global]\n\n设置提交代码时的用户信息\ngit config [--global] user.name "[name]"\ngit config [--global] user.email "[email address]"\n\n\n# 增加/删除文件\n\n添加指定文件到暂存区\ngit add [file1] [file2] ...\n\n添加指定目录到暂存区，包括子目录\ngit add [dir]\n\n添加当前目录的所有文件到暂存区\ngit add .\n\n添加每个变化前，都会要求确认\n对于同一个文件的多处变化，可以实现分次提交\ngit add -p\n\n删除工作区文件，并且将这次删除放入暂存区\ngit rm [file1] [file2] ...\n\n停止追踪指定文件，但该文件会保留在工作区\ngit rm --cached [file]\n\n改名文件，并且将这个改名放入暂存区\ngit mv [file-original] [file-renamed]\n\n\n# 代码提交\n\n提交暂存区到仓库区\ngit commit -m [message]\n\n提交暂存区的指定文件到仓库区\ngit commit [file1] [file2] ... -m [message]\n\n提交工作区自上次commit之后的变化，直接到仓库区\ngit commit -a\n\n提交时显示所有diff信息\ngit commit -v\n\n使用一次新的commit，替代上一次提交\n如果代码没有任何新变化，则用来改写上一次commit的提交信息\ngit commit --amend -m [message]\n\n重做上一次commit，并包括指定文件的新变化\ngit commit --amend [file1] [file2] ...\n\n\n# 分支\n\n列出所有本地分支\ngit branch\n\n列出所有远程分支\ngit branch -r\n\n列出所有本地分支和远程分支\ngit branch -a\n\n新建一个分支，但依然停留在当前分支\ngit branch [branch-name]\n\n新建一个分支，并切换到该分支\ngit checkout -b [branch]\n\n新建一个分支，指向指定commit\ngit branch [branch] [commit]\n\n新建一个分支，与指定的远程分支建立追踪关系\ngit branch --track [branch] [remote-branch]\n\n切换到指定分支，并更新工作区\ngit checkout [branch-name]\n\n切换到上一个分支\ngit checkout -\n\n建立追踪关系，在现有分支与指定的远程分支之间\ngit branch --set-upstream [branch] [remote-branch]\n\n合并指定分支到当前分支\ngit merge [branch]\n\n选择一个commit，合并进当前分支\ngit cherry-pick [commit]\n\n删除分支\ngit branch -d [branch-name]\n\n删除远程分支\ngit push origin --delete [branch-name]\ngit branch -dr [remote/branch]\n\n\n# 标签\n\n列出所有tag\ngit tag\n\n新建一个tag在当前commit\ngit tag [tag] -m[message]\n\n新建一个tag在指定commit\ngit tag [tag] [commit]\n\n删除本地tag\ngit tag -d [tag]\n\n删除远程tag\ngit push origin :refs/tags/[tagName]\n\n查看tag信息\ngit show [tag]\n\n提交指定tag\ngit push [remote] [tag]\n\n提交所有tag\ngit push [remote] --tags\n\n新建一个分支，指向某个tag\ngit checkout -b [branch] [tag]\n\n\n# 查看信息\n\n显示有变更的文件\ngit status\n\n显示当前分支的版本历史\ngit log\n\n显示commit历史，以及每次commit发生变更的文件\ngit log --stat\n\n搜索提交历史，根据关键词\ngit log -S [keyword]\n\n显示某个commit之后的所有变动，每个commit占据一行\ngit log [tag] HEAD --pretty=format:%s\n\n显示某个commit之后的所有变动，其"提交说明"必须符合搜索条件\ngit log [tag] HEAD --grep feature\n\n显示某个文件的版本历史，包括文件改名\ngit log --follow [file]\ngit whatchanged [file]\n\n显示指定文件相关的每一次diff\ngit log -p [file]\n\n显示过去5次提交\ngit log -5 --pretty --oneline\n\n显示所有提交过的用户，按提交次数排序\ngit shortlog -sn\n\n显示指定文件是什么人在什么时间修改过\ngit blame [file]\n\n显示暂存区和工作区的差异\ngit diff\n\n显示暂存区和上一个commit的差异\ngit diff --cached [file]\n\n显示工作区与当前分支最新commit之间的差异\ngit diff HEAD\n\n显示两次提交之间的差异\ngit diff [first-branch]...[second-branch]\n\n显示今天你写了多少行代码\ngit diff --shortstat "@{0 day ago}"\n\n显示某次提交的元数据和内容变化\ngit show [commit]\n\n显示某次提交发生变化的文件\ngit show --name-only [commit]\n\n显示某次提交时，某个文件的内容\ngit show [commit]:[filename]\n\n显示当前分支的最近几次提交\ngit reflog\n\n\n# 远程同步\n\n下载远程仓库的所有变动\ngit fetch [remote]\n\n显示所有远程仓库\ngit remote -v\n\n显示某个远程仓库的信息\ngit remote show [remote]\n\n增加一个新的远程仓库，并命名\ngit remote add [shortname] [url]\n\n取回远程仓库的变化，并与本地分支合并\ngit pull [remote] [branch]\n\n上传本地指定分支到远程仓库\ngit push [remote] [branch]\n\n强行推送当前分支到远程仓库，即使有冲突\ngit push [remote] --force\n\n推送所有分支到远程仓库\ngit push [remote] --all\n\n\n# 撤销\n\n恢复暂存区的指定文件到工作区\ngit checkout [file]\n\n恢复某个commit的指定文件到暂存区和工作区\ngit checkout [commit] [file]\n\n恢复暂存区的所有文件到工作区\ngit checkout .\n\n重置暂存区的指定文件，与上一次commit保持一致，但工作区不变\ngit reset [file]\n\n重置暂存区与工作区，与上一次commit保持一致\ngit reset --hard\n\n重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变\ngit reset [commit]\n\n重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致\ngit reset --hard [commit]\n\n重置当前HEAD为指定commit，但保持暂存区和工作区不变\ngit reset --keep [commit]\n\n新建一个commit，用来撤销指定commit\n后者的所有变化都将被前者抵消，并且应用到当前分支\ngit revert [commit]\n\n暂时将未提交的变化移除，稍后再移入\ngit stash\ngit stash pop\n\n\n# 其他\n\n生成一个可供发布的压缩包\ngit archive\n',normalizedContent:'# git 大全\n\n\n# 一、git gui 客户端\n\ngit 客户端下载（windows）\n\ntortoisegit 客户端下载（windows）\n\nsourcetree 客户端下载（windows、mac）\n\ngit extensions 客户端下载（windows、mac、linux）\n\nsmartgit 客户端下载（windows、mac、linux）\n\ngiteye 客户端下载 （windows、mac、linux）\n\ngitg 客户端下载（windows、linux）\n\nungit 客户端下载（windows、mac、linux）\n\ngit-cola 客户端下载（windows、mac、linux）\n\ntower 客户端下载（windows、mac）\n\ngitbox 客户端下载（mac）\n\ngitup 客户端下载（mac）\n\ngiggle 客户端下载（linux）\n\npocket git 客户端下载（andorid）\n\nworking copy 客户端下载（ios）\n\ngit2go 客户端下载（ios）\n\ngitdrive 客户端下载（ios）\n\nfork 客户端（windows、mac）\n\ngitkraken 客户端（windows、mac、linux）\n\n\n# 二、git ide 插件\n\neclipse、myeclipse 插件下载\n\nnetbeans 插件下载\n\nintellij idea 插件下载\n\nvisual studio 插件下载\n\natom 插件下载\n\nsublime text 插件下载\n\n\n# 三、git 浏览器插件\n\ngit 浏览器插件下载（chrome、firefox、safari、opera，支持码云和github）\n\noctotree 浏览器插件下载（chrome，支持github）\n\ngitlab-treeview 浏览器插件下载（chrome，支持gitlab）\n\n\n# 四、在线 git 代码托管平台\n\n码云 gitee 官网\n\ngithub 官网\n\ngitlab 官网\n\nbitbucket 官网\n\n\n# 五、搭建 git 服务\n\ngitlab 开源版本下载\n\ngitblit 开源版本下载\n\ngogs 开源版本下载\n\ngitea 开源版本下载\n\ngitosis 开源版本下载\n\ngitolite 开源版本下载\n\ngitstack 开源版本下载\n\ngidder开源版本下载\n\n\n# 六、git 教程\n\n廖雪峰 | git教程\n\ngit - book\n\npro git\n\ngit 简易指南\n\n菜鸟教程 | git教程\n\n博客园 | 深入浅出git教程\n\nw3cschool | git教程\n\n易百教程 | git教程\n\nbacklog | git入门\n\ncsdn | git 使用详细教程\n\nlufficc | git教程\n\n\n# 七、git 常用命令\n\n# 仓库\n\n在当前目录新建一个git代码库\ngit init\n\n新建一个目录，将其初始化为git代码库\ngit init [project-name]\n\n下载一个项目和它的整个代码历史\ngit clone [url]\n\n\n# 配置\n\n显示当前的git配置\ngit config --list\n\n编辑git配置文件\ngit config -e [--global]\n\n设置提交代码时的用户信息\ngit config [--global] user.name "[name]"\ngit config [--global] user.email "[email address]"\n\n\n# 增加/删除文件\n\n添加指定文件到暂存区\ngit add [file1] [file2] ...\n\n添加指定目录到暂存区，包括子目录\ngit add [dir]\n\n添加当前目录的所有文件到暂存区\ngit add .\n\n添加每个变化前，都会要求确认\n对于同一个文件的多处变化，可以实现分次提交\ngit add -p\n\n删除工作区文件，并且将这次删除放入暂存区\ngit rm [file1] [file2] ...\n\n停止追踪指定文件，但该文件会保留在工作区\ngit rm --cached [file]\n\n改名文件，并且将这个改名放入暂存区\ngit mv [file-original] [file-renamed]\n\n\n# 代码提交\n\n提交暂存区到仓库区\ngit commit -m [message]\n\n提交暂存区的指定文件到仓库区\ngit commit [file1] [file2] ... -m [message]\n\n提交工作区自上次commit之后的变化，直接到仓库区\ngit commit -a\n\n提交时显示所有diff信息\ngit commit -v\n\n使用一次新的commit，替代上一次提交\n如果代码没有任何新变化，则用来改写上一次commit的提交信息\ngit commit --amend -m [message]\n\n重做上一次commit，并包括指定文件的新变化\ngit commit --amend [file1] [file2] ...\n\n\n# 分支\n\n列出所有本地分支\ngit branch\n\n列出所有远程分支\ngit branch -r\n\n列出所有本地分支和远程分支\ngit branch -a\n\n新建一个分支，但依然停留在当前分支\ngit branch [branch-name]\n\n新建一个分支，并切换到该分支\ngit checkout -b [branch]\n\n新建一个分支，指向指定commit\ngit branch [branch] [commit]\n\n新建一个分支，与指定的远程分支建立追踪关系\ngit branch --track [branch] [remote-branch]\n\n切换到指定分支，并更新工作区\ngit checkout [branch-name]\n\n切换到上一个分支\ngit checkout -\n\n建立追踪关系，在现有分支与指定的远程分支之间\ngit branch --set-upstream [branch] [remote-branch]\n\n合并指定分支到当前分支\ngit merge [branch]\n\n选择一个commit，合并进当前分支\ngit cherry-pick [commit]\n\n删除分支\ngit branch -d [branch-name]\n\n删除远程分支\ngit push origin --delete [branch-name]\ngit branch -dr [remote/branch]\n\n\n# 标签\n\n列出所有tag\ngit tag\n\n新建一个tag在当前commit\ngit tag [tag] -m[message]\n\n新建一个tag在指定commit\ngit tag [tag] [commit]\n\n删除本地tag\ngit tag -d [tag]\n\n删除远程tag\ngit push origin :refs/tags/[tagname]\n\n查看tag信息\ngit show [tag]\n\n提交指定tag\ngit push [remote] [tag]\n\n提交所有tag\ngit push [remote] --tags\n\n新建一个分支，指向某个tag\ngit checkout -b [branch] [tag]\n\n\n# 查看信息\n\n显示有变更的文件\ngit status\n\n显示当前分支的版本历史\ngit log\n\n显示commit历史，以及每次commit发生变更的文件\ngit log --stat\n\n搜索提交历史，根据关键词\ngit log -s [keyword]\n\n显示某个commit之后的所有变动，每个commit占据一行\ngit log [tag] head --pretty=format:%s\n\n显示某个commit之后的所有变动，其"提交说明"必须符合搜索条件\ngit log [tag] head --grep feature\n\n显示某个文件的版本历史，包括文件改名\ngit log --follow [file]\ngit whatchanged [file]\n\n显示指定文件相关的每一次diff\ngit log -p [file]\n\n显示过去5次提交\ngit log -5 --pretty --oneline\n\n显示所有提交过的用户，按提交次数排序\ngit shortlog -sn\n\n显示指定文件是什么人在什么时间修改过\ngit blame [file]\n\n显示暂存区和工作区的差异\ngit diff\n\n显示暂存区和上一个commit的差异\ngit diff --cached [file]\n\n显示工作区与当前分支最新commit之间的差异\ngit diff head\n\n显示两次提交之间的差异\ngit diff [first-branch]...[second-branch]\n\n显示今天你写了多少行代码\ngit diff --shortstat "@{0 day ago}"\n\n显示某次提交的元数据和内容变化\ngit show [commit]\n\n显示某次提交发生变化的文件\ngit show --name-only [commit]\n\n显示某次提交时，某个文件的内容\ngit show [commit]:[filename]\n\n显示当前分支的最近几次提交\ngit reflog\n\n\n# 远程同步\n\n下载远程仓库的所有变动\ngit fetch [remote]\n\n显示所有远程仓库\ngit remote -v\n\n显示某个远程仓库的信息\ngit remote show [remote]\n\n增加一个新的远程仓库，并命名\ngit remote add [shortname] [url]\n\n取回远程仓库的变化，并与本地分支合并\ngit pull [remote] [branch]\n\n上传本地指定分支到远程仓库\ngit push [remote] [branch]\n\n强行推送当前分支到远程仓库，即使有冲突\ngit push [remote] --force\n\n推送所有分支到远程仓库\ngit push [remote] --all\n\n\n# 撤销\n\n恢复暂存区的指定文件到工作区\ngit checkout [file]\n\n恢复某个commit的指定文件到暂存区和工作区\ngit checkout [commit] [file]\n\n恢复暂存区的所有文件到工作区\ngit checkout .\n\n重置暂存区的指定文件，与上一次commit保持一致，但工作区不变\ngit reset [file]\n\n重置暂存区与工作区，与上一次commit保持一致\ngit reset --hard\n\n重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变\ngit reset [commit]\n\n重置当前分支的head为指定commit，同时重置暂存区和工作区，与指定commit一致\ngit reset --hard [commit]\n\n重置当前head为指定commit，但保持暂存区和工作区不变\ngit reset --keep [commit]\n\n新建一个commit，用来撤销指定commit\n后者的所有变化都将被前者抵消，并且应用到当前分支\ngit revert [commit]\n\n暂时将未提交的变化移除，稍后再移入\ngit stash\ngit stash pop\n\n\n# 其他\n\n生成一个可供发布的压缩包\ngit archive\n',charsets:{cjk:!0},lastUpdated:"2024/04/29, 11:14:33",lastUpdatedTimestamp:1714360473e3},{title:"安装nacos",frontmatter:{title:"安装nacos",date:"2024-04-16T17:59:01.000Z",permalink:"/pages/5a835a/"},regularPath:"/02.docker/04.%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/07.%E5%AE%89%E8%A3%85nacos.html",relativePath:"02.docker/04.常用软件安装/07.安装nacos.md",key:"v-1f734aeb",path:"/pages/5a835a/",headersStr:null,content:"#拉取镜像\ndocker pull nacos/nacos-server\n#创建容器并启动\ndocker run --name nacos -e JVM_XMS=256m -e JVM_XMX=256m  -e MODE=standalone -p 8848:8848 -p 9848:9848 -d nacos/nacos-server\n",normalizedContent:"#拉取镜像\ndocker pull nacos/nacos-server\n#创建容器并启动\ndocker run --name nacos -e jvm_xms=256m -e jvm_xmx=256m  -e mode=standalone -p 8848:8848 -p 9848:9848 -d nacos/nacos-server\n",charsets:{cjk:!0},lastUpdated:"2024/04/29, 11:14:33",lastUpdatedTimestamp:1714360473e3},{title:"idea连接mysql",frontmatter:{title:"idea连接mysql",date:"2024-04-19T14:10:13.000Z",permalink:"/pages/36e470/"},regularPath:"/03.util/02.idea/03.idea%E8%BF%9E%E6%8E%A5mysql.html",relativePath:"03.util/02.idea/03.idea连接mysql.md",key:"v-747f3d61",path:"/pages/36e470/",headers:[{level:3,title:"错误界面",slug:"错误界面",normalizedTitle:"错误界面",charIndex:116},{level:3,title:"第一，设置mysql时区。",slug:"第一-设置mysql时区。",normalizedTitle:"第一，设置mysql时区。",charIndex:347},{level:3,title:"第二，同步mysql驱动。",slug:"第二-同步mysql驱动。",normalizedTitle:"第二，同步mysql驱动。",charIndex:718}],headersStr:"错误界面 第一，设置mysql时区。 第二，同步mysql驱动。",content:"IDEA连接mysql又报错！Server returns invalid timezone. Go to 'Advanced' tab and set 'serverTimezone' prope\n\n前进的道路充满荆棘。\n\n\n# 错误界面\n\nIDEA连接mysql，地址，用户名，密码，数据库名，全都配置好了，点测试连接，咔！不成功！\n\n界面是这样的，\n\n\n\n翻译过来就是：服务器返回无效时区。进入“高级”选项卡，手动设置“serverTimezone”属性。\n\n看起来是时区出了问题。时区怎么会出问题？坑真多。网上搜了各种解决办法，琳琅满目，复杂的简单的，总算是解决了！\n\n\n# 解决方案\n\n我的问题出在两块，第一，设置mysql的时区。第二，mysql驱动的版本。详细步骤如下：\n\n\n# 第一，设置mysql时区。\n\n1，我们先来检查下mysql时区。\n\n( 这里有个小插曲~~~你的mysql，配置好环境变量了吗 ）\n\n\n\n配置完环境变量，就可以在命令窗口直接执行下面的命令啦！\n\n进入命令窗口（Win + R），连接数据库 mysql -hlocalhost -uroot -p，回车，输入密码，回车，如图：\n\n\n\n2，继续输入 show variables like'%time_zone'; （注意不要漏掉后面的分号），回车，如图：\n\n\n\n显示 SYSTEM 就是没有设置时区啦。\n\n3，现在我们来设置时区。\n\n输入set global time_zone = '+8:00'; 注意不要漏掉后面的分号），回车，如图：\n\n\n\n这便是设置成功啦！\n\n这时你重新连接下数据库，也许能连接成功！如果没有，就继续往下走！\n\n\n# 第二，同步mysql驱动。\n\n我本机安装的mysql版本是5.7的，那么IDEA要连接mysql也应该匹配下驱动版本。把Driver改成MySQL for 5.1就可以了\n\n\n\n在点击Test Connection测试下，成功啦！\n\n\n\n【补充】\n\n如果，你选的是MySQL，\n\n数据库又是其他版本的，也没关系。\n\n在驱动列表里找到 MySQL ，右边Driver files 里，选择一下你需要的版本，保存就可以了。\n\n\n\n———————————————— 版权声明：本文为CSDN博主「liuqiker」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。 原文链接：https://blog.csdn.net/liuqiker/article/details/102455077",normalizedContent:"idea连接mysql又报错！server returns invalid timezone. go to 'advanced' tab and set 'servertimezone' prope\n\n前进的道路充满荆棘。\n\n\n# 错误界面\n\nidea连接mysql，地址，用户名，密码，数据库名，全都配置好了，点测试连接，咔！不成功！\n\n界面是这样的，\n\n\n\n翻译过来就是：服务器返回无效时区。进入“高级”选项卡，手动设置“servertimezone”属性。\n\n看起来是时区出了问题。时区怎么会出问题？坑真多。网上搜了各种解决办法，琳琅满目，复杂的简单的，总算是解决了！\n\n\n# 解决方案\n\n我的问题出在两块，第一，设置mysql的时区。第二，mysql驱动的版本。详细步骤如下：\n\n\n# 第一，设置mysql时区。\n\n1，我们先来检查下mysql时区。\n\n( 这里有个小插曲~~~你的mysql，配置好环境变量了吗 ）\n\n\n\n配置完环境变量，就可以在命令窗口直接执行下面的命令啦！\n\n进入命令窗口（win + r），连接数据库 mysql -hlocalhost -uroot -p，回车，输入密码，回车，如图：\n\n\n\n2，继续输入 show variables like'%time_zone'; （注意不要漏掉后面的分号），回车，如图：\n\n\n\n显示 system 就是没有设置时区啦。\n\n3，现在我们来设置时区。\n\n输入set global time_zone = '+8:00'; 注意不要漏掉后面的分号），回车，如图：\n\n\n\n这便是设置成功啦！\n\n这时你重新连接下数据库，也许能连接成功！如果没有，就继续往下走！\n\n\n# 第二，同步mysql驱动。\n\n我本机安装的mysql版本是5.7的，那么idea要连接mysql也应该匹配下驱动版本。把driver改成mysql for 5.1就可以了\n\n\n\n在点击test connection测试下，成功啦！\n\n\n\n【补充】\n\n如果，你选的是mysql，\n\n数据库又是其他版本的，也没关系。\n\n在驱动列表里找到 mysql ，右边driver files 里，选择一下你需要的版本，保存就可以了。\n\n\n\n———————————————— 版权声明：本文为csdn博主「liuqiker」的原创文章，遵循cc 4.0 by-sa版权协议，转载请附上原文出处链接及本声明。 原文链接：https://blog.csdn.net/liuqiker/article/details/102455077",charsets:{cjk:!0},lastUpdated:"2024/04/29, 11:14:33",lastUpdatedTimestamp:1714360473e3},{title:"idea没有servise窗口解决办法",frontmatter:{title:"idea没有servise窗口解决办法",date:"2024-04-19T14:09:31.000Z",permalink:"/pages/f993f7/"},regularPath:"/03.util/02.idea/02.idea%E6%B2%A1%E6%9C%89servise%E7%AA%97%E5%8F%A3%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95.html",relativePath:"03.util/02.idea/02.idea没有servise窗口解决办法.md",key:"v-6eeef438",path:"/pages/f993f7/",headersStr:null,content:'启动idea开发工具，并打开java工程\n\n.idea目录下workspace.xml文件\n\n添加\n\n<component name="RunDashboard">\n\t<option name="configurationTypes">\n\t\t<set>\n\t\t\t<option value="SpringBootApplicationConfigurationType"/>\n\t\t</set>\n\t</option>\n</component>\n\n\n重启idea',normalizedContent:'启动idea开发工具，并打开java工程\n\n.idea目录下workspace.xml文件\n\n添加\n\n<component name="rundashboard">\n\t<option name="configurationtypes">\n\t\t<set>\n\t\t\t<option value="springbootapplicationconfigurationtype"/>\n\t\t</set>\n\t</option>\n</component>\n\n\n重启idea',charsets:{cjk:!0},lastUpdated:"2024/04/29, 11:14:33",lastUpdatedTimestamp:1714360473e3},{title:"MySQL下载和安装",frontmatter:{title:"MySQL下载和安装",date:"2024-04-28T14:06:58.000Z",permalink:"/pages/638375/"},regularPath:"/04.db/01.mysql/01.MySQL%E4%B8%8B%E8%BD%BD%E5%92%8C%E5%AE%89%E8%A3%85.html",relativePath:"04.db/01.mysql/01.MySQL下载和安装.md",key:"v-48df9765",path:"/pages/638375/",headers:[{level:2,title:"一、下载安装",slug:"一、下载安装",normalizedTitle:"一、下载安装",charIndex:69},{level:3,title:"1.yum安装方式（相对简单）",slug:"_1-yum安装方式-相对简单",normalizedTitle:"1.yum安装方式（相对简单）",charIndex:80},{level:5,title:"1．配置Mysql 8.0安装源",slug:"_1-配置mysql-8-0安装源",normalizedTitle:"1．配置mysql 8.0安装源",charIndex:99},{level:5,title:"2．安装Mysql 8.0",slug:"_2-安装mysql-8-0",normalizedTitle:"2．安装mysql 8.0",charIndex:199},{level:5,title:"3．启动mysql服务",slug:"_3-启动mysql服务",normalizedTitle:"3．启动mysql服务",charIndex:284},{level:5,title:"4．查看mysql服务运行状态",slug:"_4-查看mysql服务运行状态",normalizedTitle:"4．查看mysql服务运行状态",charIndex:322},{level:5,title:"5．查看root临时密码",slug:"_5-查看root临时密码",normalizedTitle:"5．查看root临时密码",charIndex:424},{level:5,title:"6.修改root用户密码",slug:"_6-修改root用户密码",normalizedTitle:"6.修改root用户密码",charIndex:522},{level:2,title:"二、设置远程连接",slug:"二、设置远程连接",normalizedTitle:"二、设置远程连接",charIndex:1046},{level:2,title:"三、卸载",slug:"三、卸载",normalizedTitle:"三、卸载",charIndex:1255}],headersStr:"一、下载安装 1.yum安装方式（相对简单） 1．配置Mysql 8.0安装源 2．安装Mysql 8.0 3．启动mysql服务 4．查看mysql服务运行状态 5．查看root临时密码 6.修改root用户密码 二、设置远程连接 三、卸载",content:"# windows安装mysql\n\n1.去下载\n\n\n\n2.安装过程\n\n\n\n3.配置环境变量\n\n\n\n\n# linux安装mysql\n\n\n# 一、下载安装\n\n\n# 1.yum安装方式（相对简单）\n\n# 1．配置Mysql 8.0安装源\n\nrpm -Uvh https://dev.mysql.com/get/mysql80-community-release-el7-3.noarch.rpm\n\n\n# 2．安装Mysql 8.0\n\nyum --enablerepo=mysql80-community install mysql-community-server\n\n\n# 3．启动mysql服务\n\nservice mysqld start\n\n\n# 4．查看mysql服务运行状态\n\nservice mysqld status\n设置开机自启动\n# chkconfig mysqld on  或者  systemctl enable mysqld\n\n\n# 5．查看root临时密码\n\n安装完mysql之后，会生成一个临时的密码让root用户登录\n\ngrep \"A temporary password\" /var/log/mysqld.log\n\n\n# 6.修改root用户密码\n\nALTER USER 'root'@'localhost' IDENTIFIED BY 'new password';\n\n\n提示密码不满足密码验证策略\n\n降低密码校验等级\n\n查看原来的密码校验\n\nSHOW VARIABLES LIKE 'validate_password.%';\n\n\n提示不让看\n\n#`validate_password.length` 是密码的最小长度，默认是8，我们把它改成4\nset global validate_password.length=4;\n#`validate_password.policy` 验证密码的复杂程度，我们把它改成0\nset global validate_password.policy=0;\n#`validate_password.check_user_name` 用户名检查，用户名和密码不能相同，我们也把它去掉\nset global validate_password.check_user_name=off;\n\n\n现在再执行修改密码的命令：\n\nALTER USER 'root'@'localhost' IDENTIFIED BY 'root';\n\n\n\n# 二、设置远程连接\n\n#登录mysql\nmysql -u root –p\n#切换数据库 到use\nmysql>use mysql;\n# 修改user表\nmysql>update user set host = '%' where user = 'root';\n# 查看修改结果\nmysql>select host, user from user;\n# 刷新配置\nmysql>FLUSH PRIVILEGES;\n\n\n\n# 三、卸载\n\n查看安装的MySQL软件\n\nrpm -qa|grep mysql\n\n\n一个一个卸载即可\n\nrpm -e MySQL-server-5.6.17-1.el6.i686\nrpm -e MySQL-client-5.6.17-1.el6.i686\n\n\n删除mysql服务\n\nchkconfig --list | grep -i mysql\nchkconfig --del mysql\n\n\n清空相关目录\n\nwhereis mysql 或者 find / -name mysql\nmysql: /usr/lib/mysql /usr/share/mysql\n#清空相关mysql的所有目录以及文件\nrm -rf /usr/lib/mysql\nrm -rf /usr/share/mysql\nrm -rf /usr/my.cnf\n\n\n[cysqld] datadir-/usr/local/mysql/data socket=/usr/local/mysql/tmp/mysql. sock user=mysql Disabling symbolic-links is recomended to prevent assorted security risks symbolic-links=O [mysqld safe] Log- error=/var/log/mysqld. Log pid-file=/var/run/mysqld/mysqld. pid 的改后的智时就 . [client] s0c ketm /us r/1ocal /mysql /tmp/mysql sock",normalizedContent:"# windows安装mysql\n\n1.去下载\n\n\n\n2.安装过程\n\n\n\n3.配置环境变量\n\n\n\n\n# linux安装mysql\n\n\n# 一、下载安装\n\n\n# 1.yum安装方式（相对简单）\n\n# 1．配置mysql 8.0安装源\n\nrpm -uvh https://dev.mysql.com/get/mysql80-community-release-el7-3.noarch.rpm\n\n\n# 2．安装mysql 8.0\n\nyum --enablerepo=mysql80-community install mysql-community-server\n\n\n# 3．启动mysql服务\n\nservice mysqld start\n\n\n# 4．查看mysql服务运行状态\n\nservice mysqld status\n设置开机自启动\n# chkconfig mysqld on  或者  systemctl enable mysqld\n\n\n# 5．查看root临时密码\n\n安装完mysql之后，会生成一个临时的密码让root用户登录\n\ngrep \"a temporary password\" /var/log/mysqld.log\n\n\n# 6.修改root用户密码\n\nalter user 'root'@'localhost' identified by 'new password';\n\n\n提示密码不满足密码验证策略\n\n降低密码校验等级\n\n查看原来的密码校验\n\nshow variables like 'validate_password.%';\n\n\n提示不让看\n\n#`validate_password.length` 是密码的最小长度，默认是8，我们把它改成4\nset global validate_password.length=4;\n#`validate_password.policy` 验证密码的复杂程度，我们把它改成0\nset global validate_password.policy=0;\n#`validate_password.check_user_name` 用户名检查，用户名和密码不能相同，我们也把它去掉\nset global validate_password.check_user_name=off;\n\n\n现在再执行修改密码的命令：\n\nalter user 'root'@'localhost' identified by 'root';\n\n\n\n# 二、设置远程连接\n\n#登录mysql\nmysql -u root –p\n#切换数据库 到use\nmysql>use mysql;\n# 修改user表\nmysql>update user set host = '%' where user = 'root';\n# 查看修改结果\nmysql>select host, user from user;\n# 刷新配置\nmysql>flush privileges;\n\n\n\n# 三、卸载\n\n查看安装的mysql软件\n\nrpm -qa|grep mysql\n\n\n一个一个卸载即可\n\nrpm -e mysql-server-5.6.17-1.el6.i686\nrpm -e mysql-client-5.6.17-1.el6.i686\n\n\n删除mysql服务\n\nchkconfig --list | grep -i mysql\nchkconfig --del mysql\n\n\n清空相关目录\n\nwhereis mysql 或者 find / -name mysql\nmysql: /usr/lib/mysql /usr/share/mysql\n#清空相关mysql的所有目录以及文件\nrm -rf /usr/lib/mysql\nrm -rf /usr/share/mysql\nrm -rf /usr/my.cnf\n\n\n[cysqld] datadir-/usr/local/mysql/data socket=/usr/local/mysql/tmp/mysql. sock user=mysql disabling symbolic-links is recomended to prevent assorted security risks symbolic-links=o [mysqld safe] log- error=/var/log/mysqld. log pid-file=/var/run/mysqld/mysqld. pid 的改后的智时就 . [client] s0c ketm /us r/1ocal /mysql /tmp/mysql sock",charsets:{cjk:!0},lastUpdated:"2024/04/29, 11:14:33",lastUpdatedTimestamp:1714360473e3},{title:"idea快捷键",frontmatter:{title:"idea快捷键",date:"2024-04-19T14:09:31.000Z",permalink:"/pages/e6306e/"},regularPath:"/03.util/02.idea/01.idea%E5%BF%AB%E6%8D%B7%E9%94%AE.html",relativePath:"03.util/02.idea/01.idea快捷键.md",key:"v-29f4206e",path:"/pages/e6306e/",headersStr:null,content:"•万能键：ALT+ENTER•运行当前文件：CTRL+SHIFT+F10•运行上次：SHIFT+F10•以DEBUG模式运行上次：SHIFT+F9•选择运行：ALT+SHIFT+F10•选择以DEBUG模式运行：ALT+SHIFT+F9•搜索全部：双击SHITF•运行全部：双击CTRL•搜索：CTRL+F•替换：CTRL+R•在文件中查找：CTRL+SHIFT+F•在文件中搜索并替换：CTRL+SHIFT+R•重命名：SHIFT+F6•新增文件：ALT+F=>N=>选择你想要新增的文件•切换标签页：ALT+LEFT/RIGHT•关闭标签页：CTRL+F4•代码补全：CTRL+SHIFT+ENTER•定位错误：SHIFT+F2•查看结构：CTRL+F12•格式化代码：CTRL+ALT+L【调整代码样式设置】•优化导包：CTRL+ALT+O【编辑器=>常规=>自动导入=>及时优化导入】•重新格式化代码：CTRL+ALT+Shift+L•打开选项：CTRL+ALT+S•主菜单=>文件=>打开项目结构：CTRL+ALT+SHIFT+S（个人改成了CTRL+SHIFT+S）•主菜单=>编辑=>重做：CTRL+SHIFT+Z（个人改成了CTRL+Y）•主菜单=>代码=>环绕方式：CTRL+ALT+T（个人改成了ALT+T）•主菜单=>重构=>提取/引入=>提取方法：CTRL+ALT+M（个人改成了ALT+M）•跳转到上/下一个方法：ALT+UP/DOWN•跳转到方法/类的左括号/右括号：CTRL+[或者CTRL+]•跳转到定义/使用位置：CTRL+B•跳转到定义/实现：CTRL+ALT+B•跳转到使用位置，源码可用：CTRL+ALT+F7•生成：shift+insert•创建方法时参数顺序：CTRL+SHIFT+LEFT/RIGHT•移动代码/方法顺序：CTRL+SHIFT+UP/DOWN•移动单行代码顺序：ALT+SHIFT+UP/DOWN•进入项目目录视图：ALT+1•进入当前文件对应的项目目录视图：ALT+F1•切换视图：CTRL+TAB或者CTRL+SHIFT+TAB•添加书签：CTRL+SHIFT+0~9•跳转到书签：CTRL+0~9•跳转到指定行/列：CTRL+G",normalizedContent:"•万能键：alt+enter•运行当前文件：ctrl+shift+f10•运行上次：shift+f10•以debug模式运行上次：shift+f9•选择运行：alt+shift+f10•选择以debug模式运行：alt+shift+f9•搜索全部：双击shitf•运行全部：双击ctrl•搜索：ctrl+f•替换：ctrl+r•在文件中查找：ctrl+shift+f•在文件中搜索并替换：ctrl+shift+r•重命名：shift+f6•新增文件：alt+f=>n=>选择你想要新增的文件•切换标签页：alt+left/right•关闭标签页：ctrl+f4•代码补全：ctrl+shift+enter•定位错误：shift+f2•查看结构：ctrl+f12•格式化代码：ctrl+alt+l【调整代码样式设置】•优化导包：ctrl+alt+o【编辑器=>常规=>自动导入=>及时优化导入】•重新格式化代码：ctrl+alt+shift+l•打开选项：ctrl+alt+s•主菜单=>文件=>打开项目结构：ctrl+alt+shift+s（个人改成了ctrl+shift+s）•主菜单=>编辑=>重做：ctrl+shift+z（个人改成了ctrl+y）•主菜单=>代码=>环绕方式：ctrl+alt+t（个人改成了alt+t）•主菜单=>重构=>提取/引入=>提取方法：ctrl+alt+m（个人改成了alt+m）•跳转到上/下一个方法：alt+up/down•跳转到方法/类的左括号/右括号：ctrl+[或者ctrl+]•跳转到定义/使用位置：ctrl+b•跳转到定义/实现：ctrl+alt+b•跳转到使用位置，源码可用：ctrl+alt+f7•生成：shift+insert•创建方法时参数顺序：ctrl+shift+left/right•移动代码/方法顺序：ctrl+shift+up/down•移动单行代码顺序：alt+shift+up/down•进入项目目录视图：alt+1•进入当前文件对应的项目目录视图：alt+f1•切换视图：ctrl+tab或者ctrl+shift+tab•添加书签：ctrl+shift+0~9•跳转到书签：ctrl+0~9•跳转到指定行/列：ctrl+g",charsets:{cjk:!0},lastUpdated:"2024/04/29, 11:14:33",lastUpdatedTimestamp:1714360473e3},{title:"mysql数据类型",frontmatter:{title:"mysql数据类型",date:"2024-04-28T14:07:26.000Z",permalink:"/pages/d00bbc/"},regularPath:"/04.db/01.mysql/02.mysql%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.html",relativePath:"04.db/01.mysql/02.mysql数据类型.md",key:"v-8faaed78",path:"/pages/d00bbc/",headers:[{level:3,title:"1.1 tinyint",slug:"_1-1-tinyint",normalizedTitle:"1.1 tinyint",charIndex:11},{level:3,title:"1.2 smallint",slug:"_1-2-smallint",normalizedTitle:"1.2 smallint",charIndex:204},{level:3,title:"1.3 mediumint",slug:"_1-3-mediumint",normalizedTitle:"1.3 mediumint",charIndex:334},{level:3,title:"1.4 int",slug:"_1-4-int",normalizedTitle:"1.4 int",charIndex:476},{level:3,title:"1.5 bigint",slug:"_1-5-bigint",normalizedTitle:"1.5 bigint",charIndex:637},{level:3,title:"2.1 float",slug:"_2-1-float",normalizedTitle:"2.1 float",charIndex:865},{level:3,title:"2.2 double",slug:"_2-2-double",normalizedTitle:"2.2 double",charIndex:984},{level:3,title:"2.3 decimal",slug:"_2-3-decimal",normalizedTitle:"2.3 decimal",charIndex:1091},{level:3,title:"3.1 date",slug:"_3-1-date",normalizedTitle:"3.1 date",charIndex:1249},{level:3,title:"3.2 time",slug:"_3-2-time",normalizedTitle:"3.2 time",charIndex:1401},{level:3,title:"3.3 year",slug:"_3-3-year",normalizedTitle:"3.3 year",charIndex:1560},{level:3,title:"3.4 datetime",slug:"_3-4-datetime",normalizedTitle:"3.4 datetime",charIndex:1670},{level:3,title:"3.5 timestamp",slug:"_3-5-timestamp",normalizedTitle:"3.5 timestamp",charIndex:1903},{level:3,title:"4.1 char",slug:"_4-1-char",normalizedTitle:"4.1 char",charIndex:2110},{level:3,title:"4.2 varchar",slug:"_4-2-varchar",normalizedTitle:"4.2 varchar",charIndex:2237},{level:3,title:"4.3 text",slug:"_4-3-text",normalizedTitle:"4.3 text",charIndex:2428},{level:3,title:"5.1 enum",slug:"_5-1-enum",normalizedTitle:"5.1 enum",charIndex:2603},{level:3,title:"6.1 blob",slug:"_6-1-blob",normalizedTitle:"6.1 blob",charIndex:2791}],headersStr:"1.1 tinyint 1.2 smallint 1.3 mediumint 1.4 int 1.5 bigint 2.1 float 2.2 double 2.3 decimal 3.1 date 3.2 time 3.3 year 3.4 datetime 3.5 timestamp 4.1 char 4.2 varchar 4.3 text 5.1 enum 6.1 blob",content:"1.整数类型\n\n\n# 1.1 tinyint\n\ntinyint 为小整数类型，存储空间为1个字节（8位），有符号范围-128 ~ 127，无符号范围 0 ~ 255,此类型通常在数据库中表示类型的字段，如某一字段 type 表示学科,其中 “type=1” 表示语文，“type=2” 表示数学, “type=3” 表示英语，此时 type 字段即可使用 tinyint 这种存储空间比较小的类型。\n\n\n# 1.2 smallint\n\nsmallint 为小整数类型，存储空间2个字节(16位),有符号范围 -32768 ~ 32767，无符号范围 0 ~ 65535，当遇到最大值不超过 65535 的整数类型字段时，可使用无符号 smallint 类型。\n\n\n# 1.3 mediumint\n\nmediumint 为中整数类型，存储空间3个字节（24位），有符号范围 -8388608 ~ 8388607，符号范围 0 ~ 16777215，当遇到最大值不超过 16777215 的整数类型字段时，可使用无符号 mediumint 类型。\n\n\n# 1.4 int\n\nint 为整数类型，存储空间 4 个字节 ( 32位 )，有符号范围 -2147483648 ~ 2147483647，无符号范围 0 ~ 49294967295，当遇到最大值不超过 49294967295 的整数类型字段时，可使用无符号 int 类型，通常自增主键 id 使用 int 类型。\n\n\n# 1.5 bigint\n\nbigint 为大整数类型，存储空间8个字节(64位)，有符号范围 -9223372036854775808 ~ 9223372036854775807，无符号范围 0 ~ 18446744073709551615，当遇到最大值不超过 18446744073709551615 的整数类型字段时，可使用无符号 bigint 类型，通常自增主键 id 使用 int 无法满足时，可以使用 bigint 类型。\n\n2.浮点类型\n\n\n# 2.1 float\n\nfloat 为单精度浮点类型，存储空间 4 个字节，支使用标准的浮点运算进行近似计算，若想知道浮点运算是怎么计算的，则需要研究操作系统的浮点数方式，通常对小数精度要求不那么高的字段可使用 float 类型。\n\n\n# 2.2 double\n\ndouble 为双精度浮点类型，存储空间 8个字节，相比float 有更高精度和更大的范围，通常对小数精度要求不那么高，但比 float 要求更高的字段可使用 double 类型。\n\n\n# 2.3 decimal\n\ndecimal 类型用于存储精确的小数，若使用 float 类型来取代一些需要精确小数点类型的字段时，大的数据量会导致数据错误，比如金额,若使用 float 类型，可能会丢失精度，此时对于金额这样对精度要求很高的字段来说，可以选择使用 decimal 类型。\n\n3.日期和时间类型\n\n\n# 3.1 date\n\ndate 类型为日期类型，存储空间 3个字节，格式为 “YYYY-MM-DD”，例如 “2020-03-16”,日期的范围 “1000-01-01 ~ 9999-12-31”，通常只想用来存储如 “2020-02-02” 这种格式的日期字段时，可以选择使用 date 类型。\n\n\n# 3.2 time\n\ntime 类型为时间类型，存储空间 3 ~ 6个字节，格式为 “HH::MM:SS[.微秒]” ，例如 “04:31:22.33”，范围 “-838:59:59 ~ 838:59:59”，通常只想用来存储如 “04:31:22.33” 这种格式的时间字段时，可以选择使用 time 类型。\n\n\n# 3.3 year\n\nyear 类型为日期类型，存储空间 1 个字节 ，例如 “2020”，范围 “1901 ~ 2155”，通常只想用来存储如 “2020” 这种格式的日期字段时，可以选择使用 year 类型。\n\n\n# 3.4 datetime\n\ndatetime 类型为精确时间的日期类型，存储空间为 5 ~ 8 个字节，格式为 “YYYY-MM-DD HH:MM:SS[.微秒值]”，例如 “2020-02-02 02:02:02.02”，范围 “1000-01-01 00:00:00 ~ 9999-12-31 23:59:59 UTC”，通常只想用来存储如 “2020-02-02 02:02:02.02” 这种格式的日期字段时，可以选择使用 datetime 类型。\n\n\n# 3.5 timestamp\n\ntimestamp 类型保存了从1970年01月01日午夜以来的秒数，它和 UNIX 时间戳相同，存储空间 4 ~ 7 个字节，范围 “1970-01-01 00:00：00 ~ 2038-01-19 03:14:07 UTC”，timestamp 显示的值依赖于时区，和 datetime 相比，前者提供的值与时区有关系，后者则保留文本表示的日期和时间。\n\n4.字符串类型\n\n\n# 4.1 char\n\nchar 类型为定长字符串类型，适合存储很短的字符串，或者所有值都接近同一个长度，例如存储密码 md5 值，因为它是一个定长的值，对于经常变更的数据，char 比 varchar 更好，因为定长的 char 不容易产生碎片。\n\n\n# 4.2 varchar\n\nvarchar 类型用于存储可变长度字符串，是最常见的字符串数据类型，对于短长度的字符串，它比定长的更为节省空间，varchar 节省空间对性能有帮助，varchar 类型的字符串有如下特点 :\n\n * 字符串列的最大长度比平均长度大；\n * 列的更新少，碎片问题较小；\n * 使用了如 “UTF-8” 字符集，每个字符都使用不同的字节数来存储。\n\n\n# 4.3 text\n\ntext 数据类型家族包括 : tinytext、text、mediumtext、longtext。MySQL 把每个 text 值当做一个独立的对象处理。若 text 家族的值太大时，InnoDB 存储引擎会额外使用存储区域来进行存储，通常存储文章这样比较长的内容字段时，可选择 text 家族类型。\n\n5.枚举值类型\n\n\n# 5.1 enum\n\nenum 类型为枚举值类型，有时可以使用枚举值替代字符串，枚举列可以把一些不重复的字符串存储为一个预定义的集合。MySQL 在存储枚举时非常紧凑，会根据列表值的数量压缩到 1 ~ 2 个字节，例如 ENUM （‘黄色’，‘黑色’，‘蓝色’，‘紫色’），枚举值类型字段的需求也可以使用 tinyint 类型来替代。\n\n6**.二进****制类型**\n\n\n# 6.1 blob\n\nblob 数据类型家族包括 ：tinybob、blob、mediumblob、longblob。和 text 家族一样，MySQL 把每个 text 值当做一个独立的对象处理。若 blob 家族的值太大时，InnoDB 存储引擎会额外使用存储区域来进行存储，blob 类型存储的是二进制数据,没有排序规则或字符集。",normalizedContent:"1.整数类型\n\n\n# 1.1 tinyint\n\ntinyint 为小整数类型，存储空间为1个字节（8位），有符号范围-128 ~ 127，无符号范围 0 ~ 255,此类型通常在数据库中表示类型的字段，如某一字段 type 表示学科,其中 “type=1” 表示语文，“type=2” 表示数学, “type=3” 表示英语，此时 type 字段即可使用 tinyint 这种存储空间比较小的类型。\n\n\n# 1.2 smallint\n\nsmallint 为小整数类型，存储空间2个字节(16位),有符号范围 -32768 ~ 32767，无符号范围 0 ~ 65535，当遇到最大值不超过 65535 的整数类型字段时，可使用无符号 smallint 类型。\n\n\n# 1.3 mediumint\n\nmediumint 为中整数类型，存储空间3个字节（24位），有符号范围 -8388608 ~ 8388607，符号范围 0 ~ 16777215，当遇到最大值不超过 16777215 的整数类型字段时，可使用无符号 mediumint 类型。\n\n\n# 1.4 int\n\nint 为整数类型，存储空间 4 个字节 ( 32位 )，有符号范围 -2147483648 ~ 2147483647，无符号范围 0 ~ 49294967295，当遇到最大值不超过 49294967295 的整数类型字段时，可使用无符号 int 类型，通常自增主键 id 使用 int 类型。\n\n\n# 1.5 bigint\n\nbigint 为大整数类型，存储空间8个字节(64位)，有符号范围 -9223372036854775808 ~ 9223372036854775807，无符号范围 0 ~ 18446744073709551615，当遇到最大值不超过 18446744073709551615 的整数类型字段时，可使用无符号 bigint 类型，通常自增主键 id 使用 int 无法满足时，可以使用 bigint 类型。\n\n2.浮点类型\n\n\n# 2.1 float\n\nfloat 为单精度浮点类型，存储空间 4 个字节，支使用标准的浮点运算进行近似计算，若想知道浮点运算是怎么计算的，则需要研究操作系统的浮点数方式，通常对小数精度要求不那么高的字段可使用 float 类型。\n\n\n# 2.2 double\n\ndouble 为双精度浮点类型，存储空间 8个字节，相比float 有更高精度和更大的范围，通常对小数精度要求不那么高，但比 float 要求更高的字段可使用 double 类型。\n\n\n# 2.3 decimal\n\ndecimal 类型用于存储精确的小数，若使用 float 类型来取代一些需要精确小数点类型的字段时，大的数据量会导致数据错误，比如金额,若使用 float 类型，可能会丢失精度，此时对于金额这样对精度要求很高的字段来说，可以选择使用 decimal 类型。\n\n3.日期和时间类型\n\n\n# 3.1 date\n\ndate 类型为日期类型，存储空间 3个字节，格式为 “yyyy-mm-dd”，例如 “2020-03-16”,日期的范围 “1000-01-01 ~ 9999-12-31”，通常只想用来存储如 “2020-02-02” 这种格式的日期字段时，可以选择使用 date 类型。\n\n\n# 3.2 time\n\ntime 类型为时间类型，存储空间 3 ~ 6个字节，格式为 “hh::mm:ss[.微秒]” ，例如 “04:31:22.33”，范围 “-838:59:59 ~ 838:59:59”，通常只想用来存储如 “04:31:22.33” 这种格式的时间字段时，可以选择使用 time 类型。\n\n\n# 3.3 year\n\nyear 类型为日期类型，存储空间 1 个字节 ，例如 “2020”，范围 “1901 ~ 2155”，通常只想用来存储如 “2020” 这种格式的日期字段时，可以选择使用 year 类型。\n\n\n# 3.4 datetime\n\ndatetime 类型为精确时间的日期类型，存储空间为 5 ~ 8 个字节，格式为 “yyyy-mm-dd hh:mm:ss[.微秒值]”，例如 “2020-02-02 02:02:02.02”，范围 “1000-01-01 00:00:00 ~ 9999-12-31 23:59:59 utc”，通常只想用来存储如 “2020-02-02 02:02:02.02” 这种格式的日期字段时，可以选择使用 datetime 类型。\n\n\n# 3.5 timestamp\n\ntimestamp 类型保存了从1970年01月01日午夜以来的秒数，它和 unix 时间戳相同，存储空间 4 ~ 7 个字节，范围 “1970-01-01 00:00：00 ~ 2038-01-19 03:14:07 utc”，timestamp 显示的值依赖于时区，和 datetime 相比，前者提供的值与时区有关系，后者则保留文本表示的日期和时间。\n\n4.字符串类型\n\n\n# 4.1 char\n\nchar 类型为定长字符串类型，适合存储很短的字符串，或者所有值都接近同一个长度，例如存储密码 md5 值，因为它是一个定长的值，对于经常变更的数据，char 比 varchar 更好，因为定长的 char 不容易产生碎片。\n\n\n# 4.2 varchar\n\nvarchar 类型用于存储可变长度字符串，是最常见的字符串数据类型，对于短长度的字符串，它比定长的更为节省空间，varchar 节省空间对性能有帮助，varchar 类型的字符串有如下特点 :\n\n * 字符串列的最大长度比平均长度大；\n * 列的更新少，碎片问题较小；\n * 使用了如 “utf-8” 字符集，每个字符都使用不同的字节数来存储。\n\n\n# 4.3 text\n\ntext 数据类型家族包括 : tinytext、text、mediumtext、longtext。mysql 把每个 text 值当做一个独立的对象处理。若 text 家族的值太大时，innodb 存储引擎会额外使用存储区域来进行存储，通常存储文章这样比较长的内容字段时，可选择 text 家族类型。\n\n5.枚举值类型\n\n\n# 5.1 enum\n\nenum 类型为枚举值类型，有时可以使用枚举值替代字符串，枚举列可以把一些不重复的字符串存储为一个预定义的集合。mysql 在存储枚举时非常紧凑，会根据列表值的数量压缩到 1 ~ 2 个字节，例如 enum （‘黄色’，‘黑色’，‘蓝色’，‘紫色’），枚举值类型字段的需求也可以使用 tinyint 类型来替代。\n\n6**.二进****制类型**\n\n\n# 6.1 blob\n\nblob 数据类型家族包括 ：tinybob、blob、mediumblob、longblob。和 text 家族一样，mysql 把每个 text 值当做一个独立的对象处理。若 blob 家族的值太大时，innodb 存储引擎会额外使用存储区域来进行存储，blob 类型存储的是二进制数据,没有排序规则或字符集。",charsets:{cjk:!0},lastUpdated:"2024/04/29, 11:14:33",lastUpdatedTimestamp:1714360473e3},{title:"mysql表操作",frontmatter:{title:"mysql表操作",date:"2024-04-28T14:07:47.000Z",permalink:"/pages/25cd5e/"},regularPath:"/04.db/01.mysql/03.mysql%E8%A1%A8%E6%93%8D%E4%BD%9C.html",relativePath:"04.db/01.mysql/03.mysql表操作.md",key:"v-7658d99d",path:"/pages/25cd5e/",headers:[{level:2,title:"1、create table -- 新建表",slug:"_1、create-table-新建表",normalizedTitle:"1、create table -- 新建表",charIndex:2},{level:2,title:"2、drop table -- 删除表",slug:"_2、drop-table-删除表",normalizedTitle:"2、drop table -- 删除表",charIndex:160},{level:2,title:"3、desc 表名 -- 查看表结构",slug:"_3、desc-表名-查看表结构",normalizedTitle:"3、desc 表名 -- 查看表结构",charIndex:201},{level:2,title:"4、alter table -- 修改表",slug:"_4、alter-table-修改表",normalizedTitle:"4、alter table -- 修改表",charIndex:452},{level:4,title:"(1)、 alter table 表名 rename 新表名; --- 修改表名",slug:"_1-、-alter-table-表名-rename-新表名-修改表名",normalizedTitle:"(1)、 alter table 表名 rename 新表名; --- 修改表名",charIndex:476},{level:4,title:"(2)、alter table 表名 charset 编码; --- 修改表的编码方式",slug:"_2-、alter-table-表名-charset-编码-修改表的编码方式",normalizedTitle:"(2)、alter table 表名 charset 编码; --- 修改表的编码方式",charIndex:553},{level:4,title:"(3)、alter table 表名 auto_increment 自增的位置; --- 修改表的自增值",slug:"_3-、alter-table-表名-auto-increment-自增的位置-修改表的自增值",normalizedTitle:"(3)、alter table 表名 auto_increment 自增的位置; --- 修改表的自增值",charIndex:633},{level:4,title:"(4)、alter table 表名 add 字段名 类型(长度) 约束; --- 增加字段",slug:"_4-、alter-table-表名-add-字段名-类型-长度-约束-增加字段",normalizedTitle:"(4)、alter table 表名 add 字段名 类型(长度) 约束; --- 增加字段",charIndex:729},{level:4,title:"(5)、 alter table 表名 drop 字段名; --- 删除字段",slug:"_5-、-alter-table-表名-drop-字段名-删除字段",normalizedTitle:"(5)、 alter table 表名 drop 字段名; --- 删除字段",charIndex:829},{level:4,title:"(6)、 alter table 表名 change 字段名 新名字 类型(长度) 约束； --- 修改字段名",slug:"_6-、-alter-table-表名-change-字段名-新名字-类型-长度-约束-修改字段名",normalizedTitle:"(6)、 alter table 表名 change 字段名 新名字 类型(长度) 约束； --- 修改字段名",charIndex:900},{level:4,title:"(7)、 alter table 表名 modify 字段名 新类型(新长度) 约束; --- 修改字段类型",slug:"_7-、-alter-table-表名-modify-字段名-新类型-新长度-约束-修改字段类型",normalizedTitle:"(7)、 alter table 表名 modify 字段名 新类型(新长度) 约束; --- 修改字段类型",charIndex:1009},{level:4,title:"(8)、 alter table 表名 change 旧字段名 新字段名 类型(长度) 约束 frist; -- 修改字段的排列顺序为第一个",slug:"_8-、-alter-table-表名-change-旧字段名-新字段名-类型-长度-约束-frist-修改字段的排列顺序为第一个",normalizedTitle:"(8)、 alter table 表名 change 旧字段名 新字段名 类型(长度) 约束 frist; -- 修改字段的排列顺序为第一个",charIndex:1104},{level:4,title:"(9)、 alter table 表名 change 旧字段名 新字段名 类型(长度) 约束 after 字段; --- 修改字段的排列顺序为在字段后面",slug:"_9-、-alter-table-表名-change-旧字段名-新字段名-类型-长度-约束-after-字段-修改字段的排列顺序为在字段后面",normalizedTitle:"(9)、 alter table 表名 change 旧字段名 新字段名 类型(长度) 约束 after 字段; --- 修改字段的排列顺序为在字段后面",charIndex:1241},{level:4,title:"(10)、alter table 表名 add 字段名 类型(长度) 约束 frist; --- 添加一个字段位置在第一个",slug:"_10-、alter-table-表名-add-字段名-类型-长度-约束-frist-添加一个字段位置在第一个",normalizedTitle:"(10)、alter table 表名 add 字段名 类型(长度) 约束 frist; --- 添加一个字段位置在第一个",charIndex:1390},{level:4,title:"(11)、 alter table 表名 add 字段名 类型(长度) 约束 after 字段; --- 添加一个字段在name字段后",slug:"_11-、-alter-table-表名-add-字段名-类型-长度-约束-after-字段-添加一个字段在name字段后",normalizedTitle:"(11)、 alter table 表名 add 字段名 类型(长度) 约束 after 字段; --- 添加一个字段在name字段后",charIndex:1493}],headersStr:"1、create table -- 新建表 2、drop table -- 删除表 3、desc 表名 -- 查看表结构 4、alter table -- 修改表 (1)、 alter table 表名 rename 新表名; --- 修改表名 (2)、alter table 表名 charset 编码; --- 修改表的编码方式 (3)、alter table 表名 auto_increment 自增的位置; --- 修改表的自增值 (4)、alter table 表名 add 字段名 类型(长度) 约束; --- 增加字段 (5)、 alter table 表名 drop 字段名; --- 删除字段 (6)、 alter table 表名 change 字段名 新名字 类型(长度) 约束； --- 修改字段名 (7)、 alter table 表名 modify 字段名 新类型(新长度) 约束; --- 修改字段类型 (8)、 alter table 表名 change 旧字段名 新字段名 类型(长度) 约束 frist; -- 修改字段的排列顺序为第一个 (9)、 alter table 表名 change 旧字段名 新字段名 类型(长度) 约束 after 字段; --- 修改字段的排列顺序为在字段后面 (10)、alter table 表名 add 字段名 类型(长度) 约束 frist; --- 添加一个字段位置在第一个 (11)、 alter table 表名 add 字段名 类型(长度) 约束 after 字段; --- 添加一个字段在name字段后",content:"# 1、create table -- 新建表\n\ncreate table 表名(\n字段名1 类型[(宽度) 约束条件],\n字段名2 类型[(宽度) 约束条件],\n字段名3 类型[(宽度) 约束条件]\n);\n\n# 在同一张表中，字段名是不能相同的\n# 宽度和约束条件是可以选择的\n# 字段名和类型是必须要有的\n\n\n\n# 2、drop table -- 删除表\n\ndrop table 表名;\n\n\n\n# 3、desc 表名 -- 查看表结构\n\n# 查看表结构有两种方式：\ndescribe 表名;这种方法和desc 表名;效果相同；可以查看当前的表结构\n\n虽然desc命令可以查看表的定义，但是其输出的信息还不够全面，为了得到更全面的表定义信息，有时候就需要查看创建表的SQL语句，使用 show create table 语法。除了可以看到表定义之外，还可以看到engine（存储引擎）和charset（字符集）等信息。（\\G选项的含义是是的记录能够竖向排列，以便更好的显示内容较长的记录。）\n\n\n\n# 4、alter table -- 修改表\n\n# (1)、 alter table 表名 rename 新表名; --- 修改表名\n\nalter table test rename staff;\n\n\n# (2)、alter table 表名 charset 编码; --- 修改表的编码方式\n\nalter table test charset utf8;\n\n\n# (3)、alter table 表名 auto_increment 自增的位置; --- 修改表的自增值\n\nalter table test auto_increment = 10;\n\n\n# (4)、alter table 表名 add 字段名 类型(长度) 约束; --- 增加字段\n\nalter table test add sex enum('male','female');\n\n\n# (5)、 alter table 表名 drop 字段名; --- 删除字段\n\nalter table test drop sex;\n\n\n# (6)、 alter table 表名 change 字段名 新名字 类型(长度) 约束； --- 修改字段名\n\nalter table test change name sname varchar(20);\n\n\n# (7)、 alter table 表名 modify 字段名 新类型(新长度) 约束; --- 修改字段类型\n\nalter table test modify id int(4);\n\n\n# (8)、 alter table 表名 change 旧字段名 新字段名 类型(长度) 约束 frist; -- 修改字段的排列顺序为第一个\n\nalter table test change sex sex enum('male','female') first;\n\n\n# (9)、 alter table 表名 change 旧字段名 新字段名 类型(长度) 约束 after 字段; --- 修改字段的排列顺序为在字段后面\n\nalter table test change sex sex enum('male','female') after sname;\n\n\n# (10)、alter table 表名 add 字段名 类型(长度) 约束 frist; --- 添加一个字段位置在第一个\n\nalter table test add age int first;\n\n\n# (11)、 alter table 表名 add 字段名 类型(长度) 约束 after 字段; --- 添加一个字段在name字段后\n\nalter table test add hobby char(22) after cname;\n",normalizedContent:"# 1、create table -- 新建表\n\ncreate table 表名(\n字段名1 类型[(宽度) 约束条件],\n字段名2 类型[(宽度) 约束条件],\n字段名3 类型[(宽度) 约束条件]\n);\n\n# 在同一张表中，字段名是不能相同的\n# 宽度和约束条件是可以选择的\n# 字段名和类型是必须要有的\n\n\n\n# 2、drop table -- 删除表\n\ndrop table 表名;\n\n\n\n# 3、desc 表名 -- 查看表结构\n\n# 查看表结构有两种方式：\ndescribe 表名;这种方法和desc 表名;效果相同；可以查看当前的表结构\n\n虽然desc命令可以查看表的定义，但是其输出的信息还不够全面，为了得到更全面的表定义信息，有时候就需要查看创建表的sql语句，使用 show create table 语法。除了可以看到表定义之外，还可以看到engine（存储引擎）和charset（字符集）等信息。（\\g选项的含义是是的记录能够竖向排列，以便更好的显示内容较长的记录。）\n\n\n\n# 4、alter table -- 修改表\n\n# (1)、 alter table 表名 rename 新表名; --- 修改表名\n\nalter table test rename staff;\n\n\n# (2)、alter table 表名 charset 编码; --- 修改表的编码方式\n\nalter table test charset utf8;\n\n\n# (3)、alter table 表名 auto_increment 自增的位置; --- 修改表的自增值\n\nalter table test auto_increment = 10;\n\n\n# (4)、alter table 表名 add 字段名 类型(长度) 约束; --- 增加字段\n\nalter table test add sex enum('male','female');\n\n\n# (5)、 alter table 表名 drop 字段名; --- 删除字段\n\nalter table test drop sex;\n\n\n# (6)、 alter table 表名 change 字段名 新名字 类型(长度) 约束； --- 修改字段名\n\nalter table test change name sname varchar(20);\n\n\n# (7)、 alter table 表名 modify 字段名 新类型(新长度) 约束; --- 修改字段类型\n\nalter table test modify id int(4);\n\n\n# (8)、 alter table 表名 change 旧字段名 新字段名 类型(长度) 约束 frist; -- 修改字段的排列顺序为第一个\n\nalter table test change sex sex enum('male','female') first;\n\n\n# (9)、 alter table 表名 change 旧字段名 新字段名 类型(长度) 约束 after 字段; --- 修改字段的排列顺序为在字段后面\n\nalter table test change sex sex enum('male','female') after sname;\n\n\n# (10)、alter table 表名 add 字段名 类型(长度) 约束 frist; --- 添加一个字段位置在第一个\n\nalter table test add age int first;\n\n\n# (11)、 alter table 表名 add 字段名 类型(长度) 约束 after 字段; --- 添加一个字段在name字段后\n\nalter table test add hobby char(22) after cname;\n",charsets:{cjk:!0},lastUpdated:"2024/04/29, 11:14:33",lastUpdatedTimestamp:1714360473e3},{title:"mysql添加索引",frontmatter:{title:"mysql添加索引",date:"2024-04-28T14:07:59.000Z",permalink:"/pages/91a56f/"},regularPath:"/04.db/01.mysql/04.mysql%E6%B7%BB%E5%8A%A0%E7%B4%A2%E5%BC%95.html",relativePath:"04.db/01.mysql/04.mysql添加索引.md",key:"v-b3a54f2a",path:"/pages/91a56f/",headersStr:null,content:"# mysql添加索引语句\n\n1.添加PRIMARY KEY（主键索引） \nmysql>ALTER TABLE `table_name` ADD PRIMARY KEY ( `column` ) \n2.添加UNIQUE(唯一索引) \nmysql>ALTER TABLE `table_name` ADD UNIQUE ( `column`) \n3.添加INDEX(普通索引) \nmysql>ALTER TABLE `table_name` ADD INDEX index_name ( `column` ) \n4.添加FULLTEXT(全文索引) \nmysql>ALTER TABLE `table_name` ADD FULLTEXT ( `column`) \n5.添加多列索引 \nmysql>ALTER TABLE `table_name` ADD INDEX index_name ( `column1`, `column2`, `column3` )\n",normalizedContent:"# mysql添加索引语句\n\n1.添加primary key（主键索引） \nmysql>alter table `table_name` add primary key ( `column` ) \n2.添加unique(唯一索引) \nmysql>alter table `table_name` add unique ( `column`) \n3.添加index(普通索引) \nmysql>alter table `table_name` add index index_name ( `column` ) \n4.添加fulltext(全文索引) \nmysql>alter table `table_name` add fulltext ( `column`) \n5.添加多列索引 \nmysql>alter table `table_name` add index index_name ( `column1`, `column2`, `column3` )\n",charsets:{cjk:!0},lastUpdated:"2024/04/29, 11:14:33",lastUpdatedTimestamp:1714360473e3},{title:"视图函数存储过程",frontmatter:{title:"视图函数存储过程",date:"2024-04-28T14:08:51.000Z",permalink:"/pages/4e3826/"},regularPath:"/04.db/01.mysql/06.%E8%A7%86%E5%9B%BE%E5%87%BD%E6%95%B0%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B.html",relativePath:"04.db/01.mysql/06.视图函数存储过程.md",key:"v-a4f5841a",path:"/pages/4e3826/",headers:[{level:3,title:"视图",slug:"视图",normalizedTitle:"视图",charIndex:2}],headersStr:"视图",content:"# 视图\n\n#创建视图\nCREATE  VIEW 视图名称 AS  查询sql\n#使用视图\nSELECT * FROM 视图名\n#删除视图\nDROP VIEW  视图名称;\n\n\n#示例\n#创建视图\nCREATE  VIEW user_nan AS \nSELECT * FROM `user_info` WHERE (`user_info`.`gender` = '男');\n#使用视图\nSELECT * FROM user_nan\n#删除视图\nDROP VIEW user_nan;\n",normalizedContent:"# 视图\n\n#创建视图\ncreate  view 视图名称 as  查询sql\n#使用视图\nselect * from 视图名\n#删除视图\ndrop view  视图名称;\n\n\n#示例\n#创建视图\ncreate  view user_nan as \nselect * from `user_info` where (`user_info`.`gender` = '男');\n#使用视图\nselect * from user_nan\n#删除视图\ndrop view user_nan;\n",charsets:{cjk:!0},lastUpdated:"2024/04/29, 11:14:33",lastUpdatedTimestamp:1714360473e3},{title:"mysql查询语句执行顺序",frontmatter:{title:"mysql查询语句执行顺序",date:"2024-04-28T14:08:28.000Z",permalink:"/pages/7119b3/"},regularPath:"/04.db/01.mysql/05.mysql%E6%9F%A5%E8%AF%A2%E8%AF%AD%E5%8F%A5%E6%89%A7%E8%A1%8C%E9%A1%BA%E5%BA%8F.html",relativePath:"04.db/01.mysql/05.mysql查询语句执行顺序.md",key:"v-76e23ba6",path:"/pages/7119b3/",headersStr:null,content:"前面，已经介绍了Mysql安装和建库，以及数据类型，在介绍建表之前，先来聊聊查询，而查询中最重要的不是写多少SQL，而是先搞清楚SQL查询的执行顺序，先搞清楚执行顺序，那写SQL才会有下笔如有神的感觉！\n\n先来看看，一个完整的SQL查询：\n\nSELECT DISTINCT column, AGG_FUNC(column_or_expression)\nFROM mytable \nJOIN another_table \nON mytable.column = another_table.column \nWHERE constraint_expression \nGROUP BY column \nHAVING constraint_expression \nORDER BY column ASC/DESC \nLIMIT count OFFSET COUNT;\n\n\n一个查询SQL的执行总是先从数据里按条件选出数据，然后对这些数据再次做一些整理处理，按要求返回成结果，让结果尽可能是简单直接的。\n\n因为一个查询SQL由很多部分组成，所以搞清楚这些部分的执行顺序还挺重要的，这有助于我们更深刻的理解SQL执行过程。\n\n查询执行顺序如下：\n\n1. FROM 和 JOINs\n\nFROM 或 JOIN会第一个执行，确定一个整体的数据范围. 如果要JOIN不同表，可能会生成一个临时Table来用于 下面的过程。总之第一步可以简单理解为确定一个数据源表（含临时表) 。\n\n2. WHERE\n\n我们确定了数据来源 WHERE 语句就将在这个数据源中按要求进行数据筛选，并丢弃不符合要求的数据行，所有的筛选col属性 只能来自FROM圈定的表. AS别名还不能在这个阶段使用，因为可能别名是一个还没执行的表达式 。\n\n3. GROUP BY\n\n如果你用了 GROUP BY 分组，那GROUP BY 将对之前的数据进行分组，统计等，并将是结果集缩小为分组数.这意味着 其他的数据在分组后丢弃。\n\n4. HAVING\n\n如果你用了 GROUP BY 分组, HAVING 会在分组完成后对结果集再次筛选。AS别名也不能在这个阶段使用。\n\n5. SELECT\n\n确定结果之后，SELECT用来对结果col简单筛选或计算，决定输出什么数据。\n\n6. DISTINCT\n\n如果数据行有重复DISTINCT 将负责排重。\n\n7. ORDER BY\n\n在结果集确定的情况下，ORDER BY 对结果做排序。因为SELECT中的表达式已经执行完了。此时可以用AS别名。\n\n8. LIMIT / OFFSET\n\n最后 LIMIT 和 OFFSET 从排序的结果中截取部分数据。\n\n结论\n\n不是每一个SQL语句都要用到所有的句法，但灵活运用以上的句法组合和深刻理解SQL执行原理将能在SQL层面更好的解决数据问题，而不用把问题 都抛给程序逻辑。",normalizedContent:"前面，已经介绍了mysql安装和建库，以及数据类型，在介绍建表之前，先来聊聊查询，而查询中最重要的不是写多少sql，而是先搞清楚sql查询的执行顺序，先搞清楚执行顺序，那写sql才会有下笔如有神的感觉！\n\n先来看看，一个完整的sql查询：\n\nselect distinct column, agg_func(column_or_expression)\nfrom mytable \njoin another_table \non mytable.column = another_table.column \nwhere constraint_expression \ngroup by column \nhaving constraint_expression \norder by column asc/desc \nlimit count offset count;\n\n\n一个查询sql的执行总是先从数据里按条件选出数据，然后对这些数据再次做一些整理处理，按要求返回成结果，让结果尽可能是简单直接的。\n\n因为一个查询sql由很多部分组成，所以搞清楚这些部分的执行顺序还挺重要的，这有助于我们更深刻的理解sql执行过程。\n\n查询执行顺序如下：\n\n1. from 和 joins\n\nfrom 或 join会第一个执行，确定一个整体的数据范围. 如果要join不同表，可能会生成一个临时table来用于 下面的过程。总之第一步可以简单理解为确定一个数据源表（含临时表) 。\n\n2. where\n\n我们确定了数据来源 where 语句就将在这个数据源中按要求进行数据筛选，并丢弃不符合要求的数据行，所有的筛选col属性 只能来自from圈定的表. as别名还不能在这个阶段使用，因为可能别名是一个还没执行的表达式 。\n\n3. group by\n\n如果你用了 group by 分组，那group by 将对之前的数据进行分组，统计等，并将是结果集缩小为分组数.这意味着 其他的数据在分组后丢弃。\n\n4. having\n\n如果你用了 group by 分组, having 会在分组完成后对结果集再次筛选。as别名也不能在这个阶段使用。\n\n5. select\n\n确定结果之后，select用来对结果col简单筛选或计算，决定输出什么数据。\n\n6. distinct\n\n如果数据行有重复distinct 将负责排重。\n\n7. order by\n\n在结果集确定的情况下，order by 对结果做排序。因为select中的表达式已经执行完了。此时可以用as别名。\n\n8. limit / offset\n\n最后 limit 和 offset 从排序的结果中截取部分数据。\n\n结论\n\n不是每一个sql语句都要用到所有的句法，但灵活运用以上的句法组合和深刻理解sql执行原理将能在sql层面更好的解决数据问题，而不用把问题 都抛给程序逻辑。",charsets:{cjk:!0},lastUpdated:"2024/04/29, 11:14:33",lastUpdatedTimestamp:1714360473e3},{title:"lombok",frontmatter:{title:"lombok",date:"2024-04-19T13:52:54.000Z",permalink:"/pages/ad55d0/"},regularPath:"/05.java%E5%B7%A5%E5%85%B7/01.lombok/01.lombok.html",relativePath:"05.java工具/01.lombok/01.lombok.md",key:"v-033068e6",path:"/pages/ad55d0/",headers:[{level:3,title:"lombok",slug:"lombok",normalizedTitle:"lombok",charIndex:2}],headersStr:"lombok",content:"# lombok",normalizedContent:"# lombok",charsets:{},lastUpdated:"2024/04/29, 11:14:33",lastUpdatedTimestamp:1714360473e3},{title:"脏读幻读可重复读",frontmatter:{title:"脏读幻读可重复读",date:"2024-04-28T14:09:03.000Z",permalink:"/pages/f9c7e0/"},regularPath:"/04.db/01.mysql/07.%E8%84%8F%E8%AF%BB%E5%B9%BB%E8%AF%BB%E5%8F%AF%E9%87%8D%E5%A4%8D%E8%AF%BB.html",relativePath:"04.db/01.mysql/07.脏读幻读可重复读.md",key:"v-5ab7a8b6",path:"/pages/f9c7e0/",headers:[{level:3,title:"脏读、不可重复读、幻读",slug:"脏读、不可重复读、幻读",normalizedTitle:"脏读、不可重复读、幻读",charIndex:2},{level:4,title:"1、脏读",slug:"_1、脏读",normalizedTitle:"1、脏读",charIndex:17},{level:4,title:"2、不可重复读",slug:"_2、不可重复读",normalizedTitle:"2、不可重复读",charIndex:247},{level:4,title:"3、幻读",slug:"_3、幻读",normalizedTitle:"3、幻读",charIndex:522},{level:4,title:"4、第一类丢失更新",slug:"_4、第一类丢失更新",normalizedTitle:"4、第一类丢失更新",charIndex:774},{level:4,title:"5、第二类丢失更新",slug:"_5、第二类丢失更新",normalizedTitle:"5、第二类丢失更新",charIndex:860},{level:3,title:"二、如何解决",slug:"二、如何解决",normalizedTitle:"二、如何解决",charIndex:914},{level:3,title:"Spring 事务处理",slug:"spring-事务处理",normalizedTitle:"spring 事务处理",charIndex:1268}],headersStr:"脏读、不可重复读、幻读 1、脏读 2、不可重复读 3、幻读 4、第一类丢失更新 5、第二类丢失更新 二、如何解决 Spring 事务处理",content:"# 脏读、不可重复读、幻读\n\n# 1、脏读\n\n脏读就是指当一个事务正在访问数据，并且对数据进行了修改，而这种修改还没有提交到数据库中，这时，另外一个事务也访问这个数据，然后使用了这个数据。 例如： 张三的工资为5000,事务A中把他的工资改为8000,但事务A尚未提交。 与此同时， 事务B正在读取张三的工资，读取到张三的工资为8000。 随后， 事务A发生异常，而回滚了事务。张三的工资又回滚为5000。 最后， 事务B读取到的张三工资为8000的数据即为脏数据，事务B做了一次脏读。\n\n# 2、不可重复读\n\n是指在一个事务内，多次读同一数据。在这个事务还没有结束时，另外一个事务也访问该同一数据。那么，在第一个事务中的两次读数据之间，由于第二个事务的修改，那么第一个事务两次读到的的数据可能是不一样的。这样就发生了在一个事务内两次读到的数据是不一样的，因此称为是不可重复读。 例如： 在事务A中，读取到张三的工资为5000，操作没有完成，事务还没提交。 与此同时， 事务B把张三的工资改为8000，并提交了事务。 随后， 在事务A中，再次读取张三的工资，此时工资变为8000。在一个事务中前后两次读取的结果并不致，导致了不可重复读。\n\n# 3、幻读\n\n是指当事务不是独立执行时发生的一种现象，例如第一个事务对一个表中的数据进行了修改，这种修改涉及到表中的全部数据行。同时，第二个事务也修改这个表中的数据，这种修改是向表中插入一行新数据。那么，以后就会发生操作第一个事务的用户发现表中还有没有修改的数据行，就好象发生了幻觉一样。 例如： 目前工资为5000的员工有10人，事务A读取所有工资为5000的人数为10人。 此时， 事务B插入一条工资也为5000的记录。 这是，事务A再次读取工资为5000的员工，记录为11人。此时产生了幻读。\n\n# 4、第一类丢失更新\n\nA事务撤销时，把已经提交的B事务的更新数据覆盖了。例如： 这里写图片描述\n\n\n\n这时候取款事务A撤销事务，余额恢复为1000，这就丢失了更新。\n\n# 5、第二类丢失更新\n\nA事务覆盖B事务已经提交的数据，造成B事务所做的操作丢失 这里写图片描述\n\n\n\n\n# 二、如何解决\n\n为了解决上述问题，数据库通过锁机制解决并发访问的问题。根据锁定对象不同：分为行级锁和表级锁；根据并发事务锁定的关系上看：分为共享锁定和独占锁定，共享锁定会防止独占锁定但允许其他的共享锁定。而独占锁定既防止共享锁定也防止其他独占锁定。为了更改数据，数据库必须在进行更改的行上施加行独占锁定，insert、update、delete和selsct for update语句都会隐式采用必要的行锁定。\n\n但是直接使用锁机制管理是很复杂的，基于锁机制，数据库给用户提供了不同的事务隔离级别，只要设置了事务隔离级别，数据库就会分析事务中的sql语句然后自动选择合适的锁。 不同的隔离级别对并发问题的解决情况如图：\n\n\n\n注意：事务的隔离级别和数据库并发性是成反比的，隔离级别越高，并发性越低。\n\n\n# Spring 事务处理\n\n@Transactional(isolation=Isolation.DEFAULT)\n\n\n事务隔离枚举\n\npublic enum Isolation {\n    DEFAULT(-1),\n    READ_UNCOMMITTED(1),\n    READ_COMMITTED(2),\n    REPEATABLE_READ(4),\n    SERIALIZABLE(8);\n\n    private final int value;\n\n    private Isolation(int value) {\n        this.value = value;\n    }\n\n    public int value() {\n        return this.value;\n    }\n}\n\n\nDEFAULT(默认) 使用mysql设置的事务隔离级别\n\n查看mysql默认事务隔离级别\n\nmysql> show variables like 'transaction_isolation';\n+-----------------------+-----------------+\n| Variable_name         | Value           |\n+-----------------------+-----------------+\n| transaction_isolation | REPEATABLE-READ |\n+-----------------------+-----------------+\n1 row in set (0.04 sec)\n\nmysql>\n",normalizedContent:"# 脏读、不可重复读、幻读\n\n# 1、脏读\n\n脏读就是指当一个事务正在访问数据，并且对数据进行了修改，而这种修改还没有提交到数据库中，这时，另外一个事务也访问这个数据，然后使用了这个数据。 例如： 张三的工资为5000,事务a中把他的工资改为8000,但事务a尚未提交。 与此同时， 事务b正在读取张三的工资，读取到张三的工资为8000。 随后， 事务a发生异常，而回滚了事务。张三的工资又回滚为5000。 最后， 事务b读取到的张三工资为8000的数据即为脏数据，事务b做了一次脏读。\n\n# 2、不可重复读\n\n是指在一个事务内，多次读同一数据。在这个事务还没有结束时，另外一个事务也访问该同一数据。那么，在第一个事务中的两次读数据之间，由于第二个事务的修改，那么第一个事务两次读到的的数据可能是不一样的。这样就发生了在一个事务内两次读到的数据是不一样的，因此称为是不可重复读。 例如： 在事务a中，读取到张三的工资为5000，操作没有完成，事务还没提交。 与此同时， 事务b把张三的工资改为8000，并提交了事务。 随后， 在事务a中，再次读取张三的工资，此时工资变为8000。在一个事务中前后两次读取的结果并不致，导致了不可重复读。\n\n# 3、幻读\n\n是指当事务不是独立执行时发生的一种现象，例如第一个事务对一个表中的数据进行了修改，这种修改涉及到表中的全部数据行。同时，第二个事务也修改这个表中的数据，这种修改是向表中插入一行新数据。那么，以后就会发生操作第一个事务的用户发现表中还有没有修改的数据行，就好象发生了幻觉一样。 例如： 目前工资为5000的员工有10人，事务a读取所有工资为5000的人数为10人。 此时， 事务b插入一条工资也为5000的记录。 这是，事务a再次读取工资为5000的员工，记录为11人。此时产生了幻读。\n\n# 4、第一类丢失更新\n\na事务撤销时，把已经提交的b事务的更新数据覆盖了。例如： 这里写图片描述\n\n\n\n这时候取款事务a撤销事务，余额恢复为1000，这就丢失了更新。\n\n# 5、第二类丢失更新\n\na事务覆盖b事务已经提交的数据，造成b事务所做的操作丢失 这里写图片描述\n\n\n\n\n# 二、如何解决\n\n为了解决上述问题，数据库通过锁机制解决并发访问的问题。根据锁定对象不同：分为行级锁和表级锁；根据并发事务锁定的关系上看：分为共享锁定和独占锁定，共享锁定会防止独占锁定但允许其他的共享锁定。而独占锁定既防止共享锁定也防止其他独占锁定。为了更改数据，数据库必须在进行更改的行上施加行独占锁定，insert、update、delete和selsct for update语句都会隐式采用必要的行锁定。\n\n但是直接使用锁机制管理是很复杂的，基于锁机制，数据库给用户提供了不同的事务隔离级别，只要设置了事务隔离级别，数据库就会分析事务中的sql语句然后自动选择合适的锁。 不同的隔离级别对并发问题的解决情况如图：\n\n\n\n注意：事务的隔离级别和数据库并发性是成反比的，隔离级别越高，并发性越低。\n\n\n# spring 事务处理\n\n@transactional(isolation=isolation.default)\n\n\n事务隔离枚举\n\npublic enum isolation {\n    default(-1),\n    read_uncommitted(1),\n    read_committed(2),\n    repeatable_read(4),\n    serializable(8);\n\n    private final int value;\n\n    private isolation(int value) {\n        this.value = value;\n    }\n\n    public int value() {\n        return this.value;\n    }\n}\n\n\ndefault(默认) 使用mysql设置的事务隔离级别\n\n查看mysql默认事务隔离级别\n\nmysql> show variables like 'transaction_isolation';\n+-----------------------+-----------------+\n| variable_name         | value           |\n+-----------------------+-----------------+\n| transaction_isolation | repeatable-read |\n+-----------------------+-----------------+\n1 row in set (0.04 sec)\n\nmysql>\n",charsets:{cjk:!0},lastUpdated:"2024/04/29, 11:14:33",lastUpdatedTimestamp:1714360473e3},{title:"mysql特殊数据处理",frontmatter:{title:"mysql特殊数据处理",date:"2024-04-28T14:09:26.000Z",permalink:"/pages/fd9178/"},regularPath:"/04.db/01.mysql/08.mysql%E7%89%B9%E6%AE%8A%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86.html",relativePath:"04.db/01.mysql/08.mysql特殊数据处理.md",key:"v-50fbb838",path:"/pages/fd9178/",headers:[{level:2,title:"1.根据经纬度计算距离",slug:"_1-根据经纬度计算距离",normalizedTitle:"1.根据经纬度计算距离",charIndex:2},{level:2,title:"2.JSON数据类型",slug:"_2-json数据类型",normalizedTitle:"2.json数据类型",charIndex:298},{level:3,title:"2.1相关函数",slug:"_2-1相关函数",normalizedTitle:"2.1相关函数",charIndex:313},{level:3,title:"1.JSON_ARRAY 创建一个JSON数组",slug:"_1-json-array-创建一个json数组",normalizedTitle:"1.json_array 创建一个json数组",charIndex:1235},{level:3,title:"2.JSON_OBJECT 创建一个JSON对象",slug:"_2-json-object-创建一个json对象",normalizedTitle:"2.json_object 创建一个json对象",charIndex:1482},{level:3,title:"3.JSONARRAYAPPEND在数组末尾添加一个元素",slug:"_3-json-array-append在数组末尾添加一个元素",normalizedTitle:"3.jsonarrayappend在数组末尾添加一个元素",charIndex:null},{level:3,title:"4.JSONARRAYINSERT在指定位置插入一个元素到一个数组中",slug:"_4-json-array-insert在指定位置插入一个元素到一个数组中",normalizedTitle:"4.jsonarrayinsert在指定位置插入一个元素到一个数组中",charIndex:null},{level:3,title:"5.JSON_CONTAINS  检查JSON文本是否包含指定路径对应的值",slug:"_5-json-contains-检查json文本是否包含指定路径对应的值",normalizedTitle:"5.json_contains  检查json文本是否包含指定路径对应的值",charIndex:null},{level:3,title:"分组后用逗号分隔",slug:"分组后用逗号分隔",normalizedTitle:"分组后用逗号分隔",charIndex:3350},{level:3,title:"分组后抓换为json数组",slug:"分组后抓换为json数组",normalizedTitle:"分组后抓换为json数组",charIndex:3708}],headersStr:"1.根据经纬度计算距离 2.JSON数据类型 2.1相关函数 1.JSON_ARRAY 创建一个JSON数组 2.JSON_OBJECT 创建一个JSON对象 3.JSONARRAYAPPEND在数组末尾添加一个元素 4.JSONARRAYINSERT在指定位置插入一个元素到一个数组中 5.JSON_CONTAINS  检查JSON文本是否包含指定路径对应的值 分组后用逗号分隔 分组后抓换为json数组",content:'# 1.根据经纬度计算距离\n\nmysql> SELECT ST_Distance_Sphere(ST_GeomFromText(\'POINT(120.26457 30.18534)\'), ST_GeomFromText(\'POINT(120.2428550 30.2035350)\')) distance;\n+--------------------+\n| distance           |\n+--------------------+\n| 2906.6838888890456 |\n+--------------------+\n1 row in set (0.01 sec)\n\n\n\n# 2.JSON数据类型\n\n\n# 2.1相关函数\n\n函数名称                 描述\nJSON_ARRAY           创建一个JSON数组\nJSON_OBJECT          创建一个JSON对象\nJSON_ARRAY_APPEND    在数组末尾添加一个元素\nJSON_ARRAY_INSERT    在指定位置插入一个元素到一个数组中\nJSON_CONTAINS        检查JSON文本是否包含指定路径对应的值\nJSON_CONTAINS_PATH   检查JSON文本是否包含指定路径\nJSON_DEPTH           返回JSON文本的最大深度\nJSON_EXTRACT         从JSON文本中提取数据\nJSON_INSERT          插入数据到JSON文本中指定位置\nJSON_KEYS            返回JSON对象的所有键\nJSON_LENGTH          返回JSON文本中的元素个数\nJSON_MERGE           合并两个或更多JSON文本\nJSON_OBJECTAGG       返回值为JSON类型的聚合函数\nJSON_OVERLAPS        检查两个JSON文本是否有重叠\nJSON_PRETTY          将JSON文本格式化并美化\nJSON_QUOTE           对JSON文本中的字符串添加引号\nJSON_REMOVE          从JSON文本中移除指定的键\nJSON_REPLACE         用新值替换JSON文本中的指定键\nJSON_SEARCH          在JSON文本中搜索指定的值，并返回其路径\nJSON_SET             设置JSON文本中指定路径对应的值\nJSON_STORAGE_FREE    释放JSON值占用的存储空间\nJSON_STORAGE_SIZE    返回JSON值所占用的存储空间大小\nJSON_TABLE           从JSON文本中提取数据，并存储为关系型表格的形式\nJSON_TYPE            返回JSON值的类型\n\n\n# 1.JSON_ARRAY 创建一个JSON数组\n\n--函数 JSON_ARRAY([val[, val] ...])\n\n--示例\nSELECT JSON_ARRAY("a","b","c") AS json_arr;\n--返回结果   ["a", "b", "c"]\n\n-- 注：这里并不要求数组内元素数据类型一致\nSELECT JSON_ARRAY("a","b","c",1,2,3) AS json_arr;\n--返回结果   ["a", "b", "c", 1, 2, 3]\n\n\n\n# 2.JSON_OBJECT 创建一个JSON对象\n\n--函数 JSON_OBJECT([key, val[, key, val] ...])\n--示例\nSELECT JSON_OBJECT(\'name\', \'张三\', \'age\', 20, \'gender\', \'male\') as json_obj;\n--返回结果   {"age": 20, "name": "张三", "gender": "male"}\n\n\n\n# 3.JSON_ARRAY_APPEND在数组末尾添加一个元素\n\n--函数 JSON_ARRAY_APPEND(json_doc, path, val[, path, val] ...)\n\n--示例\nSELECT JSON_ARRAY_APPEND(JSON_ARRAY("a","b","c",1,2,3),"$","**") as json_arr;\n--返回结果  ["a", "b", "c", 1, 2, 3, "**"]\n\nSELECT JSON_ARRAY_APPEND(JSON_ARRAY("a","b","c",1,2,3),"$[0]","**") as json_arr;\n--返回结果  [["a", "**"], "b", "c", 1, 2, 3]\n\n\n其中，参数解释如下：\n\n * json_doc：需要修改的 JSON 文档；\n * path：要追加元素的路径；\n * val：要追加的值。\n\n其返回值为修改后的 JSON 文档，如果原 JSON 文档不是合法的 JSON 数组，则返回 NULL。\n\n注意，\'$\' 表示向数组末尾添加元素，如果要指定其他位置，则需要使用对应的索引，例如 $[0] 表示向数组第一个元素前添加一个新元素\n\n\n# 4.JSON_ARRAY_INSERT在指定位置插入一个元素到一个数组中\n\n--函数 JSON_ARRAY_INSERT(json_doc, path, val[, path, val] ...)\n\n--示例\nSELECT JSON_ARRAY_INSERT(JSON_ARRAY("a","b","c",1,2,3),"$[1]","**") as json_arr;\n--返回结果  ["a", "**", "b", "c", 1, 2, 3]\n\n\n其中，参数解释如下：\n\n * json_doc：需要修改的 JSON 文档；\n * path：要插入元素的路径；\n * val：要插入的值。\n\n其返回值为修改后的 JSON 文档，如果原 JSON 文档不是合法的 JSON 数组，则返回 NULL。\n\n注意，\'$[1]\' 表示向数组第二个元素前添加一个新元素，如果要指定其他位置，则需要使用对应的索引。\n\n\n# 5.JSON_CONTAINS 检查JSON文本是否包含指定路径对应的值\n\nJSON_CONTAINS 是 MySQL 中的一个 JSON 函数，用于判断 JSON 文档中是否包含指定的值或对象。以下是其语法：\n\n--函数 JSON_CONTAINS(json_doc, val[, path])\nselect * from test_json where JSON_CONTAINS(`json_array`, \'3\')\n\n\n其中，参数解释如下：\n\n * json_doc：需要查找的 JSON 文档；\n * val：要查找的值或对象；\n * path：可选，指定要查找的路径。\n\n其返回值为 1 或 0，分别表示找到和未找到。\n\n以下是一个示例，假设表 student 中的字段 grades 是一个 JSON 数组，我们要判断该数组中是否包含成绩 80：\n\nSELECT JSON_CONTAINS(grades, 80) FROM student WHERE id = 1;\n\n\n如果数组中包含成绩 80，则返回 1，否则返回 0。\n\n注意，如果要查找的是一个对象，可以在 val 参数中直接传入一个 JSON 对象，例如：\n\nSELECT JSON_CONTAINS(data, \'{"name": "Tom", "age": 18}\', \'$.students\') FROM class WHERE id = 1;\n\n\n以上语句表示查找表 class 中的 data 字段中名为 students 的 JSON 数组中是否包含一个名字为 Tom，年龄为 18 的对象。如果包含，则返回 1，否则返回 0。\n\n\n# 分组后用逗号分隔\n\n假设A表中有以下两个字段：user_id和age。要将A表中的user_id用逗号分隔，按age字段进行分组，可以使用MySQL的GROUP_CONCAT函数实现。具体的SQL语句如下所示：\n\nCopy CodeSELECT age, GROUP_CONCAT(user_id SEPARATOR \',\') AS user_ids\nFROM A\nGROUP BY age;\n\n\n在这条SQL语句中，先选择了age字段和使用GROUP_CONCAT函数连接user_id，使用“,”作为分隔符，并将其命名为user_ids，然后根据age字段进行分组。\n\n执行完这条SQL语句之后，会返回一个结果集，其中每一行代表一个分组，包含该分组的age值和该分组内的所有user_id，用逗号分隔。\n\n\n# 分组后抓换为json数组\n\n要将A表中的user_id设置为JSON数组，按age字段进行分组，可以使用MySQL的GROUP_CONCAT函数和JSON_ARRAY函数实现。具体的SQL语句如下所示：\n\nCopy CodeSELECT age, CONCAT(\'[\', GROUP_CONCAT(JSON_QUOTE(user_id)), \']\') AS user_ids\nFROM A\nGROUP BY age;\n\n\n在这条SQL语句中，先选择了age字段和使用GROUP_CONCAT函数连接使用JSON_QUOTE函数处理过的user_id，并在最终结果外包裹了一个中括号“[]”，使用CONCAT函数实现字符串拼接，将其命名为user_ids，然后根据age字段进行分组。\n\n执行完这条SQL语句之后，会返回一个结果集，其中每一行代表一个分组，包含该分组的age值和该分组内的所有user_id，用JSON数组形式表示。',normalizedContent:'# 1.根据经纬度计算距离\n\nmysql> select st_distance_sphere(st_geomfromtext(\'point(120.26457 30.18534)\'), st_geomfromtext(\'point(120.2428550 30.2035350)\')) distance;\n+--------------------+\n| distance           |\n+--------------------+\n| 2906.6838888890456 |\n+--------------------+\n1 row in set (0.01 sec)\n\n\n\n# 2.json数据类型\n\n\n# 2.1相关函数\n\n函数名称                 描述\njson_array           创建一个json数组\njson_object          创建一个json对象\njson_array_append    在数组末尾添加一个元素\njson_array_insert    在指定位置插入一个元素到一个数组中\njson_contains        检查json文本是否包含指定路径对应的值\njson_contains_path   检查json文本是否包含指定路径\njson_depth           返回json文本的最大深度\njson_extract         从json文本中提取数据\njson_insert          插入数据到json文本中指定位置\njson_keys            返回json对象的所有键\njson_length          返回json文本中的元素个数\njson_merge           合并两个或更多json文本\njson_objectagg       返回值为json类型的聚合函数\njson_overlaps        检查两个json文本是否有重叠\njson_pretty          将json文本格式化并美化\njson_quote           对json文本中的字符串添加引号\njson_remove          从json文本中移除指定的键\njson_replace         用新值替换json文本中的指定键\njson_search          在json文本中搜索指定的值，并返回其路径\njson_set             设置json文本中指定路径对应的值\njson_storage_free    释放json值占用的存储空间\njson_storage_size    返回json值所占用的存储空间大小\njson_table           从json文本中提取数据，并存储为关系型表格的形式\njson_type            返回json值的类型\n\n\n# 1.json_array 创建一个json数组\n\n--函数 json_array([val[, val] ...])\n\n--示例\nselect json_array("a","b","c") as json_arr;\n--返回结果   ["a", "b", "c"]\n\n-- 注：这里并不要求数组内元素数据类型一致\nselect json_array("a","b","c",1,2,3) as json_arr;\n--返回结果   ["a", "b", "c", 1, 2, 3]\n\n\n\n# 2.json_object 创建一个json对象\n\n--函数 json_object([key, val[, key, val] ...])\n--示例\nselect json_object(\'name\', \'张三\', \'age\', 20, \'gender\', \'male\') as json_obj;\n--返回结果   {"age": 20, "name": "张三", "gender": "male"}\n\n\n\n# 3.json_array_append在数组末尾添加一个元素\n\n--函数 json_array_append(json_doc, path, val[, path, val] ...)\n\n--示例\nselect json_array_append(json_array("a","b","c",1,2,3),"$","**") as json_arr;\n--返回结果  ["a", "b", "c", 1, 2, 3, "**"]\n\nselect json_array_append(json_array("a","b","c",1,2,3),"$[0]","**") as json_arr;\n--返回结果  [["a", "**"], "b", "c", 1, 2, 3]\n\n\n其中，参数解释如下：\n\n * json_doc：需要修改的 json 文档；\n * path：要追加元素的路径；\n * val：要追加的值。\n\n其返回值为修改后的 json 文档，如果原 json 文档不是合法的 json 数组，则返回 null。\n\n注意，\'$\' 表示向数组末尾添加元素，如果要指定其他位置，则需要使用对应的索引，例如 $[0] 表示向数组第一个元素前添加一个新元素\n\n\n# 4.json_array_insert在指定位置插入一个元素到一个数组中\n\n--函数 json_array_insert(json_doc, path, val[, path, val] ...)\n\n--示例\nselect json_array_insert(json_array("a","b","c",1,2,3),"$[1]","**") as json_arr;\n--返回结果  ["a", "**", "b", "c", 1, 2, 3]\n\n\n其中，参数解释如下：\n\n * json_doc：需要修改的 json 文档；\n * path：要插入元素的路径；\n * val：要插入的值。\n\n其返回值为修改后的 json 文档，如果原 json 文档不是合法的 json 数组，则返回 null。\n\n注意，\'$[1]\' 表示向数组第二个元素前添加一个新元素，如果要指定其他位置，则需要使用对应的索引。\n\n\n# 5.json_contains 检查json文本是否包含指定路径对应的值\n\njson_contains 是 mysql 中的一个 json 函数，用于判断 json 文档中是否包含指定的值或对象。以下是其语法：\n\n--函数 json_contains(json_doc, val[, path])\nselect * from test_json where json_contains(`json_array`, \'3\')\n\n\n其中，参数解释如下：\n\n * json_doc：需要查找的 json 文档；\n * val：要查找的值或对象；\n * path：可选，指定要查找的路径。\n\n其返回值为 1 或 0，分别表示找到和未找到。\n\n以下是一个示例，假设表 student 中的字段 grades 是一个 json 数组，我们要判断该数组中是否包含成绩 80：\n\nselect json_contains(grades, 80) from student where id = 1;\n\n\n如果数组中包含成绩 80，则返回 1，否则返回 0。\n\n注意，如果要查找的是一个对象，可以在 val 参数中直接传入一个 json 对象，例如：\n\nselect json_contains(data, \'{"name": "tom", "age": 18}\', \'$.students\') from class where id = 1;\n\n\n以上语句表示查找表 class 中的 data 字段中名为 students 的 json 数组中是否包含一个名字为 tom，年龄为 18 的对象。如果包含，则返回 1，否则返回 0。\n\n\n# 分组后用逗号分隔\n\n假设a表中有以下两个字段：user_id和age。要将a表中的user_id用逗号分隔，按age字段进行分组，可以使用mysql的group_concat函数实现。具体的sql语句如下所示：\n\ncopy codeselect age, group_concat(user_id separator \',\') as user_ids\nfrom a\ngroup by age;\n\n\n在这条sql语句中，先选择了age字段和使用group_concat函数连接user_id，使用“,”作为分隔符，并将其命名为user_ids，然后根据age字段进行分组。\n\n执行完这条sql语句之后，会返回一个结果集，其中每一行代表一个分组，包含该分组的age值和该分组内的所有user_id，用逗号分隔。\n\n\n# 分组后抓换为json数组\n\n要将a表中的user_id设置为json数组，按age字段进行分组，可以使用mysql的group_concat函数和json_array函数实现。具体的sql语句如下所示：\n\ncopy codeselect age, concat(\'[\', group_concat(json_quote(user_id)), \']\') as user_ids\nfrom a\ngroup by age;\n\n\n在这条sql语句中，先选择了age字段和使用group_concat函数连接使用json_quote函数处理过的user_id，并在最终结果外包裹了一个中括号“[]”，使用concat函数实现字符串拼接，将其命名为user_ids，然后根据age字段进行分组。\n\n执行完这条sql语句之后，会返回一个结果集，其中每一行代表一个分组，包含该分组的age值和该分组内的所有user_id，用json数组形式表示。',charsets:{cjk:!0},lastUpdated:"2024/04/29, 11:14:33",lastUpdatedTimestamp:1714360473e3},{title:"mapstruct",frontmatter:{title:"mapstruct",date:"2024-04-19T13:53:07.000Z",permalink:"/pages/7e52b3/"},regularPath:"/05.java%E5%B7%A5%E5%85%B7/02.mapstruct/01.mapstruct.html",relativePath:"05.java工具/02.mapstruct/01.mapstruct.md",key:"v-44f2eec0",path:"/pages/7e52b3/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"2024/04/29, 11:14:33",lastUpdatedTimestamp:1714360473e3},{title:"mapstruct无法获取lombok生成的get和set方法",frontmatter:{title:"mapstruct无法获取lombok生成的get和set方法",date:"2024-04-19T13:52:05.000Z",permalink:"/pages/009a23/"},regularPath:"/05.java%E5%B7%A5%E5%85%B7/02.mapstruct/02.mapstruct%E6%97%A0%E6%B3%95%E8%8E%B7%E5%8F%96lombok%E7%94%9F%E6%88%90%E7%9A%84get%E5%92%8Cset%E6%96%B9%E6%B3%95.html",relativePath:"05.java工具/02.mapstruct/02.mapstruct无法获取lombok生成的get和set方法.md",key:"v-5d5a30a0",path:"/pages/009a23/",headers:[{level:2,title:"mapstruct无法获取lombok生成的get和set方法",slug:"mapstruct无法获取lombok生成的get和set方法",normalizedTitle:"mapstruct无法获取lombok生成的get和set方法",charIndex:2},{level:3,title:"1.问题描述",slug:"_1-问题描述",normalizedTitle:"1.问题描述",charIndex:91},{level:3,title:"2.问题解决过程和分析",slug:"_2-问题解决过程和分析",normalizedTitle:"2.问题解决过程和分析",charIndex:2055}],headersStr:"mapstruct无法获取lombok生成的get和set方法 1.问题描述 2.问题解决过程和分析",content:"# mapstruct无法获取lombok生成的get和set方法\n\n版本：\n\njdk: 17\n\nlombok:1.18.24\n\nmapstruct:1.5.5.Final\n\n\n# 1.问题描述\n\n@Data\npublic class AccountInfo implements Serializable {\n\n    private static final long serialVersionUID = 1L;\n    \n    private String id;\n\n    private String loginName;\n\n    private String loginPassword;\n\n    private Long loginTime;\n\n    private Integer enabled;\n\n    private Integer deleted;\n\n    private Date createTime;\n\n    private String createById;\n\n    private Date updateTime;\n    \n    private String updateById;\n}\n\n\n@Data\npublic class AccountVO implements java.io.Serializable {\n\n    private static final long serialVersionUID = 1L;\n\n    private String id;\n\n    private String loginName;\n\n    private Integer enabled;\n\n    private Date createTime;\n}\n\n\n使用mapstruct将AccountInfo转为AccountVO\n\n@Mapper\npublic interface AccountMapper {\n\n    AccountMapper  mapper = Mappers.getMapper(AccountMapper.class);\n\n    AccountVO account2AccountVO(AccountInfo account);\n}\n\n\n该文件在/src/main/java/下时生成的.class文件为下方\n\npublic class AccountMapperImpl implements AccountMapper {\n    public AccountMapperImpl() {\n    }\n\n    public AccountVO account2AccountVO(AccountInfo account) {\n        if (account == null) {\n            return null;\n        } else {\n            AccountVO accountVO = new AccountVO();\n            return accountVO;\n        }\n    }\n}\n\n\n该文件在/src/test/java/下时生成的.class文件为下方\n\npublic class AccountMapperImpl implements AccountMapper {\n    public AccountMapperImpl() {\n    }\n\n    public AccountVO account2AccountVO(AccountInfo account) {\n        if (account == null) {\n            return null;\n        } else {\n            AccountVO accountVO = new AccountVO();\n            accountVO.setId(account.getId());\n            accountVO.setLoginName(account.getLoginName());\n            accountVO.setEnabled(account.getEnabled());\n            accountVO.setCreateTime(account.getCreateTime());\n            return accountVO;\n        }\n    }\n}\n\n\n发现main文件夹下生成的比起test文件夹下生成的少了accountVO.setId(account.getId());等代码\n\n我们希望main文件夹下也能生成accountVO.setId(account.getId());等代码\n\n\n# 2.问题解决过程和分析\n\n经过尝试发现当不适用lombok的@Data注解而是使用手写get和set方法时候可以正常生成accountVO.setId(account.getId());等代码\n\nlombok和都是mapstruct在编译时通过注解生成.class文件\n\n猜测是否是mapstruct在生成impl时lombok还未生成get和set方法，\n\n那为什么/src/test/java/下的有accountVO.setId(account.getId());等代码，应该是此时lombok已经处理完了此时已经可以获取到get和set方法了\n\n那有没有办法指定代码的编译顺序呢，\n\nmaven项目下做以下尝试 在模块A中写实体类，在模块B中导入A模块，在模块B中写mapstructMapper接口\n\n经过尝试，这种方法可以解决该问题impl中可以有accountVO.setId(account.getId());等代码(但是这种方法限制了实体类必须和mapstructMapper放在不同模块中)\n\n继续在网上找解决办法，终于找到解决此问题的方法\n\n原来打包插件\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-compiler-plugin</artifactId>\n                <version>3.11.0</version>\n                <configuration>\n                    <source>${java.version}</source>\n                    <target>${java.version}</target>\n                    <encoding>UTF-8</encoding>\n                </configuration>\n            </plugin>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n                <version>${spring-boot.version}</version>\n                <configuration>\n                    <excludes>\n                        <exclude>\n                            <groupId>org.projectlombok</groupId>\n                            <artifactId>lombok</artifactId>\n                        </exclude>\n                    </excludes>\n                </configuration>\n            </plugin>\n        </plugins>\n    </build>\n\n\n修改后打包插件\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-compiler-plugin</artifactId>\n                <version>3.11.0</version>\n                <configuration>\n                    <source>${java.version}</source>\n                    <target>${java.version}</target>\n                    <encoding>UTF-8</encoding>\n                    \x3c!--主要代码就在这里 --\x3e\n                    <annotationProcessorPaths>\n                        \x3c!-- Lombok 在编译时会通过这个插件生成代码 --\x3e\n                        <path>\n                            <groupId>org.projectlombok</groupId>\n                            <artifactId>lombok</artifactId>\n                            <version>1.18.24</version>\n                        </path>\n                        \x3c!-- MapStruct 在编译时会通过这个插件生成代码 --\x3e\n                        <path>\n                            <groupId>org.mapstruct</groupId>\n                            <artifactId>mapstruct-processor</artifactId>\n                            <version>${mapstruct.version}</version>\n                        </path>\n                    </annotationProcessorPaths>\n                </configuration>\n            </plugin>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n                <version>${spring-boot.version}</version>\n                <configuration>\n                    <excludes>\n                        <exclude>\n                            <groupId>org.projectlombok</groupId>\n                            <artifactId>lombok</artifactId>\n                        </exclude>\n                    </excludes>\n                </configuration>\n            </plugin>\n        </plugins>\n    </build>\n",normalizedContent:"# mapstruct无法获取lombok生成的get和set方法\n\n版本：\n\njdk: 17\n\nlombok:1.18.24\n\nmapstruct:1.5.5.final\n\n\n# 1.问题描述\n\n@data\npublic class accountinfo implements serializable {\n\n    private static final long serialversionuid = 1l;\n    \n    private string id;\n\n    private string loginname;\n\n    private string loginpassword;\n\n    private long logintime;\n\n    private integer enabled;\n\n    private integer deleted;\n\n    private date createtime;\n\n    private string createbyid;\n\n    private date updatetime;\n    \n    private string updatebyid;\n}\n\n\n@data\npublic class accountvo implements java.io.serializable {\n\n    private static final long serialversionuid = 1l;\n\n    private string id;\n\n    private string loginname;\n\n    private integer enabled;\n\n    private date createtime;\n}\n\n\n使用mapstruct将accountinfo转为accountvo\n\n@mapper\npublic interface accountmapper {\n\n    accountmapper  mapper = mappers.getmapper(accountmapper.class);\n\n    accountvo account2accountvo(accountinfo account);\n}\n\n\n该文件在/src/main/java/下时生成的.class文件为下方\n\npublic class accountmapperimpl implements accountmapper {\n    public accountmapperimpl() {\n    }\n\n    public accountvo account2accountvo(accountinfo account) {\n        if (account == null) {\n            return null;\n        } else {\n            accountvo accountvo = new accountvo();\n            return accountvo;\n        }\n    }\n}\n\n\n该文件在/src/test/java/下时生成的.class文件为下方\n\npublic class accountmapperimpl implements accountmapper {\n    public accountmapperimpl() {\n    }\n\n    public accountvo account2accountvo(accountinfo account) {\n        if (account == null) {\n            return null;\n        } else {\n            accountvo accountvo = new accountvo();\n            accountvo.setid(account.getid());\n            accountvo.setloginname(account.getloginname());\n            accountvo.setenabled(account.getenabled());\n            accountvo.setcreatetime(account.getcreatetime());\n            return accountvo;\n        }\n    }\n}\n\n\n发现main文件夹下生成的比起test文件夹下生成的少了accountvo.setid(account.getid());等代码\n\n我们希望main文件夹下也能生成accountvo.setid(account.getid());等代码\n\n\n# 2.问题解决过程和分析\n\n经过尝试发现当不适用lombok的@data注解而是使用手写get和set方法时候可以正常生成accountvo.setid(account.getid());等代码\n\nlombok和都是mapstruct在编译时通过注解生成.class文件\n\n猜测是否是mapstruct在生成impl时lombok还未生成get和set方法，\n\n那为什么/src/test/java/下的有accountvo.setid(account.getid());等代码，应该是此时lombok已经处理完了此时已经可以获取到get和set方法了\n\n那有没有办法指定代码的编译顺序呢，\n\nmaven项目下做以下尝试 在模块a中写实体类，在模块b中导入a模块，在模块b中写mapstructmapper接口\n\n经过尝试，这种方法可以解决该问题impl中可以有accountvo.setid(account.getid());等代码(但是这种方法限制了实体类必须和mapstructmapper放在不同模块中)\n\n继续在网上找解决办法，终于找到解决此问题的方法\n\n原来打包插件\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupid>org.apache.maven.plugins</groupid>\n                <artifactid>maven-compiler-plugin</artifactid>\n                <version>3.11.0</version>\n                <configuration>\n                    <source>${java.version}</source>\n                    <target>${java.version}</target>\n                    <encoding>utf-8</encoding>\n                </configuration>\n            </plugin>\n            <plugin>\n                <groupid>org.springframework.boot</groupid>\n                <artifactid>spring-boot-maven-plugin</artifactid>\n                <version>${spring-boot.version}</version>\n                <configuration>\n                    <excludes>\n                        <exclude>\n                            <groupid>org.projectlombok</groupid>\n                            <artifactid>lombok</artifactid>\n                        </exclude>\n                    </excludes>\n                </configuration>\n            </plugin>\n        </plugins>\n    </build>\n\n\n修改后打包插件\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupid>org.apache.maven.plugins</groupid>\n                <artifactid>maven-compiler-plugin</artifactid>\n                <version>3.11.0</version>\n                <configuration>\n                    <source>${java.version}</source>\n                    <target>${java.version}</target>\n                    <encoding>utf-8</encoding>\n                    \x3c!--主要代码就在这里 --\x3e\n                    <annotationprocessorpaths>\n                        \x3c!-- lombok 在编译时会通过这个插件生成代码 --\x3e\n                        <path>\n                            <groupid>org.projectlombok</groupid>\n                            <artifactid>lombok</artifactid>\n                            <version>1.18.24</version>\n                        </path>\n                        \x3c!-- mapstruct 在编译时会通过这个插件生成代码 --\x3e\n                        <path>\n                            <groupid>org.mapstruct</groupid>\n                            <artifactid>mapstruct-processor</artifactid>\n                            <version>${mapstruct.version}</version>\n                        </path>\n                    </annotationprocessorpaths>\n                </configuration>\n            </plugin>\n            <plugin>\n                <groupid>org.springframework.boot</groupid>\n                <artifactid>spring-boot-maven-plugin</artifactid>\n                <version>${spring-boot.version}</version>\n                <configuration>\n                    <excludes>\n                        <exclude>\n                            <groupid>org.projectlombok</groupid>\n                            <artifactid>lombok</artifactid>\n                        </exclude>\n                    </excludes>\n                </configuration>\n            </plugin>\n        </plugins>\n    </build>\n",charsets:{cjk:!0},lastUpdated:"2024/04/29, 11:14:33",lastUpdatedTimestamp:1714360473e3},{title:"aop应用",frontmatter:{title:"aop应用",date:"2024-04-19T14:01:22.000Z",permalink:"/pages/3eb2d0/"},regularPath:"/06.spring/09.spring%E5%BA%94%E7%94%A8/01.aop%E5%BA%94%E7%94%A8.html",relativePath:"06.spring/09.spring应用/01.aop应用.md",key:"v-9067353e",path:"/pages/3eb2d0/",headers:[{level:3,title:"打印入参数和出参",slug:"打印入参数和出参",normalizedTitle:"打印入参数和出参",charIndex:2},{level:3,title:"防止短时间内重复请求",slug:"防止短时间内重复请求",normalizedTitle:"防止短时间内重复请求",charIndex:5232}],headersStr:"打印入参数和出参 防止短时间内重复请求",content:'# 打印入参数和出参\n\n参数打印借助 swagger的ApiOperation注解（可根据情况自定义注解或去除相关部分）\n\npackage com.zk.supplychain.aop;\n\nimport cn.hutool.core.util.StrUtil;\nimport cn.hutool.json.JSONUtil;\nimport com.alibaba.fastjson.JSONObject;\nimport com.zk.supplychain.util.WebUtils;\nimport com.zk.supplychain.webdata.R;\nimport io.swagger.annotations.ApiOperation;\nimport lombok.AllArgsConstructor;\nimport lombok.extern.slf4j.Slf4j;\nimport org.aspectj.lang.JoinPoint;\nimport org.aspectj.lang.ProceedingJoinPoint;\nimport org.aspectj.lang.annotation.Around;\nimport org.aspectj.lang.annotation.Aspect;\nimport org.aspectj.lang.annotation.Pointcut;\nimport org.aspectj.lang.reflect.MethodSignature;\nimport org.springframework.stereotype.Component;\n\nimport javax.servlet.ServletOutputStream;\nimport javax.servlet.http.HttpServletResponse;\nimport java.io.IOException;\nimport java.lang.reflect.Method;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Objects;\n\n@Aspect\n@Component\n@Slf4j\n@AllArgsConstructor\npublic class LogAspect {\n\n    private final RequestsLimitingService requestsLimitingService;\n\n\n    @Pointcut("@annotation(io.swagger.annotations.ApiOperation)")\n    public void pointcut() {\n    }\n\n    /**\n     * 环绕通知\n     * @param joinPoint\n     * @return\n     * @throws Throwable\n     */\n    @Around("pointcut()")\n    public Object execParamLogAspect(ProceedingJoinPoint joinPoint) throws Throwable {\n\n        // 如果停用日志打印，则直接执行原有代码逻辑，跳过打印日志\n        if (false) {\n            return joinPoint.proceed();\n        }\n        long startingTime = System.currentTimeMillis();\n        // 如果启用日志分析，则获取方法上的注解信息，并打印方法入参出参\n        Method method = this.getMethod(joinPoint);\n        //包\n        String pack=method.getDeclaringClass().getName();\n        //方法名\n        String methodName=method.getName();\n        //拼接包和方法\n        String str= StrUtil.format("{}.{}",pack,methodName);\n        //传入的参数\n        Object[] args = joinPoint.getArgs();\n        //借用swagger注解\n        ApiOperation apiOperation = method.getAnnotation(ApiOperation.class);\n        if (Objects.nonNull(apiOperation)){\n            String apiOperationValue = apiOperation.value();\n            str=StrUtil.format("{}----------\x3e[{}]",str,apiOperationValue);\n        }\n        //防止重复请求\n        DisallowRepeatedRequests disallowRepeatedRequests = method.getAnnotation(DisallowRepeatedRequests.class);\n        if (Objects.nonNull(disallowRepeatedRequests)){\n            Boolean requestCharacteristic = requestsLimitingService.getRequestCharacteristic(disallowRepeatedRequests, joinPoint);\n            if (!requestCharacteristic){\n                HttpServletResponse response = WebUtils.getResponse();\n                response.setContentType("application/json;charset=UTF-8");\n                ServletOutputStream outputStream = null;\n                R<Object> r = R.failed("9999", "请勿重复操作");\n                try {\n                    outputStream = response.getOutputStream();\n                    outputStream.write(JSONUtil.parseObj(r,false).toString().getBytes("UTF-8"));\n                } catch (IOException e) {\n                    e.printStackTrace();\n                } finally {\n                    outputStream.flush();\n                    outputStream.close();\n                    // 打印出参\n                    this.printResult(str, r);\n                    log.info("本次请求响应时间为:[{}]",System.currentTimeMillis()-startingTime);\n                    return null;\n                }\n\n            }\n        }\n\n        // 打印入参\n        this.printParam(str, args);\n        // 执行原有方法逻辑\n        Object result = joinPoint.proceed();\n        // 打印出参\n        this.printResult(str, result);\n        log.info("本次请求响应时间为:[{}]",System.currentTimeMillis()-startingTime);\n        return result;\n    }\n\n    private Method getMethod(JoinPoint jp) throws Exception {\n        MethodSignature methodSignature = (MethodSignature) jp.getSignature();\n        Method method = methodSignature.getMethod();\n        return jp.getTarget().getClass().getDeclaredMethod(method.getName(), method.getParameterTypes());\n    }\n\n\n\n    /**\n     * 打印入参\n     * @param key  方法名称\n     * @param args 参数\n     */\n\n    private void printParam(String key, Object[] args) {\n        if (log.isInfoEnabled()) {\n            if (args.length!=0){\n            log.info("{}方法入参为：\\n{}", key, JSONUtil.toJsonPrettyStr(args));\n            }else {\n                log.info("{}方法无参数传入",key);\n            }\n        }\n    }\n\n\n    /**\n     * 打印出参\n     * @param key    方法名称\n     * @param result 方法返回值\n     */\n\n    private void printResult(String key, Object result) {\n        if (log.isInfoEnabled()) {\n            try{\n                cn.hutool.json.JSONObject jsonObject = JSONUtil.parseObj(result, false,true);\n                //如果不是json则为部包一层data\n                if (jsonObject.size()==0){\n                    Map<String,Object> map =new HashMap<>();\n                    map.put("data",result);\n                    jsonObject=JSONUtil.parseObj(map, false,true);\n                }\n                String JsonData=JSONUtil.toJsonPrettyStr(jsonObject);\n                log.info("{}方法出参为：\\n{}", key, JsonData);\n\n            }catch (Exception e){\n                log.info("{}方法出参为：\\n{}", key, JSONObject.toJSONString(result,true));\n            }\n\n\n        }\n    }\n\n\n}\n\n\n\n\n\n# 防止短时间内重复请求\n\n自定义注解\n\npackage com.zk.supplychain.aop;\n\nimport java.lang.annotation.ElementType;\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\nimport java.lang.annotation.Target;\n\n/**\n * 禁止重复请求\n */\n@Target({ElementType.METHOD, ElementType.TYPE})\n@Retention(RetentionPolicy.RUNTIME)\npublic @interface DisallowRepeatedRequests {\n\n    /**\n     * 间隔时间(毫秒) 默认 1000\n     */\n    long interval() default 1000;\n\n\n}\n\n\npackage com.zk.supplychain.aop;\n\nimport cn.hutool.core.util.StrUtil;\nimport cn.hutool.crypto.SecureUtil;\nimport cn.hutool.json.JSONObject;\nimport cn.hutool.json.JSONUtil;\nimport com.zk.supplychain.util.WebUtils;\nimport lombok.AllArgsConstructor;\nimport lombok.SneakyThrows;\nimport lombok.extern.slf4j.Slf4j;\nimport org.aspectj.lang.JoinPoint;\nimport org.aspectj.lang.ProceedingJoinPoint;\nimport org.aspectj.lang.reflect.MethodSignature;\nimport org.springframework.data.redis.core.StringRedisTemplate;\nimport org.springframework.stereotype.Service;\n\nimport javax.servlet.http.HttpServletRequest;\nimport java.lang.reflect.Method;\nimport java.util.Date;\nimport java.util.concurrent.TimeUnit;\n\n@Service\n@Slf4j\n@AllArgsConstructor\npublic class RequestsLimitingService {\n\n    private final StringRedisTemplate stringRedisTemplate;\n\n    /**\n     *\n     * @param joinPoint aop环绕通知参数\n     * @return\n     */\n    @SneakyThrows\n    public Boolean getRequestCharacteristic(DisallowRepeatedRequests disallowRepeatedRequests,ProceedingJoinPoint joinPoint){\n        // 如果启用日志分析，则获取方法上的注解信息，并打印方法入参出参\n        Method method = this.getMethod(joinPoint);\n        //包\n        String pack=method.getDeclaringClass().getName();\n        //方法名\n        String methodName=method.getName();\n        //拼接包和方法\n        String str= StrUtil.format("{}.{}",pack,methodName);\n        //传入的参数\n        Object[] args = joinPoint.getArgs();\n        HttpServletRequest request = WebUtils.getRequest();\n        String uri = request.getRequestURI();\n        String ip = WebUtils.getIpAddr();\n        String accountId = WebUtils.getAccountId();\n        JSONObject obj = JSONUtil.createObj();\n        obj.set("methodName",str);\n        obj.set("parameter",args);\n        obj.set("uri",uri);\n        obj.set("ip",ip);\n        obj.set("accountId",accountId);\n        String s = obj.toString();\n        String tag = SecureUtil.md5(s);\n        String redisKeyTemplate="RequestsLimiting:"+tag+"";\n        Date date = new Date();\n        Boolean allowRequest = stringRedisTemplate.opsForValue().setIfAbsent(redisKeyTemplate, String.valueOf(date.getTime()),disallowRepeatedRequests.interval(), TimeUnit.MILLISECONDS);\n        return allowRequest;\n    }\n\n    private Method getMethod(JoinPoint jp) throws Exception {\n        MethodSignature methodSignature = (MethodSignature) jp.getSignature();\n        Method method = methodSignature.getMethod();\n        return jp.getTarget().getClass().getDeclaredMethod(method.getName(), method.getParameterTypes());\n    }\n}\n',normalizedContent:'# 打印入参数和出参\n\n参数打印借助 swagger的apioperation注解（可根据情况自定义注解或去除相关部分）\n\npackage com.zk.supplychain.aop;\n\nimport cn.hutool.core.util.strutil;\nimport cn.hutool.json.jsonutil;\nimport com.alibaba.fastjson.jsonobject;\nimport com.zk.supplychain.util.webutils;\nimport com.zk.supplychain.webdata.r;\nimport io.swagger.annotations.apioperation;\nimport lombok.allargsconstructor;\nimport lombok.extern.slf4j.slf4j;\nimport org.aspectj.lang.joinpoint;\nimport org.aspectj.lang.proceedingjoinpoint;\nimport org.aspectj.lang.annotation.around;\nimport org.aspectj.lang.annotation.aspect;\nimport org.aspectj.lang.annotation.pointcut;\nimport org.aspectj.lang.reflect.methodsignature;\nimport org.springframework.stereotype.component;\n\nimport javax.servlet.servletoutputstream;\nimport javax.servlet.http.httpservletresponse;\nimport java.io.ioexception;\nimport java.lang.reflect.method;\nimport java.util.hashmap;\nimport java.util.map;\nimport java.util.objects;\n\n@aspect\n@component\n@slf4j\n@allargsconstructor\npublic class logaspect {\n\n    private final requestslimitingservice requestslimitingservice;\n\n\n    @pointcut("@annotation(io.swagger.annotations.apioperation)")\n    public void pointcut() {\n    }\n\n    /**\n     * 环绕通知\n     * @param joinpoint\n     * @return\n     * @throws throwable\n     */\n    @around("pointcut()")\n    public object execparamlogaspect(proceedingjoinpoint joinpoint) throws throwable {\n\n        // 如果停用日志打印，则直接执行原有代码逻辑，跳过打印日志\n        if (false) {\n            return joinpoint.proceed();\n        }\n        long startingtime = system.currenttimemillis();\n        // 如果启用日志分析，则获取方法上的注解信息，并打印方法入参出参\n        method method = this.getmethod(joinpoint);\n        //包\n        string pack=method.getdeclaringclass().getname();\n        //方法名\n        string methodname=method.getname();\n        //拼接包和方法\n        string str= strutil.format("{}.{}",pack,methodname);\n        //传入的参数\n        object[] args = joinpoint.getargs();\n        //借用swagger注解\n        apioperation apioperation = method.getannotation(apioperation.class);\n        if (objects.nonnull(apioperation)){\n            string apioperationvalue = apioperation.value();\n            str=strutil.format("{}----------\x3e[{}]",str,apioperationvalue);\n        }\n        //防止重复请求\n        disallowrepeatedrequests disallowrepeatedrequests = method.getannotation(disallowrepeatedrequests.class);\n        if (objects.nonnull(disallowrepeatedrequests)){\n            boolean requestcharacteristic = requestslimitingservice.getrequestcharacteristic(disallowrepeatedrequests, joinpoint);\n            if (!requestcharacteristic){\n                httpservletresponse response = webutils.getresponse();\n                response.setcontenttype("application/json;charset=utf-8");\n                servletoutputstream outputstream = null;\n                r<object> r = r.failed("9999", "请勿重复操作");\n                try {\n                    outputstream = response.getoutputstream();\n                    outputstream.write(jsonutil.parseobj(r,false).tostring().getbytes("utf-8"));\n                } catch (ioexception e) {\n                    e.printstacktrace();\n                } finally {\n                    outputstream.flush();\n                    outputstream.close();\n                    // 打印出参\n                    this.printresult(str, r);\n                    log.info("本次请求响应时间为:[{}]",system.currenttimemillis()-startingtime);\n                    return null;\n                }\n\n            }\n        }\n\n        // 打印入参\n        this.printparam(str, args);\n        // 执行原有方法逻辑\n        object result = joinpoint.proceed();\n        // 打印出参\n        this.printresult(str, result);\n        log.info("本次请求响应时间为:[{}]",system.currenttimemillis()-startingtime);\n        return result;\n    }\n\n    private method getmethod(joinpoint jp) throws exception {\n        methodsignature methodsignature = (methodsignature) jp.getsignature();\n        method method = methodsignature.getmethod();\n        return jp.gettarget().getclass().getdeclaredmethod(method.getname(), method.getparametertypes());\n    }\n\n\n\n    /**\n     * 打印入参\n     * @param key  方法名称\n     * @param args 参数\n     */\n\n    private void printparam(string key, object[] args) {\n        if (log.isinfoenabled()) {\n            if (args.length!=0){\n            log.info("{}方法入参为：\\n{}", key, jsonutil.tojsonprettystr(args));\n            }else {\n                log.info("{}方法无参数传入",key);\n            }\n        }\n    }\n\n\n    /**\n     * 打印出参\n     * @param key    方法名称\n     * @param result 方法返回值\n     */\n\n    private void printresult(string key, object result) {\n        if (log.isinfoenabled()) {\n            try{\n                cn.hutool.json.jsonobject jsonobject = jsonutil.parseobj(result, false,true);\n                //如果不是json则为部包一层data\n                if (jsonobject.size()==0){\n                    map<string,object> map =new hashmap<>();\n                    map.put("data",result);\n                    jsonobject=jsonutil.parseobj(map, false,true);\n                }\n                string jsondata=jsonutil.tojsonprettystr(jsonobject);\n                log.info("{}方法出参为：\\n{}", key, jsondata);\n\n            }catch (exception e){\n                log.info("{}方法出参为：\\n{}", key, jsonobject.tojsonstring(result,true));\n            }\n\n\n        }\n    }\n\n\n}\n\n\n\n\n\n# 防止短时间内重复请求\n\n自定义注解\n\npackage com.zk.supplychain.aop;\n\nimport java.lang.annotation.elementtype;\nimport java.lang.annotation.retention;\nimport java.lang.annotation.retentionpolicy;\nimport java.lang.annotation.target;\n\n/**\n * 禁止重复请求\n */\n@target({elementtype.method, elementtype.type})\n@retention(retentionpolicy.runtime)\npublic @interface disallowrepeatedrequests {\n\n    /**\n     * 间隔时间(毫秒) 默认 1000\n     */\n    long interval() default 1000;\n\n\n}\n\n\npackage com.zk.supplychain.aop;\n\nimport cn.hutool.core.util.strutil;\nimport cn.hutool.crypto.secureutil;\nimport cn.hutool.json.jsonobject;\nimport cn.hutool.json.jsonutil;\nimport com.zk.supplychain.util.webutils;\nimport lombok.allargsconstructor;\nimport lombok.sneakythrows;\nimport lombok.extern.slf4j.slf4j;\nimport org.aspectj.lang.joinpoint;\nimport org.aspectj.lang.proceedingjoinpoint;\nimport org.aspectj.lang.reflect.methodsignature;\nimport org.springframework.data.redis.core.stringredistemplate;\nimport org.springframework.stereotype.service;\n\nimport javax.servlet.http.httpservletrequest;\nimport java.lang.reflect.method;\nimport java.util.date;\nimport java.util.concurrent.timeunit;\n\n@service\n@slf4j\n@allargsconstructor\npublic class requestslimitingservice {\n\n    private final stringredistemplate stringredistemplate;\n\n    /**\n     *\n     * @param joinpoint aop环绕通知参数\n     * @return\n     */\n    @sneakythrows\n    public boolean getrequestcharacteristic(disallowrepeatedrequests disallowrepeatedrequests,proceedingjoinpoint joinpoint){\n        // 如果启用日志分析，则获取方法上的注解信息，并打印方法入参出参\n        method method = this.getmethod(joinpoint);\n        //包\n        string pack=method.getdeclaringclass().getname();\n        //方法名\n        string methodname=method.getname();\n        //拼接包和方法\n        string str= strutil.format("{}.{}",pack,methodname);\n        //传入的参数\n        object[] args = joinpoint.getargs();\n        httpservletrequest request = webutils.getrequest();\n        string uri = request.getrequesturi();\n        string ip = webutils.getipaddr();\n        string accountid = webutils.getaccountid();\n        jsonobject obj = jsonutil.createobj();\n        obj.set("methodname",str);\n        obj.set("parameter",args);\n        obj.set("uri",uri);\n        obj.set("ip",ip);\n        obj.set("accountid",accountid);\n        string s = obj.tostring();\n        string tag = secureutil.md5(s);\n        string rediskeytemplate="requestslimiting:"+tag+"";\n        date date = new date();\n        boolean allowrequest = stringredistemplate.opsforvalue().setifabsent(rediskeytemplate, string.valueof(date.gettime()),disallowrepeatedrequests.interval(), timeunit.milliseconds);\n        return allowrequest;\n    }\n\n    private method getmethod(joinpoint jp) throws exception {\n        methodsignature methodsignature = (methodsignature) jp.getsignature();\n        method method = methodsignature.getmethod();\n        return jp.gettarget().getclass().getdeclaredmethod(method.getname(), method.getparametertypes());\n    }\n}\n',charsets:{cjk:!0},lastUpdated:"2024/04/29, 11:14:33",lastUpdatedTimestamp:1714360473e3},{title:"网关gateway",frontmatter:{title:"网关gateway",date:"2024-04-19T14:01:22.000Z",permalink:"/pages/64a6f5/"},regularPath:"/06.spring/09.spring%E5%BA%94%E7%94%A8/06.%E7%BD%91%E5%85%B3gateway.html",relativePath:"06.spring/09.spring应用/06.网关gateway.md",key:"v-56d56947",path:"/pages/64a6f5/",headers:[{level:3,title:"1.pom",slug:"_1-pom",normalizedTitle:"1.pom",charIndex:2},{level:3,title:"2.yml",slug:"_2-yml",normalizedTitle:"2.yml",charIndex:462},{level:3,title:"3.转发配置",slug:"_3-转发配置",normalizedTitle:"3.转发配置",charIndex:914},{level:3,title:"4.跨域配置",slug:"_4-跨域配置",normalizedTitle:"4.跨域配置",charIndex:1727},{level:4,title:"4.1 Spring Gateway使用WebFlux之前只需配置此项即可",slug:"_4-1-spring-gateway使用webflux之前只需配置此项即可",normalizedTitle:"4.1 spring gateway使用webflux之前只需配置此项即可",charIndex:1737},{level:4,title:"4.2 Spring Gateway使用WebFlux后还需添加一下配置",slug:"_4-2-spring-gateway使用webflux后还需添加一下配置",normalizedTitle:"4.2 spring gateway使用webflux后还需添加一下配置",charIndex:2724}],headersStr:"1.pom 2.yml 3.转发配置 4.跨域配置 4.1 Spring Gateway使用WebFlux之前只需配置此项即可 4.2 Spring Gateway使用WebFlux后还需添加一下配置",content:'# 1.pom\n\n\x3c!--gateway--\x3e\n<dependency>\n    <groupId>org.springframework.cloud</groupId>\n    <artifactId>spring-cloud-starter-gateway</artifactId>\n</dependency>\n\x3c!--由于springcloud2020弃用了Ribbon，因此Alibaba在2021版本nacos中删除了Ribbon的jar包，因此无法通过lb路由到指定微服务，出现了503情况。\n所以只需要引入springcloud loadbalancer包即可--\x3e\n\x3c!--客户端负载均衡loadbalancer--\x3e\n<dependency>\n    <groupId>org.springframework.cloud</groupId>\n    <artifactId>spring-cloud-starter-loadbalancer</artifactId>\n</dependency>\n\n\n\n# 2.yml\n\ninfo:\n  name: ${spring.application.name}\n  version: ${project.version}\n  description: ${project.description}\n  port: ${server.port}\n\n\nserver:\n  port: 10010\n\nspring:\n  application:\n    name: gateway\n  cloud:\n    nacos:\n      discovery:\n        server-addr: 127.0.0.1:8848\n    gateway:\n      discovery:\n        locator:\n          enabled: true\n  main:\n    web-application-type: reactive\nlogging:\n  level:\n    com.expect.user.feign.*: debug\n\n\n\n\n\n# 3.转发配置\n\nimport org.springframework.cloud.gateway.route.RouteLocator;\nimport org.springframework.cloud.gateway.route.builder.RouteLocatorBuilder;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n@Configuration\npublic class GatewayConfig {\n    @Bean\n    public RouteLocator customRouteLocator(RouteLocatorBuilder builder) {\n        return builder.routes()\n                .route("auth-service", r -> r.path("/auth/**")\n                        .uri("lb://auth-service"))\n                .route("file-service", r -> r.path("/file/**")\n                        .uri("lb://file-service"))\n                .route("websocket-service", r -> r.path("/websocket/**")\n                        .uri("lb://websocket-service"))\n                .build();\n    }\n\n\n\n# 4.跨域配置\n\n# 4.1 Spring Gateway使用WebFlux之前只需配置此项即可\n\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.web.cors.CorsConfiguration;\nimport org.springframework.web.cors.reactive.CorsWebFilter;\nimport org.springframework.web.cors.reactive.UrlBasedCorsConfigurationSource;\nimport org.springframework.web.util.pattern.PathPatternParser;\n\n/**\n * 跨域配置\n */\n@Configuration\npublic class CorsConfig  {\n\n\n    @Bean\n    public CorsWebFilter corsFilter() {\n        CorsConfiguration config = new CorsConfiguration();\n        config.addAllowedMethod("*");  // 是什么请求方法，比如GET POST PUT DELATE ...\n        config.addAllowedOrigin("*");  // 来自哪个域名的请求，*号表示所有\n        config.addAllowedHeader("*");  // 是什么请求头部\n        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource(new PathPatternParser());\n        source.registerCorsConfiguration("/**", config);\n\n        return new CorsWebFilter(source);\n    }\n}\n\n\n# 4.2 Spring Gateway使用WebFlux后还需添加一下配置\n\n> > 原因：由于Netty的bug 请求头会重复，所以需要自己写方法去掉重复的返回头\n\nimport lombok.extern.slf4j.Slf4j;\nimport org.slf4j.MDC;\nimport org.springframework.cloud.gateway.filter.GatewayFilterChain;\nimport org.springframework.cloud.gateway.filter.GlobalFilter;\nimport org.springframework.cloud.gateway.filter.NettyWriteResponseFilter;\nimport org.springframework.core.Ordered;\nimport org.springframework.http.HttpHeaders;\nimport org.springframework.stereotype.Component;\nimport org.springframework.web.server.ServerWebExchange;\nimport reactor.core.publisher.Mono;\n\nimport java.util.Optional;\nimport java.util.Set;\n\n@Slf4j\n@Component("corsResponseHeaderFilter")\npublic class CorsRemoveHeaderFilter implements GlobalFilter, Ordered {\n\n\n    @Override\n    public int getOrder() {\n        return NettyWriteResponseFilter.WRITE_RESPONSE_FILTER_ORDER + 21;\n    }\n\n    @Override\n    public Mono<Void> filter(ServerWebExchange exchange, GatewayFilterChain chain) {\n        Optional.ofNullable(MDC.get(Constants.TraceId)).ifPresent((t) -> {\n            exchange.getResponse().getHeaders().add(Constants.TraceId, t);\n        });\n\n        return chain.filter(exchange).then(Mono.defer(() -> {\n            //移除重复的返回头\n            HttpHeaders rpsHeaders = exchange.getResponse().getHeaders();\n            Set<String> headers =  Constants.headers();\n            for (String header : headers) {\n                if(rpsHeaders.containsKey(header)) {\n                    String value = rpsHeaders.getFirst(header);\n                    exchange.getResponse().getHeaders().remove(header);\n                    if (Constants.Access_Control_Allow_Methods.equals(header)) {\n                        value = Constants.ACCESS_CONTROL_ALLOW_METHODS_VALUE;\n                    }\n                    exchange.getResponse().getHeaders().set(header, value);\n                }\n            }\n            return chain.filter(exchange);\n        }));\n    }\n}\n\n\n\n常量\n\npackage com.expect.cloudgateway.data;\n\nimport java.util.HashSet;\nimport java.util.Set;\n\npublic class Constants {\n\n    public static final String ORIGIN = "Origin";\n    public static final String Access_Control_Allow_Origin = "Access-Control-Allow-Origin";\n    public static final String Access_Control_Allow_Credentials = "Access-Control-Allow-Credentials";\n    public static final String Access_Control_Allow_Methods = "Access-Control-Allow-Methods";\n    public static final String Access_Control_Request_Headers = "Access-Control-Request-Headers";\n    public static final String Access_Control_Allow_Headers = "Access-Control-Allow-Headers";\n    public static final String TraceId = "X-B3-TraceId";\n    public static final String X_FRAME_OPTIONS = "X-Frame-Options";\n    public static final String X_XSS_Protection = "X-XSS-Protection";\n    public static final String VARY = "Vary";\n    public static final String ACCESS_CONTROL_ALLOW_METHODS_VALUE ="GET,POST,PUT,DELETE,OPTIONS";\n\n\n    public static Set<String> headers = new HashSet<>();\n\n    static {\n        headers.add(Access_Control_Allow_Origin);\n        headers.add(Access_Control_Allow_Credentials);\n        headers.add(Access_Control_Allow_Methods);\n        headers.add(Access_Control_Request_Headers);\n        headers.add(Access_Control_Allow_Headers);\n        headers.add(VARY);\n        headers.add(TraceId);\n        headers.add(X_FRAME_OPTIONS);\n        headers.add(X_XSS_Protection);\n    }\n\n    public static Set<String> headers(){\n        return headers;\n    }\n\n}\n',normalizedContent:'# 1.pom\n\n\x3c!--gateway--\x3e\n<dependency>\n    <groupid>org.springframework.cloud</groupid>\n    <artifactid>spring-cloud-starter-gateway</artifactid>\n</dependency>\n\x3c!--由于springcloud2020弃用了ribbon，因此alibaba在2021版本nacos中删除了ribbon的jar包，因此无法通过lb路由到指定微服务，出现了503情况。\n所以只需要引入springcloud loadbalancer包即可--\x3e\n\x3c!--客户端负载均衡loadbalancer--\x3e\n<dependency>\n    <groupid>org.springframework.cloud</groupid>\n    <artifactid>spring-cloud-starter-loadbalancer</artifactid>\n</dependency>\n\n\n\n# 2.yml\n\ninfo:\n  name: ${spring.application.name}\n  version: ${project.version}\n  description: ${project.description}\n  port: ${server.port}\n\n\nserver:\n  port: 10010\n\nspring:\n  application:\n    name: gateway\n  cloud:\n    nacos:\n      discovery:\n        server-addr: 127.0.0.1:8848\n    gateway:\n      discovery:\n        locator:\n          enabled: true\n  main:\n    web-application-type: reactive\nlogging:\n  level:\n    com.expect.user.feign.*: debug\n\n\n\n\n\n# 3.转发配置\n\nimport org.springframework.cloud.gateway.route.routelocator;\nimport org.springframework.cloud.gateway.route.builder.routelocatorbuilder;\nimport org.springframework.context.annotation.bean;\nimport org.springframework.context.annotation.configuration;\n\n@configuration\npublic class gatewayconfig {\n    @bean\n    public routelocator customroutelocator(routelocatorbuilder builder) {\n        return builder.routes()\n                .route("auth-service", r -> r.path("/auth/**")\n                        .uri("lb://auth-service"))\n                .route("file-service", r -> r.path("/file/**")\n                        .uri("lb://file-service"))\n                .route("websocket-service", r -> r.path("/websocket/**")\n                        .uri("lb://websocket-service"))\n                .build();\n    }\n\n\n\n# 4.跨域配置\n\n# 4.1 spring gateway使用webflux之前只需配置此项即可\n\nimport org.springframework.context.annotation.bean;\nimport org.springframework.context.annotation.configuration;\nimport org.springframework.web.cors.corsconfiguration;\nimport org.springframework.web.cors.reactive.corswebfilter;\nimport org.springframework.web.cors.reactive.urlbasedcorsconfigurationsource;\nimport org.springframework.web.util.pattern.pathpatternparser;\n\n/**\n * 跨域配置\n */\n@configuration\npublic class corsconfig  {\n\n\n    @bean\n    public corswebfilter corsfilter() {\n        corsconfiguration config = new corsconfiguration();\n        config.addallowedmethod("*");  // 是什么请求方法，比如get post put delate ...\n        config.addallowedorigin("*");  // 来自哪个域名的请求，*号表示所有\n        config.addallowedheader("*");  // 是什么请求头部\n        urlbasedcorsconfigurationsource source = new urlbasedcorsconfigurationsource(new pathpatternparser());\n        source.registercorsconfiguration("/**", config);\n\n        return new corswebfilter(source);\n    }\n}\n\n\n# 4.2 spring gateway使用webflux后还需添加一下配置\n\n> > 原因：由于netty的bug 请求头会重复，所以需要自己写方法去掉重复的返回头\n\nimport lombok.extern.slf4j.slf4j;\nimport org.slf4j.mdc;\nimport org.springframework.cloud.gateway.filter.gatewayfilterchain;\nimport org.springframework.cloud.gateway.filter.globalfilter;\nimport org.springframework.cloud.gateway.filter.nettywriteresponsefilter;\nimport org.springframework.core.ordered;\nimport org.springframework.http.httpheaders;\nimport org.springframework.stereotype.component;\nimport org.springframework.web.server.serverwebexchange;\nimport reactor.core.publisher.mono;\n\nimport java.util.optional;\nimport java.util.set;\n\n@slf4j\n@component("corsresponseheaderfilter")\npublic class corsremoveheaderfilter implements globalfilter, ordered {\n\n\n    @override\n    public int getorder() {\n        return nettywriteresponsefilter.write_response_filter_order + 21;\n    }\n\n    @override\n    public mono<void> filter(serverwebexchange exchange, gatewayfilterchain chain) {\n        optional.ofnullable(mdc.get(constants.traceid)).ifpresent((t) -> {\n            exchange.getresponse().getheaders().add(constants.traceid, t);\n        });\n\n        return chain.filter(exchange).then(mono.defer(() -> {\n            //移除重复的返回头\n            httpheaders rpsheaders = exchange.getresponse().getheaders();\n            set<string> headers =  constants.headers();\n            for (string header : headers) {\n                if(rpsheaders.containskey(header)) {\n                    string value = rpsheaders.getfirst(header);\n                    exchange.getresponse().getheaders().remove(header);\n                    if (constants.access_control_allow_methods.equals(header)) {\n                        value = constants.access_control_allow_methods_value;\n                    }\n                    exchange.getresponse().getheaders().set(header, value);\n                }\n            }\n            return chain.filter(exchange);\n        }));\n    }\n}\n\n\n\n常量\n\npackage com.expect.cloudgateway.data;\n\nimport java.util.hashset;\nimport java.util.set;\n\npublic class constants {\n\n    public static final string origin = "origin";\n    public static final string access_control_allow_origin = "access-control-allow-origin";\n    public static final string access_control_allow_credentials = "access-control-allow-credentials";\n    public static final string access_control_allow_methods = "access-control-allow-methods";\n    public static final string access_control_request_headers = "access-control-request-headers";\n    public static final string access_control_allow_headers = "access-control-allow-headers";\n    public static final string traceid = "x-b3-traceid";\n    public static final string x_frame_options = "x-frame-options";\n    public static final string x_xss_protection = "x-xss-protection";\n    public static final string vary = "vary";\n    public static final string access_control_allow_methods_value ="get,post,put,delete,options";\n\n\n    public static set<string> headers = new hashset<>();\n\n    static {\n        headers.add(access_control_allow_origin);\n        headers.add(access_control_allow_credentials);\n        headers.add(access_control_allow_methods);\n        headers.add(access_control_request_headers);\n        headers.add(access_control_allow_headers);\n        headers.add(vary);\n        headers.add(traceid);\n        headers.add(x_frame_options);\n        headers.add(x_xss_protection);\n    }\n\n    public static set<string> headers(){\n        return headers;\n    }\n\n}\n',charsets:{cjk:!0},lastUpdated:"2024/04/29, 11:14:33",lastUpdatedTimestamp:1714360473e3},{title:"Springboot启动扩展点超详细总结",frontmatter:{title:"Springboot启动扩展点超详细总结",date:"2024-04-19T14:01:17.000Z",permalink:"/pages/34dc29/"},regularPath:"/06.spring/08.Springboot%E5%90%AF%E5%8A%A8%E6%89%A9%E5%B1%95%E7%82%B9%E8%B6%85%E8%AF%A6%E7%BB%86%E6%80%BB%E7%BB%93/01.Springboot%E5%90%AF%E5%8A%A8%E6%89%A9%E5%B1%95%E7%82%B9%E8%B6%85%E8%AF%A6%E7%BB%86%E6%80%BB%E7%BB%93.html",relativePath:"06.spring/08.Springboot启动扩展点超详细总结/01.Springboot启动扩展点超详细总结.md",key:"v-366ac91b",path:"/pages/34dc29/",headers:[{level:2,title:"1.背景",slug:"_1-背景",normalizedTitle:"1.背景",charIndex:46},{level:2,title:"2.可扩展的接口启动调用顺序图",slug:"_2-可扩展的接口启动调用顺序图",normalizedTitle:"2.可扩展的接口启动调用顺序图",charIndex:534},{level:2,title:"3.ApplicationContextInitializer",slug:"_3-applicationcontextinitializer",normalizedTitle:"3.applicationcontextinitializer",charIndex:605},{level:2,title:"4.BeanDefinitionRegistryPostProcessor",slug:"_4-beandefinitionregistrypostprocessor",normalizedTitle:"4.beandefinitionregistrypostprocessor",charIndex:1532},{level:2,title:"5.BeanFactoryPostProcessor",slug:"_5-beanfactorypostprocessor",normalizedTitle:"5.beanfactorypostprocessor",charIndex:2325},{level:2,title:"6.InstantiationAwareBeanPostProcessor",slug:"_6-instantiationawarebeanpostprocessor",normalizedTitle:"6.instantiationawarebeanpostprocessor",charIndex:2838},{level:2,title:"7.SmartInstantiationAwareBeanPostProcessor",slug:"_7-smartinstantiationawarebeanpostprocessor",normalizedTitle:"7.smartinstantiationawarebeanpostprocessor",charIndex:5055},{level:2,title:"8.BeanFactoryAware",slug:"_8-beanfactoryaware",normalizedTitle:"8.beanfactoryaware",charIndex:6607},{level:2,title:"9.ApplicationContextAwareProcessor",slug:"_9-applicationcontextawareprocessor",normalizedTitle:"9.applicationcontextawareprocessor",charIndex:7183},{level:2,title:"10.BeanNameAware",slug:"_10-beannameaware",normalizedTitle:"10.beannameaware",charIndex:8396},{level:2,title:"11.@PostConstruct",slug:"_11-postconstruct",normalizedTitle:"11.@postconstruct",charIndex:8904},{level:2,title:"12.InitializingBean",slug:"_12-initializingbean",normalizedTitle:"12.initializingbean",charIndex:9394},{level:2,title:"13.FactoryBean",slug:"_13-factorybean",normalizedTitle:"13.factorybean",charIndex:9873},{level:2,title:"14.SmartInitializingSingleton",slug:"_14-smartinitializingsingleton",normalizedTitle:"14.smartinitializingsingleton",charIndex:10973},{level:2,title:"15.CommandLineRunner",slug:"_15-commandlinerunner",normalizedTitle:"15.commandlinerunner",charIndex:11474},{level:2,title:"16.DisposableBean",slug:"_16-disposablebean",normalizedTitle:"16.disposablebean",charIndex:11884},{level:2,title:"17.ApplicationListener",slug:"_17-applicationlistener",normalizedTitle:"17.applicationlistener",charIndex:12258}],headersStr:"1.背景 2.可扩展的接口启动调用顺序图 3.ApplicationContextInitializer 4.BeanDefinitionRegistryPostProcessor 5.BeanFactoryPostProcessor 6.InstantiationAwareBeanPostProcessor 7.SmartInstantiationAwareBeanPostProcessor 8.BeanFactoryAware 9.ApplicationContextAwareProcessor 10.BeanNameAware 11.@PostConstruct 12.InitializingBean 13.FactoryBean 14.SmartInitializingSingleton 15.CommandLineRunner 16.DisposableBean 17.ApplicationListener",content:'# Springboot启动扩展点超详细总结\n\n来自： Dromara开源技术社区\n\n\n# 1.背景\n\nSpring的核心思想就是容器，当容器refresh的时候，外部看上去风平浪静，其实内部则是一片惊涛骇浪，汪洋一片。Springboot更是封装了Spring，遵循约定大于配置，加上自动装配的机制。很多时候我们只要引用了一个依赖，几乎是零配置就能完成一个功能的装配。\n\n我非常喜欢这种自动装配的机制，所以在自己开发中间件和公共依赖工具的时候也会用到这个特性。让使用者以最小的代价接入。想要把自动装配玩的转，就必须要了解spring对于bean的构造生命周期以及各个扩展接口。当然了解了bean的各个生命周期也能促进我们加深对spring的理解。业务代码也能合理利用这些扩展点写出更加漂亮的代码。\n\n在网上搜索spring扩展点，发现很少有博文说的很全的，只有一些常用的扩展点的说明。\n\n所以在这篇文章里，我总结了几乎Spring & Springboot所有的扩展接口，以及各个扩展点的使用场景。并且整理出了一个bean在spring内部从被加载到最后初始化完成所有可扩展点的顺序调用图。从而我们也能窥探到bean是如何一步步加载到spring容器中的。\n\n\n# 2.可扩展的接口启动调用顺序图\n\n以下是我整理的spring容器中Bean的生命周期内所有可扩展的点的调用顺序，下面会一个个分析\n\n\n\n\n# 3.ApplicationContextInitializer\n\n> org.springframework.context.ApplicationContextInitializer\n\n这是整个spring容器在刷新之前初始化ConfigurableApplicationContext的回调接口，简单来说，就是在容器刷新之前调用此类的initialize 方法。这个点允许被用户自己扩展。用户可以在整个spring容器还没被初始化之前做一些事情。\n\n可以想到的场景可能为，在最开始激活一些配置，或者利用这时候class还没被类加载器加载的时机，进行动态字节码注入等操作。\n\n扩展方式为：\n\npublic class TestApplicationContextInitializer implements ApplicationContextInitializer {\n\n    @Override\n    public void initialize(ConfigurableApplicationContext applicationContext) {\n        System.out.println("[ApplicationContextInitializer]");\n    }\n}\n\n\n因为这时候spring容器还没被初始化，所以想要自己的扩展的生效，有以下三种方式：\n\n 1. 在启动类中用springApplication.addInitializers(new TestApplicationContextInitializer()) 语句加入\n 2. 配置文件配置context.initializer.classes=com.example.demo.TestApplicationContextInitializer\n 3. Spring SPI扩展，在spring.factories中加入org.springframework.context.ApplicationContextInitializer=com.example.demo.TestApplicationContextInitializer\n\n\n# 4.BeanDefinitionRegistryPostProcessor\n\n> org.springframework.beans.factory.support.BeanDefinitionRegistryPostProcessor\n\n这个接口在读取项目中的beanDefinition 之后执行，提供一个补充的扩展点\n\n使用场景：你可以在这里动态注册自己的beanDefinition ，可以加载classpath之外的bean\n\n扩展方式为:\n\npublic class TestBeanDefinitionRegistryPostProcessor implements BeanDefinitionRegistryPostProcessor {\n    \n    @Override\n    public void postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry) throws BeansException {\n        System.out.println("[BeanDefinitionRegistryPostProcessor] postProcessBeanDefinitionRegistry");\n    }\n\n    @Override\n    public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) throws BeansException {\n        System.out.println("[BeanDefinitionRegistryPostProcessor] postProcessBeanFactory");\n\n    }\n}\n\n\n\n# 5.BeanFactoryPostProcessor\n\n> org.springframework.beans.factory.config.BeanFactoryPostProcessor\n\n这个接口是beanFactory的扩展接口，调用时机在spring在读取beanDefinition 信息之后，实例化bean之前。\n\n在这个时机，用户可以通过实现这个扩展接口来自行处理一些东西，比如修改已经注册的beanDefinition 的元信息。\n\n扩展方式为：\n\npublic class TestBeanFactoryPostProcessor implements BeanFactoryPostProcessor {\n    \n    @Override\n    public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) throws BeansException {\n        System.out.println("[BeanFactoryPostProcessor]");\n\n    }\n}\n\n\n\n# 6.InstantiationAwareBeanPostProcessor\n\n> org.springframework.beans.factory.config.InstantiationAwareBeanPostProcessor\n\n该接口继承了BeanPostProcess 接口，区别如下：\n\n**BeanPostProcess接口只在bean的初始化阶段进行扩展（注入spring上下文前后），而InstantiationAwareBeanPostProcessor** 接口在此基础上增加了3个方法，把可扩展的范围增加了实例化阶段和属性注入阶段。\n\n该类主要的扩展点有以下5个方法，主要在bean生命周期的两大阶段：实例化阶段和初始化阶段，下面一起进行说明，按调用顺序为：\n\n 1. postProcessBeforeInstantiation ：实例化bean之前，相当于new这个bean之前\n 2. postProcessAfterInstantiation ：实例化bean之后，相当于new这个bean之后\n 3. postProcessPropertyValues：bean已经实例化完成，在属性注入时阶段触发，@Autowired,@Resource 等注解原理基于此方法实现\n 4. postProcessBeforeInitialization ：初始化bean之前，相当于把bean注入spring上下文之前\n 5. postProcessAfterInitialization ：初始化bean之后，相当于把bean注入spring上下文之后\n\n使用场景：这个扩展点非常有用 ，无论是写中间件和业务中，都能利用这个特性。比如对实现了某一类接口的bean在各个生命期间进行收集，或者对某个类型的bean进行统一的设值等等。\n\n扩展方式为：\n\npublic class TestInstantiationAwareBeanPostProcessor implements InstantiationAwareBeanPostProcessor {\n\n    @Override\n    public Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException {\n        System.out.println("[TestInstantiationAwareBeanPostProcessor] before initialization " + beanName);\n        return bean;\n\n    }\n\n    @Override\n    public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException {\n        System.out.println("[TestInstantiationAwareBeanPostProcessor] after initialization " + beanName);\n        return bean;\n\n    }\n\n    @Override\n    public Object postProcessBeforeInstantiation(Class<?> beanClass, String beanName) throws BeansException {\n        System.out.println("[TestInstantiationAwareBeanPostProcessor] before instantiation " + beanName);\n        return null;\n\n    }\n\n    @Override\n    public boolean postProcessAfterInstantiation(Object bean, String beanName) throws BeansException {\n        System.out.println("[TestInstantiationAwareBeanPostProcessor] after instantiation " + beanName);\n        return true;\n\n    }\n\n    @Override\n    public PropertyValues postProcessPropertyValues(PropertyValues pvs, PropertyDescriptor[] pds, Object bean, String beanName) throws BeansException {\n        System.out.println("[TestInstantiationAwareBeanPostProcessor] postProcessPropertyValues " + beanName);\n        return pvs;\n\n    }\n}\n\n\n\n# 7.SmartInstantiationAwareBeanPostProcessor\n\n> org.springframework.beans.factory.config.SmartInstantiationAwareBeanPostProcessor\n\n该扩展接口有3个触发点方法：\n\n 1. predictBeanType：该触发点发生在postProcessBeforeInstantiation之前(在图上并没有标明，因为一般不太需要扩展这个点)，这个方法用于预测Bean的类型，返回第一个预测成功的Class类型，如果不能预测返回null；当你调用BeanFactory.getType(name) 时当通过bean的名字无法得到bean类型信息时就调用该回调方法来决定类型信息。\n 2. determineCandidateConstructors：该触发点发生在postProcessBeforeInstantiation 之后，用于确定该bean的构造函数之用，返回的是该bean的所有构造函数列表。用户可以扩展这个点，来自定义选择相应的构造器来实例化这个bean。\n 3. getEarlyBeanReference：该触发点发生在postProcessAfterInstantiation 之后，当有循环依赖的场景，当bean实例化好之后，为了防止有循环依赖，会提前暴露回调方法，用于bean实例化的后置处理。这个方法就是在提前暴露的回调方法中触发。\n\n扩展方式为：\n\npublic class TestSmartInstantiationAwareBeanPostProcessor implements SmartInstantiationAwareBeanPostProcessor {\n    \n    @Override\n    public Class<?> predictBeanType(Class<?> beanClass, String beanName) throws BeansException {\n        System.out.println("[TestSmartInstantiationAwareBeanPostProcessor] predictBeanType " + beanName);\n        return beanClass;\n    }\n\n    @Override\n    public Constructor<?>[] determineCandidateConstructors(Class<?> beanClass, String beanName) throws BeansException {\n        System.out.println("[TestSmartInstantiationAwareBeanPostProcessor] determineCandidateConstructors " + beanName);\n        return null;\n\n    }\n\n    @Override\n    public Object getEarlyBeanReference(Object bean, String beanName) throws BeansException {\n        System.out.println("[TestSmartInstantiationAwareBeanPostProcessor] getEarlyBeanReference " + beanName);\n        return bean;\n\n    }\n}\n\n\n\n# 8.BeanFactoryAware\n\n> org.springframework.beans.factory.BeanFactoryAware\n\n这个类只有一个触发点，发生在bean的实例化之后，注入属性之前，也就是Setter之前。这个类的扩展点方法为setBeanFactory，可以拿到BeanFactory 这个属性。\n\n使用场景为，你可以在bean实例化之后，但还未初始化之前，拿到 BeanFactory，在这个时候，可以对每个bean作特殊化的定制。也或者可以把BeanFactory 拿到进行缓存，日后使用。\n\n扩展方式为：\n\npublic class TestBeanFactoryAware implements BeanFactoryAware {\n    \n   @Override\n   public void setBeanFactory(BeanFactory beanFactory) throws BeansException {\n      System.out.println("[TestBeanFactoryAware] " + beanFactory.getBean(TestBeanFactoryAware.class).getClass().getSimpleName());\n   }\n}\n\n\n\n# 9.ApplicationContextAwareProcessor\n\n> org.springframework.context.support.ApplicationContextAwareProcessor\n\n该类本身并没有扩展点，但是该类内部却有6个扩展点可供实现 ，这些类触发的时机在bean实例化之后，初始化之前\n\n\n\n可以看到，该类用于执行各种驱动接口，在bean实例化之后，属性填充之后，通过执行以上红框标出的扩展接口，来获取对应容器的变量。* 所以这里应该来说是有6个扩展点*，这里就放一起来说了\n\n 1. EnvironmentAware：用于获取EnviromentAware 的一个扩展类，这个变量非常有用， 可以获得系统内的所有参数。当然个人认为这个Aware没必要去扩展，因为spring内部都可以通过注入的方式来直接获得。\n 2. EmbeddedValueResolverAware：用于获取StringValueResolver的一个扩展类， StringValueResolver用于获取基于String类型的properties的变量，一般我们都用@Value的方式去获取，如果实现了这个Aware接口，把StringValueResolver缓存起来，通过这个类去获取String 类型的变量，效果是一样的。\n 3. ResourceLoaderAware：用于获取ResourceLoader的一个扩展类，ResourceLoader可以用于获取classpath内所有的资源对象，可以扩展此类来拿到ResourceLoader 对象。\n 4. ApplicationEventPublisherAware：用于获取ApplicationEventPublisher的一个扩展类，ApplicationEventPublisher可以用来发布事件，结合ApplicationListener来共同使用，下文在介绍ApplicationListener 时会详细提到。这个对象也可以通过spring注入的方式来获得。\n 5. MessageSourceAware：用于获取MessageSource的一个扩展类，MessageSource 主要用来做国际化。\n 6. ApplicationContextAware：用来获取ApplicationContext的一个扩展类，ApplicationContext应该是很多人非常熟悉的一个类了，就是spring上下文管理器，可以手动的获取任何在spring上下文注册的bean，我们经常扩展这个接口来缓存spring上下文，包装成静态方法。同时ApplicationContext也实现了BeanFactory，MessageSource，ApplicationEventPublisher 等接口，也可以用来做相关接口的事情。\n\n\n# 10.BeanNameAware\n\n> org.springframework.beans.factory.BeanNameAware\n\n可以看到，这个类也是Aware扩展的一种，触发点在bean的初始化之前，也就是postProcessBeforeInitialization之前，这个类的触发点方法只有一个：setBeanName\n\n使用场景为：用户可以扩展这个点，在初始化bean之前拿到spring容器中注册的的beanName，来自行修改这个beanName的值。\n\n扩展方式为：\n\npublic class NormalBeanA implements BeanNameAware {\n    \n   public NormalBeanA() {\n      System.out.println("NormalBean constructor");\n   }\n\n   @Override\n   public void setBeanName(String name) {\n      System.out.println("[BeanNameAware] " + name);\n   }\n}\n\n\n\n# 11.@PostConstruct\n\n> javax.annotation.PostConstruct\n\n这个并不算一个扩展点，其实就是一个标注。其作用是在bean的初始化阶段，如果对一个方法标注了@PostConstruct，会先调用这个方法。这里重点是要关注下这个标准的触发点，这个触发点是在postProcessBeforeInitialization之后，InitializingBean.afterPropertiesSet 之前。\n\n使用场景：用户可以对某一方法进行标注，来进行初始化某一个属性\n\n扩展方式为：\n\npublic class NormalBeanA {\n    \n   public NormalBeanA() {\n      System.out.println("NormalBean constructor");\n   }\n\n   @PostConstruct\n   public void init() {\n      System.out.println("[PostConstruct] NormalBeanA");\n   }\n}\n\n\n\n# 12.InitializingBean\n\n> org.springframework.beans.factory.InitializingBean\n\n这个类，顾名思义，也是用来初始化bean的。InitializingBean接口为bean提供了初始化方法的方式，它只包括afterPropertiesSet方法，凡是继承该接口的类，在初始化bean的时候都会执行该方法。这个扩展点的触发时机在postProcessAfterInitialization 之前。\n\n使用场景：用户实现此接口，来进行系统启动的时候一些业务指标的初始化工作。\n\n扩展方式为：\n\npublic class NormalBeanA implements InitializingBean {\n    \n   @Override\n   public void afterPropertiesSet() throws Exception {\n      System.out.println("[InitializingBean] NormalBeanA");\n   }\n}\n\n\n\n# 13.FactoryBean\n\n> org.springframework.beans.factory.FactoryBean\n\n一般情况下，Spring通过反射机制利用bean的class属性指定支线类去实例化bean，在某些情况下，实例化Bean过程比较复杂，如果按照传统的方式，则需要在bean中提供大量的配置信息。配置方式的灵活性是受限的，这时采用编码的方式可能会得到一个简单的方案。Spring为此提供了一个org.springframework.bean.factory.FactoryBean的工厂类接口，用户可以通过实现该接口定制实例化Bean的逻辑。FactoryBean接口对于Spring框架来说占用重要的地位，Spring自身就提供了70多个FactoryBean的实现。它们隐藏了实例化一些复杂bean的细节，给上层应用带来了便利。从Spring3.0开始，FactoryBean开始支持泛型，即接口声明改为FactoryBean<T> 的形式\n\n使用场景：用户可以扩展这个类，来为要实例化的bean作一个代理，比如为该对象的所有的方法作一个拦截，在调用前后输出一行log，模仿ProxyFactoryBean 的功能。\n\n扩展方式为：\n\npublic class TestFactoryBean implements FactoryBean<TestFactoryBean.TestFactoryInnerBean> {\n    \n    @Override\n    public TestFactoryBean.TestFactoryInnerBean getObject() throws Exception {\n        System.out.println("[FactoryBean] getObject");\n        return new TestFactoryBean.TestFactoryInnerBean();\n    }\n\n    @Override\n    public Class<?> getObjectType() {\n        return TestFactoryBean.TestFactoryInnerBean.class;\n    }\n\n    @Override\n    public boolean isSingleton() {\n        return true;\n    }\n\n    public static class TestFactoryInnerBean {\n\n    }\n}\n\n\n\n# 14.SmartInitializingSingleton\n\n> org.springframework.beans.factory.SmartInitializingSingleton\n\n这个接口中只有一个方法afterSingletonsInstantiated，其作用是是 在spring容器管理的所有单例对象（非懒加载对象）初始化完成之后调用的回调接口。其触发时机为postProcessAfterInitialization 之后。\n\n使用场景：用户可以扩展此接口在对所有单例对象初始化完毕后，做一些后置的业务处理。\n\n扩展方式为：\n\npublic class TestSmartInitializingSingleton implements SmartInitializingSingleton {\n    \n    @Override\n    public void afterSingletonsInstantiated() {\n        System.out.println("[TestSmartInitializingSingleton]");\n    }\n}\n\n\n\n# 15.CommandLineRunner\n\n> org.springframework.boot.CommandLineRunner\n\n这个接口也只有一个方法：run(String... args)，触发时机为整个项目启动完毕后，自动执行。如果有多个CommandLineRunner，可以利用@Order 来进行排序。\n\n使用场景：用户扩展此接口，进行启动项目之后一些业务的预处理。\n\n扩展方式为：\n\npublic class TestCommandLineRunner implements CommandLineRunner {\n    \n    @Override\n    public void run(String... args) throws Exception {\n        System.out.println("[TestCommandLineRunner]");\n    }\n}\n\n\n\n# 16.DisposableBean\n\n> org.springframework.beans.factory.DisposableBean\n\n这个扩展点也只有一个方法：destroy()，其触发时机为当此对象销毁时，会自动执行这个方法。比如说运行applicationContext.registerShutdownHook 时，就会触发这个方法。\n\n扩展方式为：\n\npublic class NormalBeanA implements DisposableBean {\n    \n    @Override\n    public void destroy() throws Exception {\n        System.out.println("[DisposableBean] NormalBeanA");\n    }\n}\n\n\n\n# 17.ApplicationListener\n\n> org.springframework.context.ApplicationListener\n\n准确的说，这个应该不算spring&springboot当中的一个扩展点，ApplicationListener可以监听某个事件的event ，触发时机可以穿插在业务方法执行过程中，用户可以自定义某个业务事件。但是spring内部也有一些内置事件，这种事件，可以穿插在启动调用中。我们也可以利用这个特性，来自己做一些内置事件的监听器来达到和前面一些触发点大致相同的事情。\n\n接下来罗列下spring主要的内置事件：\n\n 1. ContextRefreshedEvent\n\nApplicationContext 被初始化或刷新时，该事件被发布。这也可以在ConfigurableApplicationContext接口中使用 refresh() 方法来发生。此处的初始化是指：所有的Bean被成功装载，后处理Bean被检测并激活，所有Singleton Bean 被预实例化，ApplicationContext 容器已就绪可用。\n\n 1. ContextStartedEvent\n\n当使用 ConfigurableApplicationContext （ApplicationContext子接口）接口中的 start() 方法启动 ApplicationContext 时，该事件被发布。你可以调查你的数据库，或者你可以在接受到这个事件后重启任何停止的应用程序。\n\n 1. ContextStoppedEvent\n\n当使用 ConfigurableApplicationContext 接口中的 stop() 停止 ApplicationContext 时，发布这个事件。你可以在接受到这个事件后做必要的清理的工作\n\n 1. ContextClosedEvent\n\n当使用 ConfigurableApplicationContext接口中的 close()方法关闭 ApplicationContext 时，该事件被发布。一个已关闭的上下文到达生命周期末端；它不能被刷新或重启\n\n 1. RequestHandledEvent\n\n这是一个 web-specific 事件，告诉所有 bean HTTP 请求已经被服务。只能应用于使用DispatcherServlet的Web应用。在使用Spring作为前端的MVC控制器时，当Spring处理用户请求结束后，系统会自动触发该事件',normalizedContent:'# springboot启动扩展点超详细总结\n\n来自： dromara开源技术社区\n\n\n# 1.背景\n\nspring的核心思想就是容器，当容器refresh的时候，外部看上去风平浪静，其实内部则是一片惊涛骇浪，汪洋一片。springboot更是封装了spring，遵循约定大于配置，加上自动装配的机制。很多时候我们只要引用了一个依赖，几乎是零配置就能完成一个功能的装配。\n\n我非常喜欢这种自动装配的机制，所以在自己开发中间件和公共依赖工具的时候也会用到这个特性。让使用者以最小的代价接入。想要把自动装配玩的转，就必须要了解spring对于bean的构造生命周期以及各个扩展接口。当然了解了bean的各个生命周期也能促进我们加深对spring的理解。业务代码也能合理利用这些扩展点写出更加漂亮的代码。\n\n在网上搜索spring扩展点，发现很少有博文说的很全的，只有一些常用的扩展点的说明。\n\n所以在这篇文章里，我总结了几乎spring & springboot所有的扩展接口，以及各个扩展点的使用场景。并且整理出了一个bean在spring内部从被加载到最后初始化完成所有可扩展点的顺序调用图。从而我们也能窥探到bean是如何一步步加载到spring容器中的。\n\n\n# 2.可扩展的接口启动调用顺序图\n\n以下是我整理的spring容器中bean的生命周期内所有可扩展的点的调用顺序，下面会一个个分析\n\n\n\n\n# 3.applicationcontextinitializer\n\n> org.springframework.context.applicationcontextinitializer\n\n这是整个spring容器在刷新之前初始化configurableapplicationcontext的回调接口，简单来说，就是在容器刷新之前调用此类的initialize 方法。这个点允许被用户自己扩展。用户可以在整个spring容器还没被初始化之前做一些事情。\n\n可以想到的场景可能为，在最开始激活一些配置，或者利用这时候class还没被类加载器加载的时机，进行动态字节码注入等操作。\n\n扩展方式为：\n\npublic class testapplicationcontextinitializer implements applicationcontextinitializer {\n\n    @override\n    public void initialize(configurableapplicationcontext applicationcontext) {\n        system.out.println("[applicationcontextinitializer]");\n    }\n}\n\n\n因为这时候spring容器还没被初始化，所以想要自己的扩展的生效，有以下三种方式：\n\n 1. 在启动类中用springapplication.addinitializers(new testapplicationcontextinitializer()) 语句加入\n 2. 配置文件配置context.initializer.classes=com.example.demo.testapplicationcontextinitializer\n 3. spring spi扩展，在spring.factories中加入org.springframework.context.applicationcontextinitializer=com.example.demo.testapplicationcontextinitializer\n\n\n# 4.beandefinitionregistrypostprocessor\n\n> org.springframework.beans.factory.support.beandefinitionregistrypostprocessor\n\n这个接口在读取项目中的beandefinition 之后执行，提供一个补充的扩展点\n\n使用场景：你可以在这里动态注册自己的beandefinition ，可以加载classpath之外的bean\n\n扩展方式为:\n\npublic class testbeandefinitionregistrypostprocessor implements beandefinitionregistrypostprocessor {\n    \n    @override\n    public void postprocessbeandefinitionregistry(beandefinitionregistry registry) throws beansexception {\n        system.out.println("[beandefinitionregistrypostprocessor] postprocessbeandefinitionregistry");\n    }\n\n    @override\n    public void postprocessbeanfactory(configurablelistablebeanfactory beanfactory) throws beansexception {\n        system.out.println("[beandefinitionregistrypostprocessor] postprocessbeanfactory");\n\n    }\n}\n\n\n\n# 5.beanfactorypostprocessor\n\n> org.springframework.beans.factory.config.beanfactorypostprocessor\n\n这个接口是beanfactory的扩展接口，调用时机在spring在读取beandefinition 信息之后，实例化bean之前。\n\n在这个时机，用户可以通过实现这个扩展接口来自行处理一些东西，比如修改已经注册的beandefinition 的元信息。\n\n扩展方式为：\n\npublic class testbeanfactorypostprocessor implements beanfactorypostprocessor {\n    \n    @override\n    public void postprocessbeanfactory(configurablelistablebeanfactory beanfactory) throws beansexception {\n        system.out.println("[beanfactorypostprocessor]");\n\n    }\n}\n\n\n\n# 6.instantiationawarebeanpostprocessor\n\n> org.springframework.beans.factory.config.instantiationawarebeanpostprocessor\n\n该接口继承了beanpostprocess 接口，区别如下：\n\n**beanpostprocess接口只在bean的初始化阶段进行扩展（注入spring上下文前后），而instantiationawarebeanpostprocessor** 接口在此基础上增加了3个方法，把可扩展的范围增加了实例化阶段和属性注入阶段。\n\n该类主要的扩展点有以下5个方法，主要在bean生命周期的两大阶段：实例化阶段和初始化阶段，下面一起进行说明，按调用顺序为：\n\n 1. postprocessbeforeinstantiation ：实例化bean之前，相当于new这个bean之前\n 2. postprocessafterinstantiation ：实例化bean之后，相当于new这个bean之后\n 3. postprocesspropertyvalues：bean已经实例化完成，在属性注入时阶段触发，@autowired,@resource 等注解原理基于此方法实现\n 4. postprocessbeforeinitialization ：初始化bean之前，相当于把bean注入spring上下文之前\n 5. postprocessafterinitialization ：初始化bean之后，相当于把bean注入spring上下文之后\n\n使用场景：这个扩展点非常有用 ，无论是写中间件和业务中，都能利用这个特性。比如对实现了某一类接口的bean在各个生命期间进行收集，或者对某个类型的bean进行统一的设值等等。\n\n扩展方式为：\n\npublic class testinstantiationawarebeanpostprocessor implements instantiationawarebeanpostprocessor {\n\n    @override\n    public object postprocessbeforeinitialization(object bean, string beanname) throws beansexception {\n        system.out.println("[testinstantiationawarebeanpostprocessor] before initialization " + beanname);\n        return bean;\n\n    }\n\n    @override\n    public object postprocessafterinitialization(object bean, string beanname) throws beansexception {\n        system.out.println("[testinstantiationawarebeanpostprocessor] after initialization " + beanname);\n        return bean;\n\n    }\n\n    @override\n    public object postprocessbeforeinstantiation(class<?> beanclass, string beanname) throws beansexception {\n        system.out.println("[testinstantiationawarebeanpostprocessor] before instantiation " + beanname);\n        return null;\n\n    }\n\n    @override\n    public boolean postprocessafterinstantiation(object bean, string beanname) throws beansexception {\n        system.out.println("[testinstantiationawarebeanpostprocessor] after instantiation " + beanname);\n        return true;\n\n    }\n\n    @override\n    public propertyvalues postprocesspropertyvalues(propertyvalues pvs, propertydescriptor[] pds, object bean, string beanname) throws beansexception {\n        system.out.println("[testinstantiationawarebeanpostprocessor] postprocesspropertyvalues " + beanname);\n        return pvs;\n\n    }\n}\n\n\n\n# 7.smartinstantiationawarebeanpostprocessor\n\n> org.springframework.beans.factory.config.smartinstantiationawarebeanpostprocessor\n\n该扩展接口有3个触发点方法：\n\n 1. predictbeantype：该触发点发生在postprocessbeforeinstantiation之前(在图上并没有标明，因为一般不太需要扩展这个点)，这个方法用于预测bean的类型，返回第一个预测成功的class类型，如果不能预测返回null；当你调用beanfactory.gettype(name) 时当通过bean的名字无法得到bean类型信息时就调用该回调方法来决定类型信息。\n 2. determinecandidateconstructors：该触发点发生在postprocessbeforeinstantiation 之后，用于确定该bean的构造函数之用，返回的是该bean的所有构造函数列表。用户可以扩展这个点，来自定义选择相应的构造器来实例化这个bean。\n 3. getearlybeanreference：该触发点发生在postprocessafterinstantiation 之后，当有循环依赖的场景，当bean实例化好之后，为了防止有循环依赖，会提前暴露回调方法，用于bean实例化的后置处理。这个方法就是在提前暴露的回调方法中触发。\n\n扩展方式为：\n\npublic class testsmartinstantiationawarebeanpostprocessor implements smartinstantiationawarebeanpostprocessor {\n    \n    @override\n    public class<?> predictbeantype(class<?> beanclass, string beanname) throws beansexception {\n        system.out.println("[testsmartinstantiationawarebeanpostprocessor] predictbeantype " + beanname);\n        return beanclass;\n    }\n\n    @override\n    public constructor<?>[] determinecandidateconstructors(class<?> beanclass, string beanname) throws beansexception {\n        system.out.println("[testsmartinstantiationawarebeanpostprocessor] determinecandidateconstructors " + beanname);\n        return null;\n\n    }\n\n    @override\n    public object getearlybeanreference(object bean, string beanname) throws beansexception {\n        system.out.println("[testsmartinstantiationawarebeanpostprocessor] getearlybeanreference " + beanname);\n        return bean;\n\n    }\n}\n\n\n\n# 8.beanfactoryaware\n\n> org.springframework.beans.factory.beanfactoryaware\n\n这个类只有一个触发点，发生在bean的实例化之后，注入属性之前，也就是setter之前。这个类的扩展点方法为setbeanfactory，可以拿到beanfactory 这个属性。\n\n使用场景为，你可以在bean实例化之后，但还未初始化之前，拿到 beanfactory，在这个时候，可以对每个bean作特殊化的定制。也或者可以把beanfactory 拿到进行缓存，日后使用。\n\n扩展方式为：\n\npublic class testbeanfactoryaware implements beanfactoryaware {\n    \n   @override\n   public void setbeanfactory(beanfactory beanfactory) throws beansexception {\n      system.out.println("[testbeanfactoryaware] " + beanfactory.getbean(testbeanfactoryaware.class).getclass().getsimplename());\n   }\n}\n\n\n\n# 9.applicationcontextawareprocessor\n\n> org.springframework.context.support.applicationcontextawareprocessor\n\n该类本身并没有扩展点，但是该类内部却有6个扩展点可供实现 ，这些类触发的时机在bean实例化之后，初始化之前\n\n\n\n可以看到，该类用于执行各种驱动接口，在bean实例化之后，属性填充之后，通过执行以上红框标出的扩展接口，来获取对应容器的变量。* 所以这里应该来说是有6个扩展点*，这里就放一起来说了\n\n 1. environmentaware：用于获取enviromentaware 的一个扩展类，这个变量非常有用， 可以获得系统内的所有参数。当然个人认为这个aware没必要去扩展，因为spring内部都可以通过注入的方式来直接获得。\n 2. embeddedvalueresolveraware：用于获取stringvalueresolver的一个扩展类， stringvalueresolver用于获取基于string类型的properties的变量，一般我们都用@value的方式去获取，如果实现了这个aware接口，把stringvalueresolver缓存起来，通过这个类去获取string 类型的变量，效果是一样的。\n 3. resourceloaderaware：用于获取resourceloader的一个扩展类，resourceloader可以用于获取classpath内所有的资源对象，可以扩展此类来拿到resourceloader 对象。\n 4. applicationeventpublisheraware：用于获取applicationeventpublisher的一个扩展类，applicationeventpublisher可以用来发布事件，结合applicationlistener来共同使用，下文在介绍applicationlistener 时会详细提到。这个对象也可以通过spring注入的方式来获得。\n 5. messagesourceaware：用于获取messagesource的一个扩展类，messagesource 主要用来做国际化。\n 6. applicationcontextaware：用来获取applicationcontext的一个扩展类，applicationcontext应该是很多人非常熟悉的一个类了，就是spring上下文管理器，可以手动的获取任何在spring上下文注册的bean，我们经常扩展这个接口来缓存spring上下文，包装成静态方法。同时applicationcontext也实现了beanfactory，messagesource，applicationeventpublisher 等接口，也可以用来做相关接口的事情。\n\n\n# 10.beannameaware\n\n> org.springframework.beans.factory.beannameaware\n\n可以看到，这个类也是aware扩展的一种，触发点在bean的初始化之前，也就是postprocessbeforeinitialization之前，这个类的触发点方法只有一个：setbeanname\n\n使用场景为：用户可以扩展这个点，在初始化bean之前拿到spring容器中注册的的beanname，来自行修改这个beanname的值。\n\n扩展方式为：\n\npublic class normalbeana implements beannameaware {\n    \n   public normalbeana() {\n      system.out.println("normalbean constructor");\n   }\n\n   @override\n   public void setbeanname(string name) {\n      system.out.println("[beannameaware] " + name);\n   }\n}\n\n\n\n# 11.@postconstruct\n\n> javax.annotation.postconstruct\n\n这个并不算一个扩展点，其实就是一个标注。其作用是在bean的初始化阶段，如果对一个方法标注了@postconstruct，会先调用这个方法。这里重点是要关注下这个标准的触发点，这个触发点是在postprocessbeforeinitialization之后，initializingbean.afterpropertiesset 之前。\n\n使用场景：用户可以对某一方法进行标注，来进行初始化某一个属性\n\n扩展方式为：\n\npublic class normalbeana {\n    \n   public normalbeana() {\n      system.out.println("normalbean constructor");\n   }\n\n   @postconstruct\n   public void init() {\n      system.out.println("[postconstruct] normalbeana");\n   }\n}\n\n\n\n# 12.initializingbean\n\n> org.springframework.beans.factory.initializingbean\n\n这个类，顾名思义，也是用来初始化bean的。initializingbean接口为bean提供了初始化方法的方式，它只包括afterpropertiesset方法，凡是继承该接口的类，在初始化bean的时候都会执行该方法。这个扩展点的触发时机在postprocessafterinitialization 之前。\n\n使用场景：用户实现此接口，来进行系统启动的时候一些业务指标的初始化工作。\n\n扩展方式为：\n\npublic class normalbeana implements initializingbean {\n    \n   @override\n   public void afterpropertiesset() throws exception {\n      system.out.println("[initializingbean] normalbeana");\n   }\n}\n\n\n\n# 13.factorybean\n\n> org.springframework.beans.factory.factorybean\n\n一般情况下，spring通过反射机制利用bean的class属性指定支线类去实例化bean，在某些情况下，实例化bean过程比较复杂，如果按照传统的方式，则需要在bean中提供大量的配置信息。配置方式的灵活性是受限的，这时采用编码的方式可能会得到一个简单的方案。spring为此提供了一个org.springframework.bean.factory.factorybean的工厂类接口，用户可以通过实现该接口定制实例化bean的逻辑。factorybean接口对于spring框架来说占用重要的地位，spring自身就提供了70多个factorybean的实现。它们隐藏了实例化一些复杂bean的细节，给上层应用带来了便利。从spring3.0开始，factorybean开始支持泛型，即接口声明改为factorybean<t> 的形式\n\n使用场景：用户可以扩展这个类，来为要实例化的bean作一个代理，比如为该对象的所有的方法作一个拦截，在调用前后输出一行log，模仿proxyfactorybean 的功能。\n\n扩展方式为：\n\npublic class testfactorybean implements factorybean<testfactorybean.testfactoryinnerbean> {\n    \n    @override\n    public testfactorybean.testfactoryinnerbean getobject() throws exception {\n        system.out.println("[factorybean] getobject");\n        return new testfactorybean.testfactoryinnerbean();\n    }\n\n    @override\n    public class<?> getobjecttype() {\n        return testfactorybean.testfactoryinnerbean.class;\n    }\n\n    @override\n    public boolean issingleton() {\n        return true;\n    }\n\n    public static class testfactoryinnerbean {\n\n    }\n}\n\n\n\n# 14.smartinitializingsingleton\n\n> org.springframework.beans.factory.smartinitializingsingleton\n\n这个接口中只有一个方法aftersingletonsinstantiated，其作用是是 在spring容器管理的所有单例对象（非懒加载对象）初始化完成之后调用的回调接口。其触发时机为postprocessafterinitialization 之后。\n\n使用场景：用户可以扩展此接口在对所有单例对象初始化完毕后，做一些后置的业务处理。\n\n扩展方式为：\n\npublic class testsmartinitializingsingleton implements smartinitializingsingleton {\n    \n    @override\n    public void aftersingletonsinstantiated() {\n        system.out.println("[testsmartinitializingsingleton]");\n    }\n}\n\n\n\n# 15.commandlinerunner\n\n> org.springframework.boot.commandlinerunner\n\n这个接口也只有一个方法：run(string... args)，触发时机为整个项目启动完毕后，自动执行。如果有多个commandlinerunner，可以利用@order 来进行排序。\n\n使用场景：用户扩展此接口，进行启动项目之后一些业务的预处理。\n\n扩展方式为：\n\npublic class testcommandlinerunner implements commandlinerunner {\n    \n    @override\n    public void run(string... args) throws exception {\n        system.out.println("[testcommandlinerunner]");\n    }\n}\n\n\n\n# 16.disposablebean\n\n> org.springframework.beans.factory.disposablebean\n\n这个扩展点也只有一个方法：destroy()，其触发时机为当此对象销毁时，会自动执行这个方法。比如说运行applicationcontext.registershutdownhook 时，就会触发这个方法。\n\n扩展方式为：\n\npublic class normalbeana implements disposablebean {\n    \n    @override\n    public void destroy() throws exception {\n        system.out.println("[disposablebean] normalbeana");\n    }\n}\n\n\n\n# 17.applicationlistener\n\n> org.springframework.context.applicationlistener\n\n准确的说，这个应该不算spring&springboot当中的一个扩展点，applicationlistener可以监听某个事件的event ，触发时机可以穿插在业务方法执行过程中，用户可以自定义某个业务事件。但是spring内部也有一些内置事件，这种事件，可以穿插在启动调用中。我们也可以利用这个特性，来自己做一些内置事件的监听器来达到和前面一些触发点大致相同的事情。\n\n接下来罗列下spring主要的内置事件：\n\n 1. contextrefreshedevent\n\napplicationcontext 被初始化或刷新时，该事件被发布。这也可以在configurableapplicationcontext接口中使用 refresh() 方法来发生。此处的初始化是指：所有的bean被成功装载，后处理bean被检测并激活，所有singleton bean 被预实例化，applicationcontext 容器已就绪可用。\n\n 1. contextstartedevent\n\n当使用 configurableapplicationcontext （applicationcontext子接口）接口中的 start() 方法启动 applicationcontext 时，该事件被发布。你可以调查你的数据库，或者你可以在接受到这个事件后重启任何停止的应用程序。\n\n 1. contextstoppedevent\n\n当使用 configurableapplicationcontext 接口中的 stop() 停止 applicationcontext 时，发布这个事件。你可以在接受到这个事件后做必要的清理的工作\n\n 1. contextclosedevent\n\n当使用 configurableapplicationcontext接口中的 close()方法关闭 applicationcontext 时，该事件被发布。一个已关闭的上下文到达生命周期末端；它不能被刷新或重启\n\n 1. requesthandledevent\n\n这是一个 web-specific 事件，告诉所有 bean http 请求已经被服务。只能应用于使用dispatcherservlet的web应用。在使用spring作为前端的mvc控制器时，当spring处理用户请求结束后，系统会自动触发该事件',charsets:{cjk:!0},lastUpdated:"2024/04/29, 11:14:33",lastUpdatedTimestamp:1714360473e3},{title:"获取当前类的代理对象",frontmatter:{title:"获取当前类的代理对象",date:"2024-04-19T14:01:07.000Z",permalink:"/pages/ab1f38/"},regularPath:"/06.spring/09.spring%E5%BA%94%E7%94%A8/08.%E8%8E%B7%E5%8F%96%E5%BD%93%E5%89%8D%E7%B1%BB%E7%9A%84%E4%BB%A3%E7%90%86%E5%AF%B9%E8%B1%A1.html",relativePath:"06.spring/09.spring应用/08.获取当前类的代理对象.md",key:"v-77e443c8",path:"/pages/ab1f38/",headersStr:null,content:"获取当前类的代理对象\n\n//在类上添加此注解\n@EnableAspectJAutoProxy(exposeProxy=true)\n\n\n//使用AopContext.currentProxy() 返回对象强转即可\nXxxxService o = (xxxxService)AopContext.currentProxy();\n",normalizedContent:"获取当前类的代理对象\n\n//在类上添加此注解\n@enableaspectjautoproxy(exposeproxy=true)\n\n\n//使用aopcontext.currentproxy() 返回对象强转即可\nxxxxservice o = (xxxxservice)aopcontext.currentproxy();\n",charsets:{cjk:!0},lastUpdated:"2024/04/29, 11:14:33",lastUpdatedTimestamp:1714360473e3},{title:"SpringSecurity中跨域配置",frontmatter:{title:"SpringSecurity中跨域配置",date:"2024-04-19T14:00:52.000Z",permalink:"/pages/0e930c/"},regularPath:"/06.spring/09.spring%E5%BA%94%E7%94%A8/07.SpringSecurity%E4%B8%AD%E8%B7%A8%E5%9F%9F%E9%85%8D%E7%BD%AE.html",relativePath:"06.spring/09.spring应用/07.SpringSecurity中跨域配置.md",key:"v-32a7bf17",path:"/pages/0e930c/",headersStr:null,content:'使用 spring Security 导致spring mvc 的跨域配置无效\n\nspring Security提供以下配置方法\n\nhttpSecurity.cors().configurationSource(CorsConfigurationSource configurationSource);\n\n示例\n\n    @Bean\n    public SecurityFilterChain filterChain(HttpSecurity httpSecurity) throws Exception {\n        return httpSecurity\n                // 关闭\n                .csrf()\n                .disable()\n                //关闭session\n                .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS)\n                .and()\n                //认证相关\n                .authorizeRequests()\n                //允许匿名访问\n                .antMatchers("/user/login")\n                .permitAll()\n\t\t\t\t//.anonymous()\n                //其他请求 认证后都能访问\n                .anyRequest().authenticated()\n                .and()\n                //添加认证过滤器 在UsernamePasswordAuthenticationFilter之前\n                .addFilterBefore(jwtAuthenticateFilter, UsernamePasswordAuthenticationFilter.class)\n                //跨域配置\n                .cors()\n                .configurationSource(configurationSource())\n                .and()\n                .build();\n    }\n\n\t/**\n     * 跨域配置\n     * @return\n     */\n   private CorsConfigurationSource configurationSource() {\n        CorsConfiguration corsConfiguration = new CorsConfiguration();\n        corsConfiguration.setAllowedHeaders(Collections.singletonList("*"));\n        corsConfiguration.setAllowedMethods(Collections.singletonList("*"));\n        corsConfiguration.setAllowedOrigins(Collections.singletonList("*"));\n        corsConfiguration.setMaxAge(3600L);\n\n        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();\n        source.registerCorsConfiguration("/**", corsConfiguration);\n        return source;\n    }\n',normalizedContent:'使用 spring security 导致spring mvc 的跨域配置无效\n\nspring security提供以下配置方法\n\nhttpsecurity.cors().configurationsource(corsconfigurationsource configurationsource);\n\n示例\n\n    @bean\n    public securityfilterchain filterchain(httpsecurity httpsecurity) throws exception {\n        return httpsecurity\n                // 关闭\n                .csrf()\n                .disable()\n                //关闭session\n                .sessionmanagement().sessioncreationpolicy(sessioncreationpolicy.stateless)\n                .and()\n                //认证相关\n                .authorizerequests()\n                //允许匿名访问\n                .antmatchers("/user/login")\n                .permitall()\n\t\t\t\t//.anonymous()\n                //其他请求 认证后都能访问\n                .anyrequest().authenticated()\n                .and()\n                //添加认证过滤器 在usernamepasswordauthenticationfilter之前\n                .addfilterbefore(jwtauthenticatefilter, usernamepasswordauthenticationfilter.class)\n                //跨域配置\n                .cors()\n                .configurationsource(configurationsource())\n                .and()\n                .build();\n    }\n\n\t/**\n     * 跨域配置\n     * @return\n     */\n   private corsconfigurationsource configurationsource() {\n        corsconfiguration corsconfiguration = new corsconfiguration();\n        corsconfiguration.setallowedheaders(collections.singletonlist("*"));\n        corsconfiguration.setallowedmethods(collections.singletonlist("*"));\n        corsconfiguration.setallowedorigins(collections.singletonlist("*"));\n        corsconfiguration.setmaxage(3600l);\n\n        urlbasedcorsconfigurationsource source = new urlbasedcorsconfigurationsource();\n        source.registercorsconfiguration("/**", corsconfiguration);\n        return source;\n    }\n',charsets:{cjk:!0},lastUpdated:"2024/04/29, 11:14:33",lastUpdatedTimestamp:1714360473e3},{title:"自定义SpringBootStarter",frontmatter:{title:"自定义SpringBootStarter",date:"2024-04-19T14:00:26.000Z",permalink:"/pages/0ea346/"},regularPath:"/06.spring/09.spring%E5%BA%94%E7%94%A8/09.%E8%87%AA%E5%AE%9A%E4%B9%89SpringBootStarter.html",relativePath:"06.spring/09.spring应用/09.自定义SpringBootStarter.md",key:"v-4b1a12f8",path:"/pages/0ea346/",headers:[{level:3,title:"1.pom 依赖spring-boot-autoconfigure",slug:"_1-pom-依赖spring-boot-autoconfigure",normalizedTitle:"1.pom 依赖spring-boot-autoconfigure",charIndex:2},{level:3,title:"2.1.自定义配置",slug:"_2-1-自定义配置",normalizedTitle:"2.1.自定义配置",charIndex:1499},{level:3,title:"2.2自定义Service",slug:"_2-2自定义service",normalizedTitle:"2.2自定义service",charIndex:2005},{level:3,title:"3.注册为Spring Bean",slug:"_3-注册为spring-bean",normalizedTitle:"3.注册为spring bean",charIndex:2471},{level:4,title:"方式一",slug:"方式一",normalizedTitle:"方式一",charIndex:2491},{level:4,title:"方式二",slug:"方式二",normalizedTitle:"方式二",charIndex:2666}],headersStr:"1.pom 依赖spring-boot-autoconfigure 2.1.自定义配置 2.2自定义Service 3.注册为Spring Bean 方式一 方式二",content:'# 1.pom 依赖spring-boot-autoconfigure\n\n\n\n<properties>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <maven.compiler.encoding>UTF-8</maven.compiler.encoding>\n        <java.version>17</java.version>\n        <maven.compiler.source>17</maven.compiler.source>\n        <maven.compiler.target>17</maven.compiler.target>\n        <java.version>17</java.version>\n        <spring-boot.version>3.0.3</spring-boot.version>\n</properties>\n\n<dependencyManagement>\n    <dependencies>\n        <dependency>\n            \x3c!-- Import dependency management from Spring Boot --\x3e\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-dependencies</artifactId>\n            <version>${spring-boot.version}</version>\n            <type>pom</type>\n            <scope>import</scope>\n        </dependency>\n    </dependencies>\n</dependencyManagement>\n\n<dependencies>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-configuration-processor</artifactId>\n            <optional>true</optional>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-autoconfigure</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-logging</artifactId>\n            <scope>compile</scope>\n        </dependency>\n</dependencies>\n\n\n\n# 2.1.自定义配置\n\nimport com.expect.service.impl.ExpectServiceImpl;\nimport lombok.Data;\nimport org.springframework.boot.autoconfigure.AutoConfiguration;\nimport org.springframework.boot.context.properties.ConfigurationProperties;\nimport org.springframework.context.annotation.Import;\n\n@Data\n@AutoConfiguration\n@ConfigurationProperties(prefix = "expect")\n//导入其他Bean\n@Import({ExpectServiceImpl.class})\npublic class ExpectConfig {\n\n    private String name;\n    private String gender;\n    private String age;\n\n\n}\n\n\n\n# 2.2自定义Service\n\nimport com.expect.service.ExpectService;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.stereotype.Service;\n\n@Slf4j\n@Service\npublic class ExpectServiceImpl implements ExpectService {\n\n\n    @Override\n    public void sayHello() {\n        log.info("sayHello");\n        System.out.println("sayHello");\n    }\n\n    @Override\n    public void sayGoodbye() {\n        log.info("sayGoodbye");\n        System.out.println("sayGoodbye");\n    }\n}\n\n\n\n# 3.注册为Spring Bean\n\n# 方式一\n\nSpring Boot 3.0后不可用\n\n在resources下新建META-INF文件夹，然后创建spring.factories文件\n\norg.springframework.boot.autoconfigure.EnableAutoConfiguration=\\\ncom.expect.config.ExpectConfig\n\n\n# 方式二\n\nSpring Boot 2.7后可用\n\n创建文件 /resources/META-INF/spring/org.springframework.boot.autoconfigure.AutoConfiguration.imports\n\ncom.expect.config.ExpectConfig\n\n\n升级spring boot 3注意事项：\n\n自动配置文件变更\n\nSpring Boot 2.7 引入了一个新的文件：\n\nMETA-INF/spring/org.springframework.boot.autoconfigure.AutoConfiguration.imports\n\n用于注册自动配置，同时保持与 spring.factories 中注册的向后兼容。Spring Boot 3.0 发布后，spring.factories已经被移除，只能通过imports文件来注册自动配置。',normalizedContent:'# 1.pom 依赖spring-boot-autoconfigure\n\n\n\n<properties>\n        <project.build.sourceencoding>utf-8</project.build.sourceencoding>\n        <maven.compiler.encoding>utf-8</maven.compiler.encoding>\n        <java.version>17</java.version>\n        <maven.compiler.source>17</maven.compiler.source>\n        <maven.compiler.target>17</maven.compiler.target>\n        <java.version>17</java.version>\n        <spring-boot.version>3.0.3</spring-boot.version>\n</properties>\n\n<dependencymanagement>\n    <dependencies>\n        <dependency>\n            \x3c!-- import dependency management from spring boot --\x3e\n            <groupid>org.springframework.boot</groupid>\n            <artifactid>spring-boot-dependencies</artifactid>\n            <version>${spring-boot.version}</version>\n            <type>pom</type>\n            <scope>import</scope>\n        </dependency>\n    </dependencies>\n</dependencymanagement>\n\n<dependencies>\n        <dependency>\n            <groupid>org.springframework.boot</groupid>\n            <artifactid>spring-boot-configuration-processor</artifactid>\n            <optional>true</optional>\n        </dependency>\n        <dependency>\n            <groupid>org.springframework.boot</groupid>\n            <artifactid>spring-boot-autoconfigure</artifactid>\n        </dependency>\n        <dependency>\n            <groupid>org.springframework.boot</groupid>\n            <artifactid>spring-boot-starter-logging</artifactid>\n            <scope>compile</scope>\n        </dependency>\n</dependencies>\n\n\n\n# 2.1.自定义配置\n\nimport com.expect.service.impl.expectserviceimpl;\nimport lombok.data;\nimport org.springframework.boot.autoconfigure.autoconfiguration;\nimport org.springframework.boot.context.properties.configurationproperties;\nimport org.springframework.context.annotation.import;\n\n@data\n@autoconfiguration\n@configurationproperties(prefix = "expect")\n//导入其他bean\n@import({expectserviceimpl.class})\npublic class expectconfig {\n\n    private string name;\n    private string gender;\n    private string age;\n\n\n}\n\n\n\n# 2.2自定义service\n\nimport com.expect.service.expectservice;\nimport lombok.extern.slf4j.slf4j;\nimport org.springframework.stereotype.service;\n\n@slf4j\n@service\npublic class expectserviceimpl implements expectservice {\n\n\n    @override\n    public void sayhello() {\n        log.info("sayhello");\n        system.out.println("sayhello");\n    }\n\n    @override\n    public void saygoodbye() {\n        log.info("saygoodbye");\n        system.out.println("saygoodbye");\n    }\n}\n\n\n\n# 3.注册为spring bean\n\n# 方式一\n\nspring boot 3.0后不可用\n\n在resources下新建meta-inf文件夹，然后创建spring.factories文件\n\norg.springframework.boot.autoconfigure.enableautoconfiguration=\\\ncom.expect.config.expectconfig\n\n\n# 方式二\n\nspring boot 2.7后可用\n\n创建文件 /resources/meta-inf/spring/org.springframework.boot.autoconfigure.autoconfiguration.imports\n\ncom.expect.config.expectconfig\n\n\n升级spring boot 3注意事项：\n\n自动配置文件变更\n\nspring boot 2.7 引入了一个新的文件：\n\nmeta-inf/spring/org.springframework.boot.autoconfigure.autoconfiguration.imports\n\n用于注册自动配置，同时保持与 spring.factories 中注册的向后兼容。spring boot 3.0 发布后，spring.factories已经被移除，只能通过imports文件来注册自动配置。',charsets:{cjk:!0},lastUpdated:"2024/04/29, 11:14:33",lastUpdatedTimestamp:1714360473e3},{title:"nginx配置详情",frontmatter:{title:"nginx配置详情",date:"2024-04-28T14:19:16.000Z",permalink:"/pages/61f88f/"},regularPath:"/07.nginx/01.nginx/02.nginx%E9%85%8D%E7%BD%AE%E8%AF%A6%E6%83%85.html",relativePath:"07.nginx/01.nginx/02.nginx配置详情.md",key:"v-5cb574ec",path:"/pages/61f88f/",headersStr:null,content:'#运行用户\nuser nobody;\n#启动进程,通常设置成和cpu的数量相等\nworker_processes  1;\n\n#全局错误日志及PID文件\n#error_log  logs/error.log;\n#error_log  logs/error.log  notice;\n#error_log  logs/error.log  info;\n\n#pid        logs/nginx.pid;\n\n#工作模式及连接数上限\nevents {\n    #epoll是多路复用IO(I/O Multiplexing)中的一种方式,\n    #仅用于linux2.6以上内核,可以大大提高nginx的性能\n    use   epoll; \n\n    #单个后台worker process进程的最大并发链接数    \n    worker_connections  1024;\n\n    # 并发总数是 worker_processes 和 worker_connections 的乘积\n    # 即 max_clients = worker_processes * worker_connections\n    # 在设置了反向代理的情况下，max_clients = worker_processes * worker_connections / 4  为什么\n    # 为什么上面反向代理要除以4，应该说是一个经验值\n    # 根据以上条件，正常情况下的Nginx Server可以应付的最大连接数为：4 * 8000 = 32000\n    # worker_connections 值的设置跟物理内存大小有关\n    # 因为并发受IO约束，max_clients的值须小于系统可以打开的最大文件数\n    # 而系统可以打开的最大文件数和内存大小成正比，一般1GB内存的机器上可以打开的文件数大约是10万左右\n    # 我们来看看360M内存的VPS可以打开的文件句柄数是多少：\n    # $ cat /proc/sys/fs/file-max\n    # 输出 34336\n    # 32000 < 34336，即并发连接总数小于系统可以打开的文件句柄总数，这样就在操作系统可以承受的范围之内\n    # 所以，worker_connections 的值需根据 worker_processes 进程数目和系统可以打开的最大文件总数进行适当地进行设置\n    # 使得并发总数小于操作系统可以打开的最大文件数目\n    # 其实质也就是根据主机的物理CPU和内存进行配置\n    # 当然，理论上的并发总数可能会和实际有所偏差，因为主机还有其他的工作进程需要消耗系统资源。\n    # ulimit -SHn 65535\n\n}\n\n\nhttp {\n    #设定mime类型,类型由mime.type文件定义\n    include    mime.types;\n    default_type  application/octet-stream;\n    #设定日志格式\n    log_format  main  \'$remote_addr - $remote_user [$time_local] "$request" \'\n                      \'$status $body_bytes_sent "$http_referer" \'\n                      \'"$http_user_agent" "$http_x_forwarded_for"\';\n\n    access_log  logs/access.log  main;\n\n    #sendfile 指令指定 nginx 是否调用 sendfile 函数（zero copy 方式）来输出文件，\n    #对于普通应用，必须设为 on,\n    #如果用来进行下载等应用磁盘IO重负载应用，可设置为 off，\n    #以平衡磁盘与网络I/O处理速度，降低系统的uptime.\n    sendfile     on;\n    #tcp_nopush     on;\n\n    #连接超时时间\n    #keepalive_timeout  0;\n    keepalive_timeout  65;\n    tcp_nodelay     on;\n\n    #开启gzip压缩\n    gzip  on;\n    gzip_disable "MSIE [1-6].";\n\n    #设定请求缓冲\n    client_header_buffer_size    128k;\n    large_client_header_buffers  4 128k;\n\n\n    #设定虚拟主机配置\n    server {\n        #侦听80端口\n        listen    80;\n        #定义使用 www.nginx.cn访问\n        server_name  www.nginx.cn;\n\n        #定义服务器的默认网站根目录位置\n        root html;\n\n        #设定本虚拟主机的访问日志\n        access_log  logs/nginx.access.log  main;\n\n        #默认请求\n        location / {\n            \n            #定义首页索引文件的名称\n            index index.php index.html index.htm;   \n\n        }\n\n        # 定义错误提示页面\n        error_page   500 502 503 504 /50x.html;\n        location = /50x.html {\n        }\n\n        #静态文件，nginx自己处理\n        location ~ ^/(images|javascript|js|css|flash|media|static)/ {\n            \n            #过期30天，静态文件不怎么更新，过期可以设大一点，\n            #如果频繁更新，则可以设置得小一点。\n            expires 30d;\n        }\n\n        #PHP 脚本请求全部转发到 FastCGI处理. 使用FastCGI默认配置.\n        location ~ .php$ {\n            fastcgi_pass 127.0.0.1:9000;\n            fastcgi_index index.php;\n            fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;\n            include fastcgi_params;\n        }\n\n        #禁止访问 .htxxx 文件\n            location ~ /.ht {\n            deny all;\n        }\n\n    }\n}\n',normalizedContent:'#运行用户\nuser nobody;\n#启动进程,通常设置成和cpu的数量相等\nworker_processes  1;\n\n#全局错误日志及pid文件\n#error_log  logs/error.log;\n#error_log  logs/error.log  notice;\n#error_log  logs/error.log  info;\n\n#pid        logs/nginx.pid;\n\n#工作模式及连接数上限\nevents {\n    #epoll是多路复用io(i/o multiplexing)中的一种方式,\n    #仅用于linux2.6以上内核,可以大大提高nginx的性能\n    use   epoll; \n\n    #单个后台worker process进程的最大并发链接数    \n    worker_connections  1024;\n\n    # 并发总数是 worker_processes 和 worker_connections 的乘积\n    # 即 max_clients = worker_processes * worker_connections\n    # 在设置了反向代理的情况下，max_clients = worker_processes * worker_connections / 4  为什么\n    # 为什么上面反向代理要除以4，应该说是一个经验值\n    # 根据以上条件，正常情况下的nginx server可以应付的最大连接数为：4 * 8000 = 32000\n    # worker_connections 值的设置跟物理内存大小有关\n    # 因为并发受io约束，max_clients的值须小于系统可以打开的最大文件数\n    # 而系统可以打开的最大文件数和内存大小成正比，一般1gb内存的机器上可以打开的文件数大约是10万左右\n    # 我们来看看360m内存的vps可以打开的文件句柄数是多少：\n    # $ cat /proc/sys/fs/file-max\n    # 输出 34336\n    # 32000 < 34336，即并发连接总数小于系统可以打开的文件句柄总数，这样就在操作系统可以承受的范围之内\n    # 所以，worker_connections 的值需根据 worker_processes 进程数目和系统可以打开的最大文件总数进行适当地进行设置\n    # 使得并发总数小于操作系统可以打开的最大文件数目\n    # 其实质也就是根据主机的物理cpu和内存进行配置\n    # 当然，理论上的并发总数可能会和实际有所偏差，因为主机还有其他的工作进程需要消耗系统资源。\n    # ulimit -shn 65535\n\n}\n\n\nhttp {\n    #设定mime类型,类型由mime.type文件定义\n    include    mime.types;\n    default_type  application/octet-stream;\n    #设定日志格式\n    log_format  main  \'$remote_addr - $remote_user [$time_local] "$request" \'\n                      \'$status $body_bytes_sent "$http_referer" \'\n                      \'"$http_user_agent" "$http_x_forwarded_for"\';\n\n    access_log  logs/access.log  main;\n\n    #sendfile 指令指定 nginx 是否调用 sendfile 函数（zero copy 方式）来输出文件，\n    #对于普通应用，必须设为 on,\n    #如果用来进行下载等应用磁盘io重负载应用，可设置为 off，\n    #以平衡磁盘与网络i/o处理速度，降低系统的uptime.\n    sendfile     on;\n    #tcp_nopush     on;\n\n    #连接超时时间\n    #keepalive_timeout  0;\n    keepalive_timeout  65;\n    tcp_nodelay     on;\n\n    #开启gzip压缩\n    gzip  on;\n    gzip_disable "msie [1-6].";\n\n    #设定请求缓冲\n    client_header_buffer_size    128k;\n    large_client_header_buffers  4 128k;\n\n\n    #设定虚拟主机配置\n    server {\n        #侦听80端口\n        listen    80;\n        #定义使用 www.nginx.cn访问\n        server_name  www.nginx.cn;\n\n        #定义服务器的默认网站根目录位置\n        root html;\n\n        #设定本虚拟主机的访问日志\n        access_log  logs/nginx.access.log  main;\n\n        #默认请求\n        location / {\n            \n            #定义首页索引文件的名称\n            index index.php index.html index.htm;   \n\n        }\n\n        # 定义错误提示页面\n        error_page   500 502 503 504 /50x.html;\n        location = /50x.html {\n        }\n\n        #静态文件，nginx自己处理\n        location ~ ^/(images|javascript|js|css|flash|media|static)/ {\n            \n            #过期30天，静态文件不怎么更新，过期可以设大一点，\n            #如果频繁更新，则可以设置得小一点。\n            expires 30d;\n        }\n\n        #php 脚本请求全部转发到 fastcgi处理. 使用fastcgi默认配置.\n        location ~ .php$ {\n            fastcgi_pass 127.0.0.1:9000;\n            fastcgi_index index.php;\n            fastcgi_param  script_filename  $document_root$fastcgi_script_name;\n            include fastcgi_params;\n        }\n\n        #禁止访问 .htxxx 文件\n            location ~ /.ht {\n            deny all;\n        }\n\n    }\n}\n',charsets:{cjk:!0},lastUpdated:"2024/04/29, 11:14:33",lastUpdatedTimestamp:1714360473e3},{title:"nginx安装",frontmatter:{title:"nginx安装",date:"2024-04-28T14:19:16.000Z",permalink:"/pages/ce5255/"},regularPath:"/07.nginx/01.nginx/01.nginx%E5%AE%89%E8%A3%85.html",relativePath:"07.nginx/01.nginx/01.nginx安装.md",key:"v-5abd2300",path:"/pages/ce5255/",headers:[{level:3,title:"1. yum安装",slug:"_1-yum安装",normalizedTitle:"1. yum安装",charIndex:2},{level:3,title:"2. 源码安装",slug:"_2-源码安装",normalizedTitle:"2. 源码安装",charIndex:950}],headersStr:"1. yum安装 2. 源码安装",content:"# 1. yum安装\n\n#添加源\nrpm -Uvh http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm\n#安装nginx\nyum install -y nginx\n\n\n启动和停止\n\n#启动nginx\nsystemctl start nginx.service\n#停止\nsystemctl stop nginx.service\n\n\n在使用 yum install -y nginx 命令安装 Nginx 后，通常情况下，Nginx 的各个目录及主要文件位于以下位置：\n\n 1. 配置文件目录：\n    * /etc/nginx：Nginx 的配置文件所在目录。\n    * /etc/nginx/nginx.conf：Nginx 主配置文件，包含全局配置和引入其他配置文件的指令。\n 2. 网站根目录：\n    * 默认情况下，Nginx 的网站根目录可以在配置文件中指定，通常位于 /usr/share/nginx/html 或 /var/www/html。\n 3. 日志文件目录：\n    * /var/log/nginx：Nginx 的日志文件所在目录。\n    * /var/log/nginx/access.log：Nginx 的访问日志文件，记录所有访问请求的信息。\n    * /var/log/nginx/error.log：Nginx 的错误日志文件，记录服务器运行过程中的错误信息。\n 4. 站点配置文件目录：\n    * /etc/nginx/conf.d：Nginx 的站点配置文件所在目录，通常包含一个或多个以 .conf 结尾的配置文件，每个文件对应一个站点或应用的配置。\n 5. 其他目录：\n    * /usr/lib/systemd/system：Systemd 单元文件目录，包含 Nginx 的 Systemd 服务单元文件，用于管理 Nginx 的启动、停止和状态等操作。\n\n请注意，这些目录位置可能会因操作系统版本、Nginx 版本和自定义配置而有所不同。在实际安装过程中，可以通过查看文档或执行命令来确认确切的目录位置\n\n\n# 2. 源码安装\n\n现在以nginx-1.22.1.tar.gz为例官网下载\n\n安装依赖环境(若安装则跳过此步骤)\n\n#若无wget命令(有则跳过此步骤)\nyum install -y wget\n#nginx编译需要依赖gcc环境\nyum install gcc-c++\n#nginx的http模块使用pcre来解析正则表达式\nyum install -y pcre pcre-devel\n#nginx的http模块使用pcre来解析正则表达式\nyum install -y zlib zlib-devel\n#nginx支持的https协议需要ssl加密\nyum install -y openssl openssl-devel\n\n\n下载和编译\n\n#下载源码文件\nwget https://nginx.org/download/nginx-1.22.1.tar.gz\n#解压文件\ntar -zxvf nginx-1.22.1.tar.gz\n#进入nginx-1.22.1目录\ncd nginx-1.22.1\n#执行以下命令编译nginx\n./configure\nmake\nmake install\n#完成后可在/usr/local/nginx目录找到相关文件\n\n\n\n启动和停止\n\n#启动nginx\n/usr/local/nginx/sbin/nginx\n#停止nginx\n/usr/local/nginx/sbin/nginx -s stop\n",normalizedContent:"# 1. yum安装\n\n#添加源\nrpm -uvh http://nginx.org/packages/centos/7/noarch/rpms/nginx-release-centos-7-0.el7.ngx.noarch.rpm\n#安装nginx\nyum install -y nginx\n\n\n启动和停止\n\n#启动nginx\nsystemctl start nginx.service\n#停止\nsystemctl stop nginx.service\n\n\n在使用 yum install -y nginx 命令安装 nginx 后，通常情况下，nginx 的各个目录及主要文件位于以下位置：\n\n 1. 配置文件目录：\n    * /etc/nginx：nginx 的配置文件所在目录。\n    * /etc/nginx/nginx.conf：nginx 主配置文件，包含全局配置和引入其他配置文件的指令。\n 2. 网站根目录：\n    * 默认情况下，nginx 的网站根目录可以在配置文件中指定，通常位于 /usr/share/nginx/html 或 /var/www/html。\n 3. 日志文件目录：\n    * /var/log/nginx：nginx 的日志文件所在目录。\n    * /var/log/nginx/access.log：nginx 的访问日志文件，记录所有访问请求的信息。\n    * /var/log/nginx/error.log：nginx 的错误日志文件，记录服务器运行过程中的错误信息。\n 4. 站点配置文件目录：\n    * /etc/nginx/conf.d：nginx 的站点配置文件所在目录，通常包含一个或多个以 .conf 结尾的配置文件，每个文件对应一个站点或应用的配置。\n 5. 其他目录：\n    * /usr/lib/systemd/system：systemd 单元文件目录，包含 nginx 的 systemd 服务单元文件，用于管理 nginx 的启动、停止和状态等操作。\n\n请注意，这些目录位置可能会因操作系统版本、nginx 版本和自定义配置而有所不同。在实际安装过程中，可以通过查看文档或执行命令来确认确切的目录位置\n\n\n# 2. 源码安装\n\n现在以nginx-1.22.1.tar.gz为例官网下载\n\n安装依赖环境(若安装则跳过此步骤)\n\n#若无wget命令(有则跳过此步骤)\nyum install -y wget\n#nginx编译需要依赖gcc环境\nyum install gcc-c++\n#nginx的http模块使用pcre来解析正则表达式\nyum install -y pcre pcre-devel\n#nginx的http模块使用pcre来解析正则表达式\nyum install -y zlib zlib-devel\n#nginx支持的https协议需要ssl加密\nyum install -y openssl openssl-devel\n\n\n下载和编译\n\n#下载源码文件\nwget https://nginx.org/download/nginx-1.22.1.tar.gz\n#解压文件\ntar -zxvf nginx-1.22.1.tar.gz\n#进入nginx-1.22.1目录\ncd nginx-1.22.1\n#执行以下命令编译nginx\n./configure\nmake\nmake install\n#完成后可在/usr/local/nginx目录找到相关文件\n\n\n\n启动和停止\n\n#启动nginx\n/usr/local/nginx/sbin/nginx\n#停止nginx\n/usr/local/nginx/sbin/nginx -s stop\n",charsets:{cjk:!0},lastUpdated:"2024/04/29, 11:14:33",lastUpdatedTimestamp:1714360473e3},{title:"nginx配置清单",frontmatter:{title:"nginx配置清单",date:"2024-04-28T14:19:16.000Z",permalink:"/pages/ad2c6a/"},regularPath:"/07.nginx/01.nginx/03.nginx%E9%85%8D%E7%BD%AE%E6%B8%85%E5%8D%95.html",relativePath:"07.nginx/01.nginx/03.nginx配置清单.md",key:"v-5438e202",path:"/pages/ad2c6a/",headers:[{level:2,title:"侦听端口",slug:"侦听端口",normalizedTitle:"侦听端口",charIndex:215},{level:2,title:"访问日志",slug:"访问日志",normalizedTitle:"访问日志",charIndex:447},{level:2,title:"域名",slug:"域名",normalizedTitle:"域名",charIndex:573},{level:2,title:"静态资产",slug:"静态资产",normalizedTitle:"静态资产",charIndex:919},{level:2,title:"重定向",slug:"重定向",normalizedTitle:"重定向",charIndex:1018},{level:2,title:"反向代理",slug:"反向代理",normalizedTitle:"反向代理",charIndex:97},{level:2,title:"负载均衡",slug:"负载均衡",normalizedTitle:"负载均衡",charIndex:1454},{level:2,title:"SSL 协议",slug:"ssl-协议",normalizedTitle:"ssl 协议",charIndex:1644}],headersStr:"侦听端口 访问日志 域名 静态资产 重定向 反向代理 负载均衡 SSL 协议",content:"[JavaCat](javascript:void(0)😉 3天前\n\n来源：vishnu.hashnode.dev/nginx-cheatsheet\n\nNginx 是一个高性能的 HTTP 和反向代理 web 服务器，同时也提供了 IMAP/POP3/SMTP 服务，其因丰富的功能集、稳定性、示例配置文件和低系统资源的消耗受到了开发者的欢迎。\n\n本文，我们总结了一些常用的 Nginx 配置代码，希望对大家有所帮助。\n\n\n# 侦听端口\n\nserver {\n# Standard HTTP Protocol\nlisten 80;\n# Standard HTTPS Protocol\nlisten 443 ssl;\n# For http2\nlisten 443 ssl http2;\n# Listen on 80 using IPv6\nlisten [::]:80;\n# Listen only on using IPv6\nlisten [::]:80 ipv6only=on;\n}\n\n\n\n# 访问日志\n\nserver {\n# Relative or full path to log file\naccess_log /path/to/file.log;\n# Turn 'on' or 'off'  \naccess_log on;\n}\n\n\n\n# 域名\n\nserver {\n# Listen to yourdomain.com\nserver_name yourdomain.com;\n# Listen to multiple domains server_name yourdomain.com www.yourdomain.com;\n# Listen to all domains\nserver_name *.yourdomain.com;\n# Listen to all top-level domains\nserver_name yourdomain.*;\n# Listen to unspecified Hostnames (Listens to IP address itself)\nserver_name \"\";\n}\n\n\n\n# 静态资产\n\nserver {\nlisten 80;\nserver_name yourdomain.com;\nlocation / {\nroot /path/to/website;\n}\n}\n\n\n\n# 重定向\n\nserver {\nlisten 80;\nserver_name www.yourdomain.com;\nreturn 301 http://yourdomain.com$request_uri;\n}\nserver {\nlisten 80;\nserver_name www.yourdomain.com;\nlocation /redirect-url {\nreturn 301 http://otherdomain.com;\n}\n}\n\n\n\n# 反向代理\n\nserver {\nlisten 80;\nserver_name yourdomain.com;\nlocation / {\nproxy_pass http://0.0.0.0:3000;\n# where 0.0.0.0:3000 is your application server (Ex: node.js) bound on 0.0.0.0 listening on port 3000\n}\n}\n\n\n\n# 负载均衡\n\nupstream node_js {\nserver 0.0.0.0:3000;\nserver 0.0.0.0:4000;\nserver 123.131.121.122;\n}\nserver {\nlisten 80;\nserver_name yourdomain.com;\nlocation / {\nproxy_pass http://node_js;\n}\n}\n\n\n\n# SSL 协议\n\nserver {\nlisten 443 ssl;\nserver_name yourdomain.com;\nssl on;\nssl_certificate /path/to/cert.pem;\nssl_certificate_key /path/to/privatekey.pem;\nssl_stapling on;\nssl_stapling_verify on;\nssl_trusted_certificate /path/to/fullchain.pem;\nssl_protocols TLSv1 TLSv1.1 TLSv1.2;\nssl_session_timeout 1h;\nssl_session_cache shared:SSL:50m;\nadd_header Strict-Transport-Security max-age=15768000;\n}\n# Permanent Redirect for HTTP to HTTPS\nserver \n{\nlisten 80;\nserver_name yourdomain.com;\nreturn 301 https://$host$request_uri;\n}\n\n\n其实可以采用可视化的方式对 Nginx 进行配置，我在 GitHub 上发现了一款可以一键生成 Nginx 配置的神器，相当给力。\n\n先来看看它都支持什么功能的配置：反向代理、HTTPS、HTTP/2、IPv6, 缓存、WordPress、CDN、Node.js 支持、 Python (Django) 服务器等等。\n\n如果你想在线进行配置，只需要打开网站：https://nginxconfig.io/，按照自己的需求进行操作就行了。",normalizedContent:"[javacat](javascript:void(0)😉 3天前\n\n来源：vishnu.hashnode.dev/nginx-cheatsheet\n\nnginx 是一个高性能的 http 和反向代理 web 服务器，同时也提供了 imap/pop3/smtp 服务，其因丰富的功能集、稳定性、示例配置文件和低系统资源的消耗受到了开发者的欢迎。\n\n本文，我们总结了一些常用的 nginx 配置代码，希望对大家有所帮助。\n\n\n# 侦听端口\n\nserver {\n# standard http protocol\nlisten 80;\n# standard https protocol\nlisten 443 ssl;\n# for http2\nlisten 443 ssl http2;\n# listen on 80 using ipv6\nlisten [::]:80;\n# listen only on using ipv6\nlisten [::]:80 ipv6only=on;\n}\n\n\n\n# 访问日志\n\nserver {\n# relative or full path to log file\naccess_log /path/to/file.log;\n# turn 'on' or 'off'  \naccess_log on;\n}\n\n\n\n# 域名\n\nserver {\n# listen to yourdomain.com\nserver_name yourdomain.com;\n# listen to multiple domains server_name yourdomain.com www.yourdomain.com;\n# listen to all domains\nserver_name *.yourdomain.com;\n# listen to all top-level domains\nserver_name yourdomain.*;\n# listen to unspecified hostnames (listens to ip address itself)\nserver_name \"\";\n}\n\n\n\n# 静态资产\n\nserver {\nlisten 80;\nserver_name yourdomain.com;\nlocation / {\nroot /path/to/website;\n}\n}\n\n\n\n# 重定向\n\nserver {\nlisten 80;\nserver_name www.yourdomain.com;\nreturn 301 http://yourdomain.com$request_uri;\n}\nserver {\nlisten 80;\nserver_name www.yourdomain.com;\nlocation /redirect-url {\nreturn 301 http://otherdomain.com;\n}\n}\n\n\n\n# 反向代理\n\nserver {\nlisten 80;\nserver_name yourdomain.com;\nlocation / {\nproxy_pass http://0.0.0.0:3000;\n# where 0.0.0.0:3000 is your application server (ex: node.js) bound on 0.0.0.0 listening on port 3000\n}\n}\n\n\n\n# 负载均衡\n\nupstream node_js {\nserver 0.0.0.0:3000;\nserver 0.0.0.0:4000;\nserver 123.131.121.122;\n}\nserver {\nlisten 80;\nserver_name yourdomain.com;\nlocation / {\nproxy_pass http://node_js;\n}\n}\n\n\n\n# ssl 协议\n\nserver {\nlisten 443 ssl;\nserver_name yourdomain.com;\nssl on;\nssl_certificate /path/to/cert.pem;\nssl_certificate_key /path/to/privatekey.pem;\nssl_stapling on;\nssl_stapling_verify on;\nssl_trusted_certificate /path/to/fullchain.pem;\nssl_protocols tlsv1 tlsv1.1 tlsv1.2;\nssl_session_timeout 1h;\nssl_session_cache shared:ssl:50m;\nadd_header strict-transport-security max-age=15768000;\n}\n# permanent redirect for http to https\nserver \n{\nlisten 80;\nserver_name yourdomain.com;\nreturn 301 https://$host$request_uri;\n}\n\n\n其实可以采用可视化的方式对 nginx 进行配置，我在 github 上发现了一款可以一键生成 nginx 配置的神器，相当给力。\n\n先来看看它都支持什么功能的配置：反向代理、https、http/2、ipv6, 缓存、wordpress、cdn、node.js 支持、 python (django) 服务器等等。\n\n如果你想在线进行配置，只需要打开网站：https://nginxconfig.io/，按照自己的需求进行操作就行了。",charsets:{cjk:!0},lastUpdated:"2024/04/29, 11:14:33",lastUpdatedTimestamp:1714360473e3},{title:"反向代理配置",frontmatter:{title:"反向代理配置",date:"2024-04-28T14:19:16.000Z",permalink:"/pages/5de167/"},regularPath:"/07.nginx/01.nginx/04.%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E9%85%8D%E7%BD%AE.html",relativePath:"07.nginx/01.nginx/04.反向代理配置.md",key:"v-2d87f8c3",path:"/pages/5de167/",headers:[{level:2,title:"1.什么是反向代理服务器",slug:"_1-什么是反向代理服务器",normalizedTitle:"1.什么是反向代理服务器",charIndex:106},{level:2,title:"2.反向代理服务器的好处",slug:"_2-反向代理服务器的好处",normalizedTitle:"2.反向代理服务器的好处",charIndex:680},{level:2,title:"3.nginx配置示例",slug:"_3-nginx配置示例",normalizedTitle:"3.nginx配置示例",charIndex:820},{level:2,title:"4.proxypass和fastcgipass区别",slug:"_4-proxy-pass和fastcgi-pass区别",normalizedTitle:"4.proxypass和fastcgipass区别",charIndex:null},{level:3,title:"4.1 proxy_pass：",slug:"_4-1-proxy-pass",normalizedTitle:"4.1 proxy_pass：",charIndex:1218},{level:3,title:"4.2 fastcgi_pass：",slug:"_4-2-fastcgi-pass",normalizedTitle:"4.2 fastcgi_pass：",charIndex:1456},{level:2,title:"5.负载均衡策略",slug:"_5-负载均衡策略",normalizedTitle:"5.负载均衡策略",charIndex:1934},{level:3,title:"5.1 轮询（Round Robin）",slug:"_5-1-轮询-round-robin",normalizedTitle:"5.1 轮询（round robin）",charIndex:2e3},{level:3,title:"5.2 IP Hash",slug:"_5-2-ip-hash",normalizedTitle:"5.2 ip hash",charIndex:2302},{level:3,title:"5.3 最少连接数(Least Connections)",slug:"_5-3-最少连接数-least-connections",normalizedTitle:"5.3 最少连接数(least connections)",charIndex:2623},{level:3,title:"5.4 权重(Weighted Load Balancing)",slug:"_5-4-权重-weighted-load-balancing",normalizedTitle:"5.4 权重(weighted load balancing)",charIndex:2944}],headersStr:"1.什么是反向代理服务器 2.反向代理服务器的好处 3.nginx配置示例 4.proxypass和fastcgipass区别 4.1 proxy_pass： 4.2 fastcgi_pass： 5.负载均衡策略 5.1 轮询（Round Robin） 5.2 IP Hash 5.3 最少连接数(Least Connections) 5.4 权重(Weighted Load Balancing)",content:"# nginx反向代理\n\nnginx作为web服务器一个重要的功能就是反向代理。\n\nnginx反向代理的指令不需要新增额外的模块，默认自带proxy_pass指令，只需要修改配置文件就可以实现反向代理。\n\n\n# 1.什么是反向代理服务器\n\n反向代理功能是nginx的三大主要功能之一（静态web服务器、反向代理、负载均衡）。nginx一般同时做为静态web服务器和反向代理服务器，做为web服务器访问静态文件图片、css、js、html等文件，做为反向代理服务器把请求发给后端业务处理服务，如果有多个后端处理节点，会配置负载均衡功能。\n\n反向代理服务器是一种代理服务器，用于管理从外部网络到内部网络的连接或任何特定请求。它保护、路由和管理从外部网络到内部网络、Web服务器或专用网络的流量。\n\n**外网客户机：**我们平时打开浏览器输入网址访问www.nginx.cn的场景中，我们的笔记本就可以理解为一个外网客户机。\n\n**nginx反向代理服务：**浏览器输入网址并回车后，会发起一个http请求给nginx（反向代理服务器），这个请求如果是访问静态文件，那么nginx作为web服务器直接返回请求的内容，如果是访问的后台服务逻辑，那么nginx把请求转发给后端的服务处理。\n\n**内网web服务：**后端的服务可以是很多种类型，LNMP环境下的php-fpm进程，Java环境下的tomcat、jetty等容器，通过程序逻辑处理http请求，生成html页面或者json串返回给客户端。对于小型应用，后端服务可以和nginx部署在同一台机器上。\n\n\n# 2.反向代理服务器的好处\n\nnginx反向代理重要的作用是配合upstream实现负载均衡。\n\n同时增加安全性，客户端不能直接访问后端服务，多了一个中间的屏障。\n\n提升性能，通过异步非阻塞的方式把请求传给后端，提升了并发处理能力。\n\n也可利用缓存、压缩响应提高响应速度。\n\n\n# 3.nginx配置示例\n\nupstream backend {\n    server backend1.example.com;\n    server backend2.example.com;\n    server backend3.example.com;\n}\n\nserver {\n    listen 80;\n    server_name backend_server;   \n    location / {\n        proxy_pass http://backend;\n    }\n}\n\n\n\n# 4.proxy_pass和fastcgi_pass区别\n\nproxy_pass 和 fastcgi_pass 是 Nginx 中用于将请求转发到后端服务器的两种不同方式，分别用于 HTTP 反向代理和 FastCGI 代理。它们的区别主要在于后端服务器的类型和通信协议。\n\n\n# 4.1 proxy_pass：\n\n * 用于将 HTTP 或 HTTPS 请求转发给另一个服务器。\n * 适用于反向代理 HTTP、HTTPS、WebSocket 等协议。\n * 在配置中使用 proxy_pass 指令，并指定后端服务器的地址。\n * 在后端服务器使用任何 HTTP 服务器，如 Apache、Node.js、Tomcat 等。\n\n示例：\n\nlocation / {\n    proxy_pass http://backend_server;\n}\n\n\n\n# 4.2 fastcgi_pass：\n\n * 用于将请求转发给 FastCGI 进程（如 PHP-FPM）来处理。\n * 适用于处理动态内容，如 PHP 脚本、Python、Ruby 等。\n * 在配置中使用 fastcgi_pass 指令，并指定 FastCGI 进程的地址和端口。\n * 在后端服务器需要运行 FastCGI 进程池，如 PHP-FPM。\n\n示例：\n\nlocation ~ \\.php$ {\n    fastcgi_pass unix:/var/run/php/php7.4-fpm.sock;\n    fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;\n    include fastcgi_params;\n}\n\n\n总的来说，proxy_pass 用于反向代理 HTTP、HTTPS 请求到另一台服务器，而 fastcgi_pass 用于将请求传递给 FastCGI 进程来处理动态内容。选择使用哪种方式取决于你的后端服务器的类型和所需的功能。\n\n\n# 5.负载均衡策略\n\nNginx反向代理负载均衡策略通常有以下几种，它们可以单独使用或者结合多种策略来实现更灵活的负载均衡：\n\n\n# 5.1 轮询（Round Robin）\n\n轮询（Round Robin）：默认的负载均衡策略，Nginx会按照定义的一组后端服务器列表轮流将请求分配到每个服务器上，每个请求依次分发到不同的服务器。\n\n配置示例：\n\nupstream backend {\n    server backend1.example.com;\n    server backend2.example.com;\n    server backend3.example.com;\n}\n\nserver {\n    location / {\n        proxy_pass http://backend;\n    }\n}\n\n\n\n# 5.2 IP Hash\n\nIP Hash：基于客户端IP地址的哈希值，将每个请求根据其来源IP地址哈希到同一个后端服务器上，这样可以保证相同IP的请求都发送到同一个后端服务器，适用于需要保持会话一致性的场景。\n\n配置示例：\n\nupstream backend {\n    ip_hash;\n    server backend1.example.com;\n    server backend2.example.com;\n    server backend3.example.com;\n}\n\nserver {\n    location / {\n        proxy_pass http://backend;\n    }\n}\n\n\n\n# 5.3 最少连接数(Least Connections)\n\nLeast Connections：将请求发送到当前连接数最少的后端服务器上，这样可以实现动态的负载均衡，避免出现某一台服务器负载过重的情况。\n\n配置示例：\n\nupstream backend {\n    least_conn;\n    server backend1.example.com;\n    server backend2.example.com;\n    server backend3.example.com;\n}\n\nserver {\n    location / {\n        proxy_pass http://backend;\n    }\n}\n\n\n\n# 5.4 权重(Weighted Load Balancing)\n\nWeighted Load Balancing：可以为每个后端服务器配置权重，根据权重来决定向每个服务器发送的请求比例。\n\n配置示例：\n\nupstream backend {\n    server backend1.example.com weight=3;\n    server backend2.example.com weight=2;\n    server backend3.example.com weight=1;\n}\n\nserver {\n    location / {\n        proxy_pass http://backend;\n    }\n}\n\n\n这些负载均衡策略可以根据实际需求进行组合和调整，以满足不同场景下的性能和可用性要求。",normalizedContent:"# nginx反向代理\n\nnginx作为web服务器一个重要的功能就是反向代理。\n\nnginx反向代理的指令不需要新增额外的模块，默认自带proxy_pass指令，只需要修改配置文件就可以实现反向代理。\n\n\n# 1.什么是反向代理服务器\n\n反向代理功能是nginx的三大主要功能之一（静态web服务器、反向代理、负载均衡）。nginx一般同时做为静态web服务器和反向代理服务器，做为web服务器访问静态文件图片、css、js、html等文件，做为反向代理服务器把请求发给后端业务处理服务，如果有多个后端处理节点，会配置负载均衡功能。\n\n反向代理服务器是一种代理服务器，用于管理从外部网络到内部网络的连接或任何特定请求。它保护、路由和管理从外部网络到内部网络、web服务器或专用网络的流量。\n\n**外网客户机：**我们平时打开浏览器输入网址访问www.nginx.cn的场景中，我们的笔记本就可以理解为一个外网客户机。\n\n**nginx反向代理服务：**浏览器输入网址并回车后，会发起一个http请求给nginx（反向代理服务器），这个请求如果是访问静态文件，那么nginx作为web服务器直接返回请求的内容，如果是访问的后台服务逻辑，那么nginx把请求转发给后端的服务处理。\n\n**内网web服务：**后端的服务可以是很多种类型，lnmp环境下的php-fpm进程，java环境下的tomcat、jetty等容器，通过程序逻辑处理http请求，生成html页面或者json串返回给客户端。对于小型应用，后端服务可以和nginx部署在同一台机器上。\n\n\n# 2.反向代理服务器的好处\n\nnginx反向代理重要的作用是配合upstream实现负载均衡。\n\n同时增加安全性，客户端不能直接访问后端服务，多了一个中间的屏障。\n\n提升性能，通过异步非阻塞的方式把请求传给后端，提升了并发处理能力。\n\n也可利用缓存、压缩响应提高响应速度。\n\n\n# 3.nginx配置示例\n\nupstream backend {\n    server backend1.example.com;\n    server backend2.example.com;\n    server backend3.example.com;\n}\n\nserver {\n    listen 80;\n    server_name backend_server;   \n    location / {\n        proxy_pass http://backend;\n    }\n}\n\n\n\n# 4.proxy_pass和fastcgi_pass区别\n\nproxy_pass 和 fastcgi_pass 是 nginx 中用于将请求转发到后端服务器的两种不同方式，分别用于 http 反向代理和 fastcgi 代理。它们的区别主要在于后端服务器的类型和通信协议。\n\n\n# 4.1 proxy_pass：\n\n * 用于将 http 或 https 请求转发给另一个服务器。\n * 适用于反向代理 http、https、websocket 等协议。\n * 在配置中使用 proxy_pass 指令，并指定后端服务器的地址。\n * 在后端服务器使用任何 http 服务器，如 apache、node.js、tomcat 等。\n\n示例：\n\nlocation / {\n    proxy_pass http://backend_server;\n}\n\n\n\n# 4.2 fastcgi_pass：\n\n * 用于将请求转发给 fastcgi 进程（如 php-fpm）来处理。\n * 适用于处理动态内容，如 php 脚本、python、ruby 等。\n * 在配置中使用 fastcgi_pass 指令，并指定 fastcgi 进程的地址和端口。\n * 在后端服务器需要运行 fastcgi 进程池，如 php-fpm。\n\n示例：\n\nlocation ~ \\.php$ {\n    fastcgi_pass unix:/var/run/php/php7.4-fpm.sock;\n    fastcgi_param script_filename $document_root$fastcgi_script_name;\n    include fastcgi_params;\n}\n\n\n总的来说，proxy_pass 用于反向代理 http、https 请求到另一台服务器，而 fastcgi_pass 用于将请求传递给 fastcgi 进程来处理动态内容。选择使用哪种方式取决于你的后端服务器的类型和所需的功能。\n\n\n# 5.负载均衡策略\n\nnginx反向代理负载均衡策略通常有以下几种，它们可以单独使用或者结合多种策略来实现更灵活的负载均衡：\n\n\n# 5.1 轮询（round robin）\n\n轮询（round robin）：默认的负载均衡策略，nginx会按照定义的一组后端服务器列表轮流将请求分配到每个服务器上，每个请求依次分发到不同的服务器。\n\n配置示例：\n\nupstream backend {\n    server backend1.example.com;\n    server backend2.example.com;\n    server backend3.example.com;\n}\n\nserver {\n    location / {\n        proxy_pass http://backend;\n    }\n}\n\n\n\n# 5.2 ip hash\n\nip hash：基于客户端ip地址的哈希值，将每个请求根据其来源ip地址哈希到同一个后端服务器上，这样可以保证相同ip的请求都发送到同一个后端服务器，适用于需要保持会话一致性的场景。\n\n配置示例：\n\nupstream backend {\n    ip_hash;\n    server backend1.example.com;\n    server backend2.example.com;\n    server backend3.example.com;\n}\n\nserver {\n    location / {\n        proxy_pass http://backend;\n    }\n}\n\n\n\n# 5.3 最少连接数(least connections)\n\nleast connections：将请求发送到当前连接数最少的后端服务器上，这样可以实现动态的负载均衡，避免出现某一台服务器负载过重的情况。\n\n配置示例：\n\nupstream backend {\n    least_conn;\n    server backend1.example.com;\n    server backend2.example.com;\n    server backend3.example.com;\n}\n\nserver {\n    location / {\n        proxy_pass http://backend;\n    }\n}\n\n\n\n# 5.4 权重(weighted load balancing)\n\nweighted load balancing：可以为每个后端服务器配置权重，根据权重来决定向每个服务器发送的请求比例。\n\n配置示例：\n\nupstream backend {\n    server backend1.example.com weight=3;\n    server backend2.example.com weight=2;\n    server backend3.example.com weight=1;\n}\n\nserver {\n    location / {\n        proxy_pass http://backend;\n    }\n}\n\n\n这些负载均衡策略可以根据实际需求进行组合和调整，以满足不同场景下的性能和可用性要求。",charsets:{cjk:!0},lastUpdated:"2024/04/29, 11:14:33",lastUpdatedTimestamp:1714360473e3},{title:"root和alias的区别",frontmatter:{title:"root和alias的区别",date:"2024-04-28T14:19:16.000Z",permalink:"/pages/3a71f1/"},regularPath:"/07.nginx/01.nginx/05.root%E5%92%8Calias%E7%9A%84%E5%8C%BA%E5%88%AB.html",relativePath:"07.nginx/01.nginx/05.root和alias的区别.md",key:"v-767608dd",path:"/pages/3a71f1/",headersStr:null,content:"nginx指定文件路径有两种方式root和alias，指令的使用方法和作用域：\n\n[root]\n\n语法：root path\n\n默认值：root html\n\n配置段：http、server、location、if\n\n[alias]\n\n语法：alias path\n\n配置段：location\n\nroot与alias主要区别在于nginx如何解释location后面的uri，这会使两者分别以不同的方式将请求映射到服务器文件上。\n\nroot的处理结果是：root路径＋location路径\n\nalias的处理结果是：使用alias路径替换location路径\n\nalias是一个目录别名的定义，root则是最上层目录的定义。\n\n还有一个重要的区别是alias后面必须要用“/”结束，否则会找不到文件的。。。而root则可有可无~~",normalizedContent:"nginx指定文件路径有两种方式root和alias，指令的使用方法和作用域：\n\n[root]\n\n语法：root path\n\n默认值：root html\n\n配置段：http、server、location、if\n\n[alias]\n\n语法：alias path\n\n配置段：location\n\nroot与alias主要区别在于nginx如何解释location后面的uri，这会使两者分别以不同的方式将请求映射到服务器文件上。\n\nroot的处理结果是：root路径＋location路径\n\nalias的处理结果是：使用alias路径替换location路径\n\nalias是一个目录别名的定义，root则是最上层目录的定义。\n\n还有一个重要的区别是alias后面必须要用“/”结束，否则会找不到文件的。。。而root则可有可无~~",charsets:{cjk:!0},lastUpdated:"2024/04/29, 11:14:33",lastUpdatedTimestamp:1714360473e3},{title:"nginx拿到真实域名和ip",frontmatter:{title:"nginx拿到真实域名和ip",date:"2024-04-28T14:19:16.000Z",permalink:"/pages/788324/"},regularPath:"/07.nginx/01.nginx/06.nginx%E6%8B%BF%E5%88%B0%E7%9C%9F%E5%AE%9E%E5%9F%9F%E5%90%8D%E5%92%8Cip.html",relativePath:"07.nginx/01.nginx/06.nginx拿到真实域名和ip.md",key:"v-65d3be39",path:"/pages/788324/",headersStr:null,content:'# nginx 反向代理 取得真实IP和域名\n\n一、反向代理配置：\n\n完整配置示例\n\n(/etc/nginx/nginx.conf) nginx.conf：\n\nworker_processes  1;\nevents {\n    worker_connections  1024;\n} \nhttp {\n    include       mime.types;\n    default_type  application/octet-stream;\n    sendfile        on;\n    keepalive_timeout  65; \n\n    upstream backend {             \n       server 192.168.56.4;\n       server 192.168.56.5;　　　　fair;\n    } \n\n    server {\n        listen       80;\n        server_name  _; \n\n        location / {\n\n        #设置主机头和客户端真实地址，以便服务器获取客户端真实IP\n             proxy_set_header Host $host;\n             proxy_set_header X-Real-IP $remote_addr;\n             proxy_set_header REMOTE-HOST $remote_addr;\n             proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n\n             #禁用缓存\n             proxy_buffering off; \n\n             #反向代理的地址\n             proxy_pass http://backend;    \n        }\n    } \n} \n\n\n二、获取真实客户端ip\n\nnginx反向代理后，在应用中取得的ip都是反向代理服务器的ip，取得的域名也是反向代理配置的url的域名，解决该问题，需要在nginx反向代理配置中添加一些配置信息，目的将客户端的真实ip和域名传递到应用程序中。\n\nnginx反向代理配置时，一般会添加下面的配置：\n\nproxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header REMOTE-HOST $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n\n其中第一行关于host的配置，是关于域名传递的配置，余下跟IP相关。\n\nJava取得客户端真实IP：\n\npublic String getClientIP(HttpServletRequest request) {   \n   String ip = request.getHeader("x-forwarded-for");   \n   if(ip == null || ip.length() == 0 || "unknown".equalsIgnoreCase(ip)) {   \n       ip = request.getHeader("Proxy-Client-IP");   \n   }   \n   if(ip == null || ip.length() == 0 || "unknown".equalsIgnoreCase(ip)) {   \n       ip = request.getHeader("WL-Proxy-Client-IP");   \n \n   }   \n   if(ip == null || ip.length() == 0 || "unknown".equalsIgnoreCase(ip)) {   \n       ip = request.getRemoteAddr();   \n   }   \n   return ip;   \n}  \n\n\njava取得域名：\n\nJava代码\n\nrequest.getServerName()  \n',normalizedContent:'# nginx 反向代理 取得真实ip和域名\n\n一、反向代理配置：\n\n完整配置示例\n\n(/etc/nginx/nginx.conf) nginx.conf：\n\nworker_processes  1;\nevents {\n    worker_connections  1024;\n} \nhttp {\n    include       mime.types;\n    default_type  application/octet-stream;\n    sendfile        on;\n    keepalive_timeout  65; \n\n    upstream backend {             \n       server 192.168.56.4;\n       server 192.168.56.5;　　　　fair;\n    } \n\n    server {\n        listen       80;\n        server_name  _; \n\n        location / {\n\n        #设置主机头和客户端真实地址，以便服务器获取客户端真实ip\n             proxy_set_header host $host;\n             proxy_set_header x-real-ip $remote_addr;\n             proxy_set_header remote-host $remote_addr;\n             proxy_set_header x-forwarded-for $proxy_add_x_forwarded_for;\n\n             #禁用缓存\n             proxy_buffering off; \n\n             #反向代理的地址\n             proxy_pass http://backend;    \n        }\n    } \n} \n\n\n二、获取真实客户端ip\n\nnginx反向代理后，在应用中取得的ip都是反向代理服务器的ip，取得的域名也是反向代理配置的url的域名，解决该问题，需要在nginx反向代理配置中添加一些配置信息，目的将客户端的真实ip和域名传递到应用程序中。\n\nnginx反向代理配置时，一般会添加下面的配置：\n\nproxy_set_header host $host; proxy_set_header x-real-ip $remote_addr; proxy_set_header remote-host $remote_addr; proxy_set_header x-forwarded-for $proxy_add_x_forwarded_for;\n\n其中第一行关于host的配置，是关于域名传递的配置，余下跟ip相关。\n\njava取得客户端真实ip：\n\npublic string getclientip(httpservletrequest request) {   \n   string ip = request.getheader("x-forwarded-for");   \n   if(ip == null || ip.length() == 0 || "unknown".equalsignorecase(ip)) {   \n       ip = request.getheader("proxy-client-ip");   \n   }   \n   if(ip == null || ip.length() == 0 || "unknown".equalsignorecase(ip)) {   \n       ip = request.getheader("wl-proxy-client-ip");   \n \n   }   \n   if(ip == null || ip.length() == 0 || "unknown".equalsignorecase(ip)) {   \n       ip = request.getremoteaddr();   \n   }   \n   return ip;   \n}  \n\n\njava取得域名：\n\njava代码\n\nrequest.getservername()  \n',charsets:{cjk:!0},lastUpdated:"2024/04/29, 11:14:33",lastUpdatedTimestamp:1714360473e3},{title:"mapstruct无法获取lombok生成的get和set方法",frontmatter:{title:"mapstruct无法获取lombok生成的get和set方法",date:"2024-04-28T14:28:03.000Z",permalink:"/pages/807961/"},regularPath:"/08.java/04.util/03.mapstruct%E6%97%A0%E6%B3%95%E8%8E%B7%E5%8F%96lombok%E7%94%9F%E6%88%90%E7%9A%84get%E5%92%8Cset%E6%96%B9%E6%B3%95.html",relativePath:"08.java/04.util/03.mapstruct无法获取lombok生成的get和set方法.md",key:"v-f38b20e2",path:"/pages/807961/",headers:[{level:2,title:"mapstruct无法获取lombok生成的get和set方法",slug:"mapstruct无法获取lombok生成的get和set方法",normalizedTitle:"mapstruct无法获取lombok生成的get和set方法",charIndex:2},{level:3,title:"1.问题描述",slug:"_1-问题描述",normalizedTitle:"1.问题描述",charIndex:91},{level:3,title:"2.问题解决过程和分析",slug:"_2-问题解决过程和分析",normalizedTitle:"2.问题解决过程和分析",charIndex:2055}],headersStr:"mapstruct无法获取lombok生成的get和set方法 1.问题描述 2.问题解决过程和分析",content:"# mapstruct无法获取lombok生成的get和set方法\n\n版本：\n\njdk: 17\n\nlombok:1.18.24\n\nmapstruct:1.5.5.Final\n\n\n# 1.问题描述\n\n@Data\npublic class AccountInfo implements Serializable {\n\n    private static final long serialVersionUID = 1L;\n    \n    private String id;\n\n    private String loginName;\n\n    private String loginPassword;\n\n    private Long loginTime;\n\n    private Integer enabled;\n\n    private Integer deleted;\n\n    private Date createTime;\n\n    private String createById;\n\n    private Date updateTime;\n    \n    private String updateById;\n}\n\n\n@Data\npublic class AccountVO implements java.io.Serializable {\n\n    private static final long serialVersionUID = 1L;\n\n    private String id;\n\n    private String loginName;\n\n    private Integer enabled;\n\n    private Date createTime;\n}\n\n\n使用mapstruct将AccountInfo转为AccountVO\n\n@Mapper\npublic interface AccountMapper {\n\n    AccountMapper  mapper = Mappers.getMapper(AccountMapper.class);\n\n    AccountVO account2AccountVO(AccountInfo account);\n}\n\n\n该文件在/src/main/java/下时生成的.class文件为下方\n\npublic class AccountMapperImpl implements AccountMapper {\n    public AccountMapperImpl() {\n    }\n\n    public AccountVO account2AccountVO(AccountInfo account) {\n        if (account == null) {\n            return null;\n        } else {\n            AccountVO accountVO = new AccountVO();\n            return accountVO;\n        }\n    }\n}\n\n\n该文件在/src/test/java/下时生成的.class文件为下方\n\npublic class AccountMapperImpl implements AccountMapper {\n    public AccountMapperImpl() {\n    }\n\n    public AccountVO account2AccountVO(AccountInfo account) {\n        if (account == null) {\n            return null;\n        } else {\n            AccountVO accountVO = new AccountVO();\n            accountVO.setId(account.getId());\n            accountVO.setLoginName(account.getLoginName());\n            accountVO.setEnabled(account.getEnabled());\n            accountVO.setCreateTime(account.getCreateTime());\n            return accountVO;\n        }\n    }\n}\n\n\n发现main文件夹下生成的比起test文件夹下生成的少了accountVO.setId(account.getId());等代码\n\n我们希望main文件夹下也能生成accountVO.setId(account.getId());等代码\n\n\n# 2.问题解决过程和分析\n\n经过尝试发现当不适用lombok的@Data注解而是使用手写get和set方法时候可以正常生成accountVO.setId(account.getId());等代码\n\nlombok和都是mapstruct在编译时通过注解生成.class文件\n\n猜测是否是mapstruct在生成impl时lombok还未生成get和set方法，\n\n那为什么/src/test/java/下的有accountVO.setId(account.getId());等代码，应该是此时lombok已经处理完了此时已经可以获取到get和set方法了\n\n那有没有办法指定代码的编译顺序呢，\n\nmaven项目下做以下尝试 在模块A中写实体类，在模块B中导入A模块，在模块B中写mapstructMapper接口\n\n经过尝试，这种方法可以解决该问题impl中可以有accountVO.setId(account.getId());等代码(但是这种方法限制了实体类必须和mapstructMapper放在不同模块中)\n\n继续在网上找解决办法，终于找到解决此问题的方法\n\n原来打包插件\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-compiler-plugin</artifactId>\n                <version>3.11.0</version>\n                <configuration>\n                    <source>${java.version}</source>\n                    <target>${java.version}</target>\n                    <encoding>UTF-8</encoding>\n                </configuration>\n            </plugin>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n                <version>${spring-boot.version}</version>\n                <configuration>\n                    <excludes>\n                        <exclude>\n                            <groupId>org.projectlombok</groupId>\n                            <artifactId>lombok</artifactId>\n                        </exclude>\n                    </excludes>\n                </configuration>\n            </plugin>\n        </plugins>\n    </build>\n\n\n修改后打包插件\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-compiler-plugin</artifactId>\n                <version>3.11.0</version>\n                <configuration>\n                    <source>${java.version}</source>\n                    <target>${java.version}</target>\n                    <encoding>UTF-8</encoding>\n                    \x3c!--主要代码就在这里 --\x3e\n                    <annotationProcessorPaths>\n                        \x3c!-- Lombok 在编译时会通过这个插件生成代码 --\x3e\n                        <path>\n                            <groupId>org.projectlombok</groupId>\n                            <artifactId>lombok</artifactId>\n                            <version>1.18.24</version>\n                        </path>\n                        \x3c!-- MapStruct 在编译时会通过这个插件生成代码 --\x3e\n                        <path>\n                            <groupId>org.mapstruct</groupId>\n                            <artifactId>mapstruct-processor</artifactId>\n                            <version>${mapstruct.version}</version>\n                        </path>\n                    </annotationProcessorPaths>\n                </configuration>\n            </plugin>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n                <version>${spring-boot.version}</version>\n                <configuration>\n                    <excludes>\n                        <exclude>\n                            <groupId>org.projectlombok</groupId>\n                            <artifactId>lombok</artifactId>\n                        </exclude>\n                    </excludes>\n                </configuration>\n            </plugin>\n        </plugins>\n    </build>\n",normalizedContent:"# mapstruct无法获取lombok生成的get和set方法\n\n版本：\n\njdk: 17\n\nlombok:1.18.24\n\nmapstruct:1.5.5.final\n\n\n# 1.问题描述\n\n@data\npublic class accountinfo implements serializable {\n\n    private static final long serialversionuid = 1l;\n    \n    private string id;\n\n    private string loginname;\n\n    private string loginpassword;\n\n    private long logintime;\n\n    private integer enabled;\n\n    private integer deleted;\n\n    private date createtime;\n\n    private string createbyid;\n\n    private date updatetime;\n    \n    private string updatebyid;\n}\n\n\n@data\npublic class accountvo implements java.io.serializable {\n\n    private static final long serialversionuid = 1l;\n\n    private string id;\n\n    private string loginname;\n\n    private integer enabled;\n\n    private date createtime;\n}\n\n\n使用mapstruct将accountinfo转为accountvo\n\n@mapper\npublic interface accountmapper {\n\n    accountmapper  mapper = mappers.getmapper(accountmapper.class);\n\n    accountvo account2accountvo(accountinfo account);\n}\n\n\n该文件在/src/main/java/下时生成的.class文件为下方\n\npublic class accountmapperimpl implements accountmapper {\n    public accountmapperimpl() {\n    }\n\n    public accountvo account2accountvo(accountinfo account) {\n        if (account == null) {\n            return null;\n        } else {\n            accountvo accountvo = new accountvo();\n            return accountvo;\n        }\n    }\n}\n\n\n该文件在/src/test/java/下时生成的.class文件为下方\n\npublic class accountmapperimpl implements accountmapper {\n    public accountmapperimpl() {\n    }\n\n    public accountvo account2accountvo(accountinfo account) {\n        if (account == null) {\n            return null;\n        } else {\n            accountvo accountvo = new accountvo();\n            accountvo.setid(account.getid());\n            accountvo.setloginname(account.getloginname());\n            accountvo.setenabled(account.getenabled());\n            accountvo.setcreatetime(account.getcreatetime());\n            return accountvo;\n        }\n    }\n}\n\n\n发现main文件夹下生成的比起test文件夹下生成的少了accountvo.setid(account.getid());等代码\n\n我们希望main文件夹下也能生成accountvo.setid(account.getid());等代码\n\n\n# 2.问题解决过程和分析\n\n经过尝试发现当不适用lombok的@data注解而是使用手写get和set方法时候可以正常生成accountvo.setid(account.getid());等代码\n\nlombok和都是mapstruct在编译时通过注解生成.class文件\n\n猜测是否是mapstruct在生成impl时lombok还未生成get和set方法，\n\n那为什么/src/test/java/下的有accountvo.setid(account.getid());等代码，应该是此时lombok已经处理完了此时已经可以获取到get和set方法了\n\n那有没有办法指定代码的编译顺序呢，\n\nmaven项目下做以下尝试 在模块a中写实体类，在模块b中导入a模块，在模块b中写mapstructmapper接口\n\n经过尝试，这种方法可以解决该问题impl中可以有accountvo.setid(account.getid());等代码(但是这种方法限制了实体类必须和mapstructmapper放在不同模块中)\n\n继续在网上找解决办法，终于找到解决此问题的方法\n\n原来打包插件\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupid>org.apache.maven.plugins</groupid>\n                <artifactid>maven-compiler-plugin</artifactid>\n                <version>3.11.0</version>\n                <configuration>\n                    <source>${java.version}</source>\n                    <target>${java.version}</target>\n                    <encoding>utf-8</encoding>\n                </configuration>\n            </plugin>\n            <plugin>\n                <groupid>org.springframework.boot</groupid>\n                <artifactid>spring-boot-maven-plugin</artifactid>\n                <version>${spring-boot.version}</version>\n                <configuration>\n                    <excludes>\n                        <exclude>\n                            <groupid>org.projectlombok</groupid>\n                            <artifactid>lombok</artifactid>\n                        </exclude>\n                    </excludes>\n                </configuration>\n            </plugin>\n        </plugins>\n    </build>\n\n\n修改后打包插件\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupid>org.apache.maven.plugins</groupid>\n                <artifactid>maven-compiler-plugin</artifactid>\n                <version>3.11.0</version>\n                <configuration>\n                    <source>${java.version}</source>\n                    <target>${java.version}</target>\n                    <encoding>utf-8</encoding>\n                    \x3c!--主要代码就在这里 --\x3e\n                    <annotationprocessorpaths>\n                        \x3c!-- lombok 在编译时会通过这个插件生成代码 --\x3e\n                        <path>\n                            <groupid>org.projectlombok</groupid>\n                            <artifactid>lombok</artifactid>\n                            <version>1.18.24</version>\n                        </path>\n                        \x3c!-- mapstruct 在编译时会通过这个插件生成代码 --\x3e\n                        <path>\n                            <groupid>org.mapstruct</groupid>\n                            <artifactid>mapstruct-processor</artifactid>\n                            <version>${mapstruct.version}</version>\n                        </path>\n                    </annotationprocessorpaths>\n                </configuration>\n            </plugin>\n            <plugin>\n                <groupid>org.springframework.boot</groupid>\n                <artifactid>spring-boot-maven-plugin</artifactid>\n                <version>${spring-boot.version}</version>\n                <configuration>\n                    <excludes>\n                        <exclude>\n                            <groupid>org.projectlombok</groupid>\n                            <artifactid>lombok</artifactid>\n                        </exclude>\n                    </excludes>\n                </configuration>\n            </plugin>\n        </plugins>\n    </build>\n",charsets:{cjk:!0},lastUpdated:"2024/04/29, 11:14:33",lastUpdatedTimestamp:1714360473e3},{title:"lombok",frontmatter:{title:"lombok",date:"2024-04-28T14:28:24.000Z",permalink:"/pages/ef0371/"},regularPath:"/08.java/04.util/01.lombok.html",relativePath:"08.java/04.util/01.lombok.md",key:"v-1ad6532d",path:"/pages/ef0371/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"2024/04/29, 11:14:33",lastUpdatedTimestamp:1714360473e3},{title:"mapstruct",frontmatter:{title:"mapstruct",date:"2024-04-28T14:28:24.000Z",permalink:"/pages/b3cd0d/"},regularPath:"/08.java/04.util/02.mapstruct.html",relativePath:"08.java/04.util/02.mapstruct.md",key:"v-cf2a59ca",path:"/pages/b3cd0d/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"2024/04/29, 11:14:33",lastUpdatedTimestamp:1714360473e3},{title:"okhttp3",frontmatter:{title:"okhttp3",date:"2024-04-28T14:30:21.000Z",permalink:"/pages/be7ac1/"},regularPath:"/08.java/04.util/04.okhttp3.html",relativePath:"08.java/04.util/04.okhttp3.md",key:"v-eafc6aca",path:"/pages/be7ac1/",headers:[{level:2,title:"出现背景",slug:"出现背景",normalizedTitle:"出现背景",charIndex:217},{level:2,title:"解决思路",slug:"解决思路",normalizedTitle:"解决思路",charIndex:248},{level:2,title:"OkHttp3设计思路",slug:"okhttp3设计思路",normalizedTitle:"okhttp3设计思路",charIndex:468},{level:2,title:"2.1、引入包",slug:"_2-1、引入包",normalizedTitle:"2.1、引入包",charIndex:641},{level:2,title:"2.3、GET",slug:"_2-3、get",normalizedTitle:"2.3、get",charIndex:2118},{level:3,title:"Request",slug:"request",normalizedTitle:"request",charIndex:483},{level:3,title:"发起请求",slug:"发起请求",normalizedTitle:"发起请求",charIndex:2776},{level:3,title:"Response",slug:"response",normalizedTitle:"response",charIndex:563},{level:2,title:"2.4、POST",slug:"_2-4、post",normalizedTitle:"2.4、post",charIndex:3079},{level:3,title:"2.4.1、POST提交字符串",slug:"_2-4-1、post提交字符串",normalizedTitle:"2.4.1、post提交字符串",charIndex:3092},{level:3,title:"2.4.2、POST提交键值对",slug:"_2-4-2、post提交键值对",normalizedTitle:"2.4.2、post提交键值对",charIndex:3995},{level:3,title:"2.4.3、Post方式提交流",slug:"_2-4-3、post方式提交流",normalizedTitle:"2.4.3、post方式提交流",charIndex:4629},{level:3,title:"2.4.4、Post方式提交表单",slug:"_2-4-4、post方式提交表单",normalizedTitle:"2.4.4、post方式提交表单",charIndex:6019},{level:3,title:"2.4.5、Post方式提交分块请求，可以上传文件",slug:"_2-4-5、post方式提交分块请求-可以上传文件",normalizedTitle:"2.4.5、post方式提交分块请求，可以上传文件",charIndex:6663},{level:2,title:"2.5、HTTP头部的设置和读取",slug:"_2-5、http头部的设置和读取",normalizedTitle:"2.5、http头部的设置和读取",charIndex:7898},{level:2,title:"2.6、同步和异步",slug:"_2-6、同步和异步",normalizedTitle:"2.6、同步和异步",charIndex:8727},{level:3,title:"Synchronous Get（同步Get）",slug:"synchronous-get-同步get",normalizedTitle:"synchronous get（同步get）",charIndex:8741},{level:3,title:"Asynchronous Get（异步Get）",slug:"asynchronous-get-异步get",normalizedTitle:"asynchronous get（异步get）",charIndex:9539}],headersStr:"出现背景 解决思路 OkHttp3设计思路 2.1、引入包 2.3、GET Request 发起请求 Response 2.4、POST 2.4.1、POST提交字符串 2.4.2、POST提交键值对 2.4.3、Post方式提交流 2.4.4、Post方式提交表单 2.4.5、Post方式提交分块请求，可以上传文件 2.5、HTTP头部的设置和读取 2.6、同步和异步 Synchronous Get（同步Get） Asynchronous Get（异步Get）",content:'# 基本使用——OkHttp3详细使用教程\n\n\n# 概述\n\nOkHttp现在应该算是最火的Http第三方库，Retrofit底层也是使用OkHttp，网上很多教程都写的不错，但是有些我认为重要的知识，大多一笔带过，所以我决定写一篇入门文章\n\nOkHttp官网地址：http://square.github.io/okhttp/ OkHttp GitHub地址：https://github.com/square/okhttp\n\n\n# 出现背景\n\n网络访问的高效性要求，可以说是为高效而生\n\n\n# 解决思路\n\n 1. 提供了对 HTTP/2 和 SPDY 的支持，这使得对同一个主机发出的所有请求都可以共享相同的套接字连接\n 2. 如果 HTTP/2 和 SPDY 不可用，OkHttp 会使用连接池来复用连接以提高效率\n 3. 提供了对 GZIP 的默认支持来降低传输内容的大小\n 4. 提供了对 HTTP 响应的缓存机制，可以避免不必要的网络请求\n 5. 当网络出现问题时，OkHttp 会自动重试一个主机的多个 IP 地址\n\n\n# OkHttp3设计思路\n\n\n\nRequests（请求）\n\n每一个HTTP请求中都应该包含一个URL，一个GET或POST方法以及Header或其他参数，当然还可以含特定内容类型的数据流。\n\nResponses（响应）\n\n响应则包含一个回复代码（200代表成功，404代表未找到），Header和定制可选的body。\n\n\n# 二、使用教程\n\n\n# 2.1、引入包\n\n<dependency>\n\t<groupId>com.squareup.okhttp3</groupId>\n\t<artifactId>okhttp</artifactId>\n\t<version>4.12.0</version>\n</dependency>\n\n\n * 1\n\n\n# 2.2、创建OkHttpClient实例\n\n简单来说，通过OkHttpClient可以发送一个Http请求，并读取该Http请求的响应，它是一个生产Call的工厂。 此外，受益于一个共享的响应缓存/线程池/复用的连接等因素，绝大多数应用使用一个OkHttpClient实例，便可以满足整个应用的Http请求。\n\n三种创建实例的方法：\n\n * 创建一个默认配置OkHttpClient，可以使用默认的构造函数。\n * 通过new OkHttpClient.Builder()方法来一步一步配置一个OkHttpClient实例。\n * 如果要求使用现有的实例，可以通过newBuilder()方法来进行构造。\n\nOkHttpClient client = new OkHttpClient();\n\nOkHttpClient client1 = new OkHttpClient.Builder().build();\n\nOkHttpClient client2 = client.newBuilder().build();\n\n\n * \n\n看一下OkHttpClient的源码，会发现缓存/代理等等需求，一应俱全的按照类封装到了Builder中。\n\nDispatcher dispatcher;          // 分发\nProxy proxy;                    // 代理\nList<Protocol> protocols;\nList<ConnectionSpec> connectionSpecs;\nfinal List<Interceptor> interceptors = new ArrayList<>(); // 拦截器\nfinal List<Interceptor> networkInterceptors = new ArrayList<>(); // 网络拦截器\nProxySelector proxySelector;\nCookieJar cookieJar;\nCache cache;    // 缓存\nInternalCache internalCache;\nSocketFactory socketFactory;\nSSLSocketFactory sslSocketFactory;\nHostnameVerifier hostnameVerifier;\nCertificatePinner certificatePinner;\nAuthenticator proxyAuthenticator;   // 代理证书\nAuthenticator authenticator;        // 证书\nConnectionPool connectionPool;\nDns dns;        // DNS\nboolean followSslRedirects;\nboolean followRedirects;\nboolean retryOnConnectionFailure;\nint connectTimeout;\nint readTimeout;\nint writeTimeout;\n\n\n * \n\n\n# 2.3、GET\n\nOkHttpClient client = new OkHttpClient();\n\nString run(String url) throws IOException {\n  Request request = new Request.Builder()\n      .url(url)\n      .build();\n\n  Response response = client.newCall(request).execute();\n  return response.body().string();\n}\n\n\n * \n\n\n# Request\n\n简单看一下Request类，可以发现它代表一个Http请求，需要注意的是Request一旦build()之后，便不可修改。\n\n主要通过new Request.Builder()来一步一步构造的。看一下Builder的代码。\n\npublic Builder() {\n  this.method = "GET";\n  this.headers = new Headers.Builder();\n}\n\n\n * \n\n默认是Get方法， 此外还创建了头信息。Headers类中是通过List<String> namesAndValues = new ArrayList<>(20)，来存放头信息的，一开始我也很纳闷，头信息都是一对一对的为什么要用List，看一下源码发现，在存取的时候都是将索引+2或者-2。并且头信息可以存在多个相同的Key信息。\n\n\n# 发起请求\n\n跟到newCall()方法中发现，又使用OkHttpClient实例和Request的实例，一起构造了一个RealCall的实例。\n\nRealCall类简单做了一个托管并通过Dispather类对请求进行分发和执行，实际开启线程发起请求的方法就在这个类中。\n\n随后又调用execute()方法，拿到了一个响应。这个execute()方法，实际上执行的就是RealCall中的execute()方法，最后调用了Dispatcher的execute()方法。\n\n\n# Response\n\nResponse代表一个Http的响应，这个类的实例不可修改。\n\n一个简单的Get请求和说明就结束了\n\n\n# 2.4、POST\n\n\n# 2.4.1、POST提交字符串\n\npublic static final MediaType JSON\n    = MediaType.parse("application/json; charset=utf-8");\n\nOkHttpClient client = new OkHttpClient();\n\nString post(String url, String json) throws IOException {\n  RequestBody body = RequestBody.create(JSON, json);\n  Request request = new Request.Builder()\n      .url(url)\n      .post(body)\n      .build();\n  Response response = client.newCall(request).execute();\n  return response.body().string();\n}\n\n\n * \n\nMediaType用于描述Http请求和响应体的内容类型，也就是Content-Type。\n\n一次请求就是向目标服务器发送一串文本。什么样的文本？有下面结构的文本。 HTTP请求包结构\n\n\n\n例子：\n\nPOST /meme.php/home/user/login HTTP/1.1\nHost: 114.215.86.90\nCache-Control: no-cache\nPostman-Token: bd243d6b-da03-902f-0a2c-8e9377f6f6ed\nContent-Type: application/x-www-form-urlencoded\n\ntel=13637829200&password=123456\n\n\n * \n\n例如，MediaType.parse(“application/json; charset=utf-8”);这个就带表请求体的类型为JSON格式的。\n\n定义好数据类型，还要将其变为请求体，最后通过post()方法，随请求一并发出。\n\n\n# 2.4.2、POST提交键值对\n\nOkHttp也可以通过POST方式把键值对数据传送到服务器\n\nOkHttpClient client = new OkHttpClient();\nString post(String url, String json) throws IOException {\n    RequestBody formBody = new FormEncodingBuilder()\n    .add("platform", "android")\n    .add("name", "bug")\n    .add("subject", "XXXXXXXXXXXXXXX")\n    .build();\n\n    Request request = new Request.Builder()\n      .url(url)\n      .post(body)\n      .build();\n\n    Response response = client.newCall(request).execute();\n    if (response.isSuccessful()) {\n        return response.body().string();\n    } else {\n        throw new IOException("Unexpected code " + response);\n    }\n}\n\n\n * \n\n\n# 2.4.3、Post方式提交流\n\n以流的方式POST提交请求体。请求体的内容由流写入产生。这个例子是流直接写入Okio的BufferedSink。你的程序可能会使用OutputStream，你可以使用BufferedSink.outputStream()来获取。.\n\npublic static final MediaType MEDIA_TYPE_MARKDOWN\n      = MediaType.parse("text/x-markdown; charset=utf-8");\n\n  private final OkHttpClient client = new OkHttpClient();\n\n  public void run() throws Exception {\n    RequestBody requestBody = new RequestBody() {\n      @Override public MediaType contentType() {\n        return MEDIA_TYPE_MARKDOWN;\n      }\n\n      @Override public void writeTo(BufferedSink sink) throws IOException {\n        sink.writeUtf8("Numbers\\n");\n        sink.writeUtf8("-------\\n");\n        for (int i = 2; i <= 997; i++) {\n          sink.writeUtf8(String.format(" * %s = %s\\n", i, factor(i)));\n        }\n      }\n\n      private String factor(int n) {\n        for (int i = 2; i < n; i++) {\n          int x = n / i;\n          if (x * i == n) return factor(x) + " × " + i;\n        }\n        return Integer.toString(n);\n      }\n    };\n\n    Request request = new Request.Builder()\n        .url("https://api.github.com/markdown/raw")\n        .post(requestBody)\n        .build();\n\n    Response response = client.newCall(request).execute();\n    if (!response.isSuccessful()) throw new IOException("Unexpected code " + response);\n\n    System.out.println(response.body().string());\n  }\n\n\n * \n\n重写RequestBody中的几个方法，将本地数据放入到Http协议的请求体中，然后发送到服务端。\n\n\n# 2.4.4、Post方式提交表单\n\n使用FormEncodingBuilder来构建和HTML标签相同效果的请求体。键值对将使用一种HTML兼容形式的URL编码来进行编码。\n\nprivate final OkHttpClient client = new OkHttpClient();\n\n  public void run() throws Exception {\n    RequestBody formBody = new FormBody.Builder()\n        .add("search", "Jurassic Park")\n        .build();\n    Request request = new Request.Builder()\n        .url("https://en.wikipedia.org/w/index.php")\n        .post(formBody)\n        .build();\n\n    Response response = client.newCall(request).execute();\n    if (!response.isSuccessful()) throw new IOException("Unexpected code " + response);\n\n    System.out.println(response.body().string());\n  }\n\n\n * \n\n\n# 2.4.5、Post方式提交分块请求，可以上传文件\n\nMultipartBuilder可以构建复杂的请求体，与HTML文件上传形式兼容。\n\n多块请求体中每块请求都是一个请求体，可以定义自己的请求头。这些请求头可以用来描述这块请求，例如他的Content-Disposition。如果Content-Length和Content-Type可用的话，他们会被自动添加到请求头中。\n\nprivate static final String IMGUR_CLIENT_ID = "...";\n  private static final MediaType MEDIA_TYPE_PNG = MediaType.parse("image/png");\n\n  private final OkHttpClient client = new OkHttpClient();\n\n  public void run() throws Exception {\n    // Use the imgur image upload API as documented at https://api.imgur.com/endpoints/image\n    RequestBody requestBody = new MultipartBody.Builder()\n        .setType(MultipartBody.FORM)\n        .addFormDataPart("title", "Square Logo")\n        .addFormDataPart("image", "logo-square.png",\n            RequestBody.create(MEDIA_TYPE_PNG, new File("website/static/logo-square.png")))\n        .build();\n\n    Request request = new Request.Builder()\n        .header("Authorization", "Client-ID " + IMGUR_CLIENT_ID)\n        .url("https://api.imgur.com/3/image")\n        .post(requestBody)\n        .build();\n\n    Response response = client.newCall(request).execute();\n    if (!response.isSuccessful()) throw new IOException("Unexpected code " + response);\n\n    System.out.println(response.body().string());\n  }\n\n\n * \n\n\n# 2.5、HTTP头部的设置和读取\n\nHTTP 头的数据结构是 Map<String, List<String>>类型。也就是说，对于每个 HTTP 头，可能有多个值。但是大部分 HTTP 头都只有一个值，只有少部分 HTTP 头允许多个值。\n\nOkHttp的处理方式是：\n\n * 使用header(name,value)来设置HTTP头的唯一值，如果请求中已经存在响应的信息那么直接替换掉。\n * 使用addHeader(name,value)来补充新值，如果请求头中已经存在name的name-value，那么还会继续添加，请求头中便会存在多个name相同而value不同的“键值对”。\n * 使用header(name)读取唯一值或多个值的最后一个值\n * 使用headers(name)获取所有值\n\nOkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n        .url("https://github.com")\n        .header("User-Agent", "My super agent")\n        .addHeader("Accept", "text/html")\n        .build();\n\nResponse response = client.newCall(request).execute();\nif (!response.isSuccessful()) {\n    throw new IOException("服务器端错误: " + response);\n}\n\nSystem.out.println(response.header("Server"));\nSystem.out.println(response.headers("Set-Cookie"));\n\n\n * \n\n\n# 2.6、同步和异步\n\n\n# Synchronous Get（同步Get）\n\n下载一个文件，打印他的响应头，以string形式打印响应体。\n\n响应体的 string() 方法对于小文档来说十分方便、高效。但是如果响应体太大（超过1MB），应避免适应 string()方法 ，因为他会将把整个文档加载到内存中。对于超过1MB的响应body，应使用流的方式来处理body。\n\nprivate final OkHttpClient client = new OkHttpClient();\n\n  public void run() throws Exception {\n    Request request = new Request.Builder()\n        .url("http://publicobject.com/helloworld.txt")\n        .build();\n\n    Response response = client.newCall(request).execute();//同步\n    if (!response.isSuccessful()) throw new IOException("Unexpected code " + response);\n\n    Headers responseHeaders = response.headers();\n    for (int i = 0; i < responseHeaders.size(); i++) {\n      System.out.println(responseHeaders.name(i) + ": " + responseHeaders.value(i));\n    }\n\n    System.out.println(response.body().string());\n  }\n\n\n * \n\n\n# Asynchronous Get（异步Get）\n\n在一个工作线程中下载文件，当响应可读时回调Callback接口。读取响应时会阻塞当前线程。OkHttp现阶段不提供异步api来接收响应体。\n\nprivate final OkHttpClient client = new OkHttpClient();\n\n  public void run() throws Exception {\n    Request request = new Request.Builder()\n        .url("http://publicobject.com/helloworld.txt")\n        .build();\n\n    //异步，需要设置一个回调接口\n    client.newCall(request).enqueue(new Callback() {\n      @Override public void onFailure(Call call, IOException e) {\n        e.printStackTrace();\n      }\n\n      @Override public void onResponse(Call call, Response response) throws IOException {\n        if (!response.isSuccessful()) throw new IOException("Unexpected code " + response);\n\n        Headers responseHeaders = response.headers();\n        for (int i = 0, size = responseHeaders.size(); i < size; i++) {\n          System.out.println(responseHeaders.name(i) + ": " + responseHeaders.value(i));\n        }\n\n        System.out.println(response.body().string());\n      }\n    });\n  }\n',normalizedContent:'# 基本使用——okhttp3详细使用教程\n\n\n# 概述\n\nokhttp现在应该算是最火的http第三方库，retrofit底层也是使用okhttp，网上很多教程都写的不错，但是有些我认为重要的知识，大多一笔带过，所以我决定写一篇入门文章\n\nokhttp官网地址：http://square.github.io/okhttp/ okhttp github地址：https://github.com/square/okhttp\n\n\n# 出现背景\n\n网络访问的高效性要求，可以说是为高效而生\n\n\n# 解决思路\n\n 1. 提供了对 http/2 和 spdy 的支持，这使得对同一个主机发出的所有请求都可以共享相同的套接字连接\n 2. 如果 http/2 和 spdy 不可用，okhttp 会使用连接池来复用连接以提高效率\n 3. 提供了对 gzip 的默认支持来降低传输内容的大小\n 4. 提供了对 http 响应的缓存机制，可以避免不必要的网络请求\n 5. 当网络出现问题时，okhttp 会自动重试一个主机的多个 ip 地址\n\n\n# okhttp3设计思路\n\n\n\nrequests（请求）\n\n每一个http请求中都应该包含一个url，一个get或post方法以及header或其他参数，当然还可以含特定内容类型的数据流。\n\nresponses（响应）\n\n响应则包含一个回复代码（200代表成功，404代表未找到），header和定制可选的body。\n\n\n# 二、使用教程\n\n\n# 2.1、引入包\n\n<dependency>\n\t<groupid>com.squareup.okhttp3</groupid>\n\t<artifactid>okhttp</artifactid>\n\t<version>4.12.0</version>\n</dependency>\n\n\n * 1\n\n\n# 2.2、创建okhttpclient实例\n\n简单来说，通过okhttpclient可以发送一个http请求，并读取该http请求的响应，它是一个生产call的工厂。 此外，受益于一个共享的响应缓存/线程池/复用的连接等因素，绝大多数应用使用一个okhttpclient实例，便可以满足整个应用的http请求。\n\n三种创建实例的方法：\n\n * 创建一个默认配置okhttpclient，可以使用默认的构造函数。\n * 通过new okhttpclient.builder()方法来一步一步配置一个okhttpclient实例。\n * 如果要求使用现有的实例，可以通过newbuilder()方法来进行构造。\n\nokhttpclient client = new okhttpclient();\n\nokhttpclient client1 = new okhttpclient.builder().build();\n\nokhttpclient client2 = client.newbuilder().build();\n\n\n * \n\n看一下okhttpclient的源码，会发现缓存/代理等等需求，一应俱全的按照类封装到了builder中。\n\ndispatcher dispatcher;          // 分发\nproxy proxy;                    // 代理\nlist<protocol> protocols;\nlist<connectionspec> connectionspecs;\nfinal list<interceptor> interceptors = new arraylist<>(); // 拦截器\nfinal list<interceptor> networkinterceptors = new arraylist<>(); // 网络拦截器\nproxyselector proxyselector;\ncookiejar cookiejar;\ncache cache;    // 缓存\ninternalcache internalcache;\nsocketfactory socketfactory;\nsslsocketfactory sslsocketfactory;\nhostnameverifier hostnameverifier;\ncertificatepinner certificatepinner;\nauthenticator proxyauthenticator;   // 代理证书\nauthenticator authenticator;        // 证书\nconnectionpool connectionpool;\ndns dns;        // dns\nboolean followsslredirects;\nboolean followredirects;\nboolean retryonconnectionfailure;\nint connecttimeout;\nint readtimeout;\nint writetimeout;\n\n\n * \n\n\n# 2.3、get\n\nokhttpclient client = new okhttpclient();\n\nstring run(string url) throws ioexception {\n  request request = new request.builder()\n      .url(url)\n      .build();\n\n  response response = client.newcall(request).execute();\n  return response.body().string();\n}\n\n\n * \n\n\n# request\n\n简单看一下request类，可以发现它代表一个http请求，需要注意的是request一旦build()之后，便不可修改。\n\n主要通过new request.builder()来一步一步构造的。看一下builder的代码。\n\npublic builder() {\n  this.method = "get";\n  this.headers = new headers.builder();\n}\n\n\n * \n\n默认是get方法， 此外还创建了头信息。headers类中是通过list<string> namesandvalues = new arraylist<>(20)，来存放头信息的，一开始我也很纳闷，头信息都是一对一对的为什么要用list，看一下源码发现，在存取的时候都是将索引+2或者-2。并且头信息可以存在多个相同的key信息。\n\n\n# 发起请求\n\n跟到newcall()方法中发现，又使用okhttpclient实例和request的实例，一起构造了一个realcall的实例。\n\nrealcall类简单做了一个托管并通过dispather类对请求进行分发和执行，实际开启线程发起请求的方法就在这个类中。\n\n随后又调用execute()方法，拿到了一个响应。这个execute()方法，实际上执行的就是realcall中的execute()方法，最后调用了dispatcher的execute()方法。\n\n\n# response\n\nresponse代表一个http的响应，这个类的实例不可修改。\n\n一个简单的get请求和说明就结束了\n\n\n# 2.4、post\n\n\n# 2.4.1、post提交字符串\n\npublic static final mediatype json\n    = mediatype.parse("application/json; charset=utf-8");\n\nokhttpclient client = new okhttpclient();\n\nstring post(string url, string json) throws ioexception {\n  requestbody body = requestbody.create(json, json);\n  request request = new request.builder()\n      .url(url)\n      .post(body)\n      .build();\n  response response = client.newcall(request).execute();\n  return response.body().string();\n}\n\n\n * \n\nmediatype用于描述http请求和响应体的内容类型，也就是content-type。\n\n一次请求就是向目标服务器发送一串文本。什么样的文本？有下面结构的文本。 http请求包结构\n\n\n\n例子：\n\npost /meme.php/home/user/login http/1.1\nhost: 114.215.86.90\ncache-control: no-cache\npostman-token: bd243d6b-da03-902f-0a2c-8e9377f6f6ed\ncontent-type: application/x-www-form-urlencoded\n\ntel=13637829200&password=123456\n\n\n * \n\n例如，mediatype.parse(“application/json; charset=utf-8”);这个就带表请求体的类型为json格式的。\n\n定义好数据类型，还要将其变为请求体，最后通过post()方法，随请求一并发出。\n\n\n# 2.4.2、post提交键值对\n\nokhttp也可以通过post方式把键值对数据传送到服务器\n\nokhttpclient client = new okhttpclient();\nstring post(string url, string json) throws ioexception {\n    requestbody formbody = new formencodingbuilder()\n    .add("platform", "android")\n    .add("name", "bug")\n    .add("subject", "xxxxxxxxxxxxxxx")\n    .build();\n\n    request request = new request.builder()\n      .url(url)\n      .post(body)\n      .build();\n\n    response response = client.newcall(request).execute();\n    if (response.issuccessful()) {\n        return response.body().string();\n    } else {\n        throw new ioexception("unexpected code " + response);\n    }\n}\n\n\n * \n\n\n# 2.4.3、post方式提交流\n\n以流的方式post提交请求体。请求体的内容由流写入产生。这个例子是流直接写入okio的bufferedsink。你的程序可能会使用outputstream，你可以使用bufferedsink.outputstream()来获取。.\n\npublic static final mediatype media_type_markdown\n      = mediatype.parse("text/x-markdown; charset=utf-8");\n\n  private final okhttpclient client = new okhttpclient();\n\n  public void run() throws exception {\n    requestbody requestbody = new requestbody() {\n      @override public mediatype contenttype() {\n        return media_type_markdown;\n      }\n\n      @override public void writeto(bufferedsink sink) throws ioexception {\n        sink.writeutf8("numbers\\n");\n        sink.writeutf8("-------\\n");\n        for (int i = 2; i <= 997; i++) {\n          sink.writeutf8(string.format(" * %s = %s\\n", i, factor(i)));\n        }\n      }\n\n      private string factor(int n) {\n        for (int i = 2; i < n; i++) {\n          int x = n / i;\n          if (x * i == n) return factor(x) + " × " + i;\n        }\n        return integer.tostring(n);\n      }\n    };\n\n    request request = new request.builder()\n        .url("https://api.github.com/markdown/raw")\n        .post(requestbody)\n        .build();\n\n    response response = client.newcall(request).execute();\n    if (!response.issuccessful()) throw new ioexception("unexpected code " + response);\n\n    system.out.println(response.body().string());\n  }\n\n\n * \n\n重写requestbody中的几个方法，将本地数据放入到http协议的请求体中，然后发送到服务端。\n\n\n# 2.4.4、post方式提交表单\n\n使用formencodingbuilder来构建和html标签相同效果的请求体。键值对将使用一种html兼容形式的url编码来进行编码。\n\nprivate final okhttpclient client = new okhttpclient();\n\n  public void run() throws exception {\n    requestbody formbody = new formbody.builder()\n        .add("search", "jurassic park")\n        .build();\n    request request = new request.builder()\n        .url("https://en.wikipedia.org/w/index.php")\n        .post(formbody)\n        .build();\n\n    response response = client.newcall(request).execute();\n    if (!response.issuccessful()) throw new ioexception("unexpected code " + response);\n\n    system.out.println(response.body().string());\n  }\n\n\n * \n\n\n# 2.4.5、post方式提交分块请求，可以上传文件\n\nmultipartbuilder可以构建复杂的请求体，与html文件上传形式兼容。\n\n多块请求体中每块请求都是一个请求体，可以定义自己的请求头。这些请求头可以用来描述这块请求，例如他的content-disposition。如果content-length和content-type可用的话，他们会被自动添加到请求头中。\n\nprivate static final string imgur_client_id = "...";\n  private static final mediatype media_type_png = mediatype.parse("image/png");\n\n  private final okhttpclient client = new okhttpclient();\n\n  public void run() throws exception {\n    // use the imgur image upload api as documented at https://api.imgur.com/endpoints/image\n    requestbody requestbody = new multipartbody.builder()\n        .settype(multipartbody.form)\n        .addformdatapart("title", "square logo")\n        .addformdatapart("image", "logo-square.png",\n            requestbody.create(media_type_png, new file("website/static/logo-square.png")))\n        .build();\n\n    request request = new request.builder()\n        .header("authorization", "client-id " + imgur_client_id)\n        .url("https://api.imgur.com/3/image")\n        .post(requestbody)\n        .build();\n\n    response response = client.newcall(request).execute();\n    if (!response.issuccessful()) throw new ioexception("unexpected code " + response);\n\n    system.out.println(response.body().string());\n  }\n\n\n * \n\n\n# 2.5、http头部的设置和读取\n\nhttp 头的数据结构是 map<string, list<string>>类型。也就是说，对于每个 http 头，可能有多个值。但是大部分 http 头都只有一个值，只有少部分 http 头允许多个值。\n\nokhttp的处理方式是：\n\n * 使用header(name,value)来设置http头的唯一值，如果请求中已经存在响应的信息那么直接替换掉。\n * 使用addheader(name,value)来补充新值，如果请求头中已经存在name的name-value，那么还会继续添加，请求头中便会存在多个name相同而value不同的“键值对”。\n * 使用header(name)读取唯一值或多个值的最后一个值\n * 使用headers(name)获取所有值\n\nokhttpclient client = new okhttpclient();\n\nrequest request = new request.builder()\n        .url("https://github.com")\n        .header("user-agent", "my super agent")\n        .addheader("accept", "text/html")\n        .build();\n\nresponse response = client.newcall(request).execute();\nif (!response.issuccessful()) {\n    throw new ioexception("服务器端错误: " + response);\n}\n\nsystem.out.println(response.header("server"));\nsystem.out.println(response.headers("set-cookie"));\n\n\n * \n\n\n# 2.6、同步和异步\n\n\n# synchronous get（同步get）\n\n下载一个文件，打印他的响应头，以string形式打印响应体。\n\n响应体的 string() 方法对于小文档来说十分方便、高效。但是如果响应体太大（超过1mb），应避免适应 string()方法 ，因为他会将把整个文档加载到内存中。对于超过1mb的响应body，应使用流的方式来处理body。\n\nprivate final okhttpclient client = new okhttpclient();\n\n  public void run() throws exception {\n    request request = new request.builder()\n        .url("http://publicobject.com/helloworld.txt")\n        .build();\n\n    response response = client.newcall(request).execute();//同步\n    if (!response.issuccessful()) throw new ioexception("unexpected code " + response);\n\n    headers responseheaders = response.headers();\n    for (int i = 0; i < responseheaders.size(); i++) {\n      system.out.println(responseheaders.name(i) + ": " + responseheaders.value(i));\n    }\n\n    system.out.println(response.body().string());\n  }\n\n\n * \n\n\n# asynchronous get（异步get）\n\n在一个工作线程中下载文件，当响应可读时回调callback接口。读取响应时会阻塞当前线程。okhttp现阶段不提供异步api来接收响应体。\n\nprivate final okhttpclient client = new okhttpclient();\n\n  public void run() throws exception {\n    request request = new request.builder()\n        .url("http://publicobject.com/helloworld.txt")\n        .build();\n\n    //异步，需要设置一个回调接口\n    client.newcall(request).enqueue(new callback() {\n      @override public void onfailure(call call, ioexception e) {\n        e.printstacktrace();\n      }\n\n      @override public void onresponse(call call, response response) throws ioexception {\n        if (!response.issuccessful()) throw new ioexception("unexpected code " + response);\n\n        headers responseheaders = response.headers();\n        for (int i = 0, size = responseheaders.size(); i < size; i++) {\n          system.out.println(responseheaders.name(i) + ": " + responseheaders.value(i));\n        }\n\n        system.out.println(response.body().string());\n      }\n    });\n  }\n',charsets:{cjk:!0},lastUpdated:"2024/04/29, 11:14:33",lastUpdatedTimestamp:1714360473e3},{title:"博客文章",frontmatter:{archivesPage:!0,title:"博客文章",permalink:"/blog/",article:!1},regularPath:"/@pages/archivesPage.html",relativePath:"@pages/archivesPage.md",key:"v-0cc3d734",path:"/blog/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"2024/04/29, 11:14:33",lastUpdatedTimestamp:1714360473e3},{title:"Home",frontmatter:{home:!0,heroImage:"/img/logo.png",heroText:"vuepress-theme-vdoing",tagline:"🚀一款简洁高效的VuePress 知识管理&博客 主题",actionText:"开始使用 →",actionLink:"/pages/f25df1/",bannerBg:"none",features:[{title:"知识管理",details:"包含三种典型的知识管理形态：结构化、碎片化、体系化。轻松打造属于你自己的知识管理平台"},{title:"简洁高效",details:"以 Markdown 为中心的项目结构，内置自动化工具，以更少的配置完成更多的事。配合多维索引快速定位每个知识点"},{title:"沉浸式阅读",details:"专为阅读设计的UI，配合多种颜色模式、可关闭的侧边栏和导航栏，带给你一种沉浸式阅读体验"}],postList:"none"},regularPath:"/",relativePath:"index.md",key:"v-69114fa0",path:"/",headers:[{level:2,title:"🎖特别用户",slug:"🎖特别用户",normalizedTitle:"🎖特别用户",charIndex:36},{level:2,title:"🎉上新推荐",slug:"🎉上新推荐",normalizedTitle:"🎉上新推荐",charIndex:604},{level:2,title:"⚡ 反馈与交流",slug:"⚡-反馈与交流",normalizedTitle:"⚡ 反馈与交流",charIndex:1202}],headersStr:"🎖特别用户 🎉上新推荐 ⚡ 反馈与交流",content:"支持这个项目\n\n\n\n\n\n赞助商 (进入注册为主题作者充电)\n\n\n\n\n# 🎖特别用户\n\nMyBatis-Plus官网\n\n🚀为简化开发而生\n\n# - name: OpenHarmony\n#   desc: 开放原子开源基金会\n#   link: https://docs.openharmony.cn/pages/000000/\n#   bgColor: '#f1f1f1'\n#   textColor: '#2A3344'\n- name: MyBatis-Plus官网\n  desc: 🚀为简化开发而生\n  link: https://baomidou.com/\n  bgColor: '#f1f1f1'\n  textColor: '#2A3344'\n# - name: Deepin 社区\n#   desc: Deepin 应用开发技术分享、DTK开发经验等\n#   link: https://docs.deepin.org\n#   bgColor: '#f1f1f1'\n#   textColor: '#2A3344'\n# - name: VForm官网\n#   desc: 低代码表单优选方案，拖拽式设计，一键生成源码\n#   link: http://www.vform666.com\n#   bgColor: '#f1f1f1'\n#   textColor: '#2A3344'\n\n\n\n\n# 🎉上新推荐\n\n * v1.12.x\n   * 新增配置项pageStyle，用于切换页面的风格样式，可选卡片、 线条风格。详情\n   * 新增配置项bodyBgImgInterval，用于在设置了多张背景大图时修改大图切换的时间间隔。详情\n   * 新增配置项defaultMode，用于修改默认外观模式(v1.12.3)。详情\n * v1.11.x：新增配置项extendFrontmatter，用于扩展自动生成front matter。详情\n * v1.10.x：新增右侧目录栏对h2~h6标题的适配，并优化了UI，详情。\n * v1.9.x：新增配置文件对TypeScript的支持，参考config.ts。新增标题标记。\n * v1.8.x：新增 Markdown中使用的组件：代码块选项卡 。\n * v1.7.x：新增 自定义html模块 配置，可用于插入广告模块。\n * v1.6.x：支持四级目录，提高站点结构可塑性。\n * v1.5.x：新增笔记容器，轻松插入笔记框。\n * v1.4.x：新增了文章内容区块的 背景底纹配置，让你的文章看起来像笔记本的风格~\n * v1.2.x：这个版本对整体的UI细节做了很多优化，比如标签栏和分类栏等\n * v1.1.x：从这个版本开始主题新增超好用、高颜值的Markdown容器，快去 体验 吧~\n\n更多上新请查阅：更新日志\n\n\n\n\n# ⚡ 反馈与交流\n\n在使用过程中有任何问题和想法，请给我提 Issue。 你也可以在Issue查看别人提的问题和给出解决方案。\n\n或者加入我们的交流群：\n\nvdoing微信群(添加我微信备注\"进群\")   vdoing QQ群: 694387113\n\n",normalizedContent:"支持这个项目\n\n\n\n\n\n赞助商 (进入注册为主题作者充电)\n\n\n\n\n# 🎖特别用户\n\nmybatis-plus官网\n\n🚀为简化开发而生\n\n# - name: openharmony\n#   desc: 开放原子开源基金会\n#   link: https://docs.openharmony.cn/pages/000000/\n#   bgcolor: '#f1f1f1'\n#   textcolor: '#2a3344'\n- name: mybatis-plus官网\n  desc: 🚀为简化开发而生\n  link: https://baomidou.com/\n  bgcolor: '#f1f1f1'\n  textcolor: '#2a3344'\n# - name: deepin 社区\n#   desc: deepin 应用开发技术分享、dtk开发经验等\n#   link: https://docs.deepin.org\n#   bgcolor: '#f1f1f1'\n#   textcolor: '#2a3344'\n# - name: vform官网\n#   desc: 低代码表单优选方案，拖拽式设计，一键生成源码\n#   link: http://www.vform666.com\n#   bgcolor: '#f1f1f1'\n#   textcolor: '#2a3344'\n\n\n\n\n# 🎉上新推荐\n\n * v1.12.x\n   * 新增配置项pagestyle，用于切换页面的风格样式，可选卡片、 线条风格。详情\n   * 新增配置项bodybgimginterval，用于在设置了多张背景大图时修改大图切换的时间间隔。详情\n   * 新增配置项defaultmode，用于修改默认外观模式(v1.12.3)。详情\n * v1.11.x：新增配置项extendfrontmatter，用于扩展自动生成front matter。详情\n * v1.10.x：新增右侧目录栏对h2~h6标题的适配，并优化了ui，详情。\n * v1.9.x：新增配置文件对typescript的支持，参考config.ts。新增标题标记。\n * v1.8.x：新增 markdown中使用的组件：代码块选项卡 。\n * v1.7.x：新增 自定义html模块 配置，可用于插入广告模块。\n * v1.6.x：支持四级目录，提高站点结构可塑性。\n * v1.5.x：新增笔记容器，轻松插入笔记框。\n * v1.4.x：新增了文章内容区块的 背景底纹配置，让你的文章看起来像笔记本的风格~\n * v1.2.x：这个版本对整体的ui细节做了很多优化，比如标签栏和分类栏等\n * v1.1.x：从这个版本开始主题新增超好用、高颜值的markdown容器，快去 体验 吧~\n\n更多上新请查阅：更新日志\n\n\n\n\n# ⚡ 反馈与交流\n\n在使用过程中有任何问题和想法，请给我提 issue。 你也可以在issue查看别人提的问题和给出解决方案。\n\n或者加入我们的交流群：\n\nvdoing微信群(添加我微信备注\"进群\")   vdoing qq群: 694387113\n\n",charsets:{cjk:!0},lastUpdated:"2024/04/29, 11:14:33",lastUpdatedTimestamp:1714360473e3},{title:"nginx请求超时问题",frontmatter:{title:"nginx请求超时问题",date:"2024-04-28T14:19:16.000Z",permalink:"/pages/04cd7d/"},regularPath:"/07.nginx/01.nginx/07.nginx%E8%AF%B7%E6%B1%82%E8%B6%85%E6%97%B6%E9%97%AE%E9%A2%98.html",relativePath:"07.nginx/01.nginx/07.nginx请求超时问题.md",key:"v-51d5b4ef",path:"/pages/04cd7d/",headersStr:null,content:"    location / {\n    \n\t     proxy_read_timeout 150;  # 就是这个\n\t     proxy_pass  http://172.24.217.96:8801/;\n\t     proxy_set_header Host $host;\n        #index  index.html index.htm;\n    }\n\n\n\n# nginx中的超时设置，请求超时、响应等待超时等\n\n\n# nginx timeout 配置 全局timeout 局部timeout web timeout\n\nnginx比较强大,可以针对单个域名请求做出单个连接超时的配置.\n\n比如些动态解释和静态解释可以根据业务的需求配置\n\n**proxy_connect_timeout 😗*后端服务器连接的超时时间_发起握手等候响应超时时间\n\n**proxy_read_timeout:**连接成功后_等候后端服务器响应时间_其实已经进入后端的排队之中等候处理（也可以说是后端服务器处理请求的时间）\n\n**proxy_send_timeout 😗*后端服务器数据回传时间_就是在规定时间之内后端服务器必须传完所有的数据\n\nnginx使用proxy模块时，默认的读取超时时间是60s。\n\n1、请求超时\n\n[](javascript:void(0)😉\n\nhttp {\n    include       mime.types;\n    server_names_hash_bucket_size  512;     \n    default_type  application/octet-stream;\n    sendfile        on;\n    keepalive_timeout  65;  #保持\n    tcp_nodelay on;\n    client_header_timeout 15;\n    client_body_timeout 15;\n    send_timeout 25;\n    include vhosts/*.conf;\n}\n\n\n[](javascript:void(0)😉\n\n2、后端服务器处理请求的时间设置（页面等待服务器响应时间）\n\nlocation / {\n        ...\n        proxy_read_timeout 150;  # 秒\n        ...\n    }\n\n\n 1. 优化业务代码\n\n一个接口调用超过一分钟，一定有可以优化的地方，看看数据库或者接口的调用是否合理，是否可以合并请求。\n\n 2. 修改Nginx的服务器配置\n\n如果实在是优化不了了，可以把Nginx的超时时间上调。 看看时间是否符合要求，在nginx.config里面的三个参数：\n\nfastcgi_connect_timeout 300;\nfastcgi_send_timeout 300;\nfastcgi_read_timeout 300;\n\n\n以上的单位是秒。\n\n如果使用了Nginx的代理，可以在块里加上：\n\nproxy_connect_timeout 300s;\nproxy_send_timeout 300s;\nproxy_read_timeout 300s;\n\n\n变成：\n\nlocation /foo {\n   proxy_pass http://xxx.xxx.xxx.xxx:8080/foo;\n   proxy_set_header Host $host;\n   proxy_set_header X-Real-IP $remote_addr;\n   proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n   proxy_connect_timeout 300s;\n   proxy_send_timeout 300s;\n   proxy_read_timeout 300s;\n   access_log /var/log/nginx/access.foo.log main;\n   error_log /var/log/nginx/error.foo.log;\n}\n",normalizedContent:"    location / {\n    \n\t     proxy_read_timeout 150;  # 就是这个\n\t     proxy_pass  http://172.24.217.96:8801/;\n\t     proxy_set_header host $host;\n        #index  index.html index.htm;\n    }\n\n\n\n# nginx中的超时设置，请求超时、响应等待超时等\n\n\n# nginx timeout 配置 全局timeout 局部timeout web timeout\n\nnginx比较强大,可以针对单个域名请求做出单个连接超时的配置.\n\n比如些动态解释和静态解释可以根据业务的需求配置\n\n**proxy_connect_timeout 😗*后端服务器连接的超时时间_发起握手等候响应超时时间\n\n**proxy_read_timeout:**连接成功后_等候后端服务器响应时间_其实已经进入后端的排队之中等候处理（也可以说是后端服务器处理请求的时间）\n\n**proxy_send_timeout 😗*后端服务器数据回传时间_就是在规定时间之内后端服务器必须传完所有的数据\n\nnginx使用proxy模块时，默认的读取超时时间是60s。\n\n1、请求超时\n\n[](javascript:void(0)😉\n\nhttp {\n    include       mime.types;\n    server_names_hash_bucket_size  512;     \n    default_type  application/octet-stream;\n    sendfile        on;\n    keepalive_timeout  65;  #保持\n    tcp_nodelay on;\n    client_header_timeout 15;\n    client_body_timeout 15;\n    send_timeout 25;\n    include vhosts/*.conf;\n}\n\n\n[](javascript:void(0)😉\n\n2、后端服务器处理请求的时间设置（页面等待服务器响应时间）\n\nlocation / {\n        ...\n        proxy_read_timeout 150;  # 秒\n        ...\n    }\n\n\n 1. 优化业务代码\n\n一个接口调用超过一分钟，一定有可以优化的地方，看看数据库或者接口的调用是否合理，是否可以合并请求。\n\n 2. 修改nginx的服务器配置\n\n如果实在是优化不了了，可以把nginx的超时时间上调。 看看时间是否符合要求，在nginx.config里面的三个参数：\n\nfastcgi_connect_timeout 300;\nfastcgi_send_timeout 300;\nfastcgi_read_timeout 300;\n\n\n以上的单位是秒。\n\n如果使用了nginx的代理，可以在块里加上：\n\nproxy_connect_timeout 300s;\nproxy_send_timeout 300s;\nproxy_read_timeout 300s;\n\n\n变成：\n\nlocation /foo {\n   proxy_pass http://xxx.xxx.xxx.xxx:8080/foo;\n   proxy_set_header host $host;\n   proxy_set_header x-real-ip $remote_addr;\n   proxy_set_header x-forwarded-for $proxy_add_x_forwarded_for;\n   proxy_connect_timeout 300s;\n   proxy_send_timeout 300s;\n   proxy_read_timeout 300s;\n   access_log /var/log/nginx/access.foo.log main;\n   error_log /var/log/nginx/error.foo.log;\n}\n",charsets:{cjk:!0},lastUpdated:"2024/04/29, 11:14:33",lastUpdatedTimestamp:1714360473e3}],themeConfig:{nav:[{text:"首页",link:"/"},{text:"服务器相关",link:"/pages/949754/",items:[{text:"Linux",link:"/pages/949754/"},{text:"docker",link:"/pages/e29cdb/"},{text:"nginx",link:"/pages/ce5255/"}]},{text:"数据存储",link:"/pages/638375/",items:[{text:"mysql",link:"/pages/638375/"}]},{text:"开发工具相关",link:"/pages/b740a1/",items:[{text:"git",link:"/pages/b740a1/"},{text:"idea",link:"/pages/e6306e/"}]},{text:"java",link:"/pages/ef0371/",items:[{text:"lombok",link:"/pages/ef0371/"},{text:"mapstruct",link:"/pages/b3cd0d/"},{text:"okhttp3",link:"/pages/be7ac1/"}]},{text:"spring",link:"/pages/3eb2d0/"},{text:"赞助",link:"/pages/1b12ed/"}],sidebarDepth:2,logo:"/img/logo.png",repo:"xugaoyi/vuepress-theme-vdoing",searchMaxSuggestions:10,lastUpdated:"上次更新",sidebar:{"/01.linux/":[{title:"linux安装",collapsable:!1,children:[["01.linux安装/01.下载与安装.md","下载与安装","/pages/f25df1/"],["01.linux安装/02.修改ip.md","修改ip","/pages/e3e055/"],["01.linux安装/03.开放端口.md","开放端口","/pages/a00a23/"]]},{title:"linux使用",collapsable:!1,children:[["02.linux使用/01.linux使用.md","linux使用","/pages/949754/"],["02.linux使用/02.目录.md","目录","/pages/8efd89/"],["02.linux使用/03.查看磁盘空间cpu和内存情况.md","查看磁盘空间cpu和内存情况","/pages/6f7a06/"],["02.linux使用/04.往文件内写数据.md","往文件内写数据","/pages/bd4244/"],["02.linux使用/05.java安装.md","java安装","/pages/974661/"],["02.linux使用/06.shell脚本.md","shell脚本","/pages/ee5e94/"],["02.linux使用/07.shell脚本dome.md","shell脚本dome","/pages/7a89d1/"]]}],catalogue:{},"/02.docker/":[{title:"安装",collapsable:!1,children:[["01.安装/01.docker安装.md","docker安装","/pages/e29cdb/"],["01.安装/02.docker自动清理日志.md","docker自动清理日志","/pages/813dae/"]]},{title:"命令",collapsable:!1,children:[["02.命令/01.docker命令.md","docker命令","/pages/2d8481/"],["02.命令/02.run命令详解.md","run命令详解","/pages/53bb04/"],["02.命令/03.docker容器开机自动启动.md","docker容器开机自动启动","/pages/918bcc/"]]},{title:"dockerfile",collapsable:!1,children:[["03.dockerfile/01.dockerfile.md","dockerfile","/pages/bb988d/"],["03.dockerfile/02.Dockerfile构建Java程序.md","Dockerfile构建Java程序","/pages/140d94/"]]},{title:"常用软件安装",collapsable:!1,children:[["04.常用软件安装/01.安装nginx.md","安装nginx","/pages/5ad05b/"],["04.常用软件安装/02.安装mysql.md","安装mysql","/pages/a5f378/"],["04.常用软件安装/03.安装redis.md","安装redis","/pages/487fe4/"],["04.常用软件安装/04.安装elasticsearch.md","安装elasticsearch","/pages/e2502e/"],["04.常用软件安装/05.安装rabbitmq.md","安装rabbitmq","/pages/ce054c/"],["04.常用软件安装/06.安装RocketMQ.md","安装RocketMQ","/pages/615d3b/"],["04.常用软件安装/07.安装nacos.md","安装nacos","/pages/5a835a/"]]}],"/03.util/":[{title:"git",collapsable:!1,children:[["01.git/01.git文档.md","git文档","/pages/b740a1/"]]},{title:"idea",collapsable:!1,children:[["02.idea/01.idea快捷键.md","idea快捷键","/pages/e6306e/"],["02.idea/02.idea没有servise窗口解决办法.md","idea没有servise窗口解决办法","/pages/f993f7/"],["02.idea/03.idea连接mysql.md","idea连接mysql","/pages/36e470/"]]}],"/04.db/":[{title:"mysql",collapsable:!1,children:[["01.mysql/01.MySQL下载和安装.md","MySQL下载和安装","/pages/638375/"],["01.mysql/02.mysql数据类型.md","mysql数据类型","/pages/d00bbc/"],["01.mysql/03.mysql表操作.md","mysql表操作","/pages/25cd5e/"],["01.mysql/04.mysql添加索引.md","mysql添加索引","/pages/91a56f/"],["01.mysql/05.mysql查询语句执行顺序.md","mysql查询语句执行顺序","/pages/7119b3/"],["01.mysql/06.视图函数存储过程.md","视图函数存储过程","/pages/4e3826/"],["01.mysql/07.脏读幻读可重复读.md","脏读幻读可重复读","/pages/f9c7e0/"],["01.mysql/08.mysql特殊数据处理.md","mysql特殊数据处理","/pages/fd9178/"]]}],"/05.java工具/":[{title:"lombok",collapsable:!1,children:[["01.lombok/01.lombok.md","lombok","/pages/ad55d0/"]]},{title:"mapstruct",collapsable:!1,children:[["02.mapstruct/01.mapstruct.md","mapstruct","/pages/7e52b3/"],["02.mapstruct/02.mapstruct无法获取lombok生成的get和set方法.md","mapstruct无法获取lombok生成的get和set方法","/pages/009a23/"]]}],"/06.spring/":[{title:"Springboot启动扩展点超详细总结",collapsable:!1,children:[["08.Springboot启动扩展点超详细总结/01.Springboot启动扩展点超详细总结.md","Springboot启动扩展点超详细总结","/pages/34dc29/"]]},{title:"spring应用",collapsable:!1,children:[["09.spring应用/01.aop应用.md","aop应用","/pages/3eb2d0/"],["09.spring应用/06.网关gateway.md","网关gateway","/pages/64a6f5/"],["09.spring应用/07.SpringSecurity中跨域配置.md","SpringSecurity中跨域配置","/pages/0e930c/"],["09.spring应用/08.获取当前类的代理对象.md","获取当前类的代理对象","/pages/ab1f38/"],["09.spring应用/09.自定义SpringBootStarter.md","自定义SpringBootStarter","/pages/0ea346/"]]}],"/07.nginx/":[{title:"nginx",collapsable:!1,children:[["01.nginx/01.nginx安装.md","nginx安装","/pages/ce5255/"],["01.nginx/02.nginx配置详情.md","nginx配置详情","/pages/61f88f/"],["01.nginx/03.nginx配置清单.md","nginx配置清单","/pages/ad2c6a/"],["01.nginx/04.反向代理配置.md","反向代理配置","/pages/5de167/"],["01.nginx/05.root和alias的区别.md","root和alias的区别","/pages/3a71f1/"],["01.nginx/06.nginx拿到真实域名和ip.md","nginx拿到真实域名和ip","/pages/788324/"],["01.nginx/07.nginx请求超时问题.md","nginx请求超时问题","/pages/04cd7d/"]]}],"/08.java/":[{title:"util",collapsable:!1,children:[["04.util/01.lombok.md","lombok","/pages/ef0371/"],["04.util/02.mapstruct.md","mapstruct","/pages/b3cd0d/"],["04.util/03.mapstruct无法获取lombok生成的get和set方法.md","mapstruct无法获取lombok生成的get和set方法","/pages/807961/"],["04.util/04.okhttp3.md","okhttp3","/pages/be7ac1/"]]}]},updateBar:{showToArticle:!1},pageStyle:"line",category:!1,tag:!1,author:{name:"xuefm",href:"https://github.com/xuefm"},social:{icons:[{iconClass:"icon-youjian",title:"发邮件",link:"mailto:894072666@qq.com"},{iconClass:"icon-github",title:"GitHub",link:"https://github.com/xuefm"},{iconClass:"icon-erji",title:"听音乐",link:"https://music.163.com/#/playlist?id=755597173"}]},footer:{createYear:2019,copyrightInfo:"Evan Xu | MIT License"},htmlModules:{}}};var wc=t(93),kc=t(94),Sc=t(11);var Tc={computed:{$filterPosts(){return this.$site.pages.filter(n=>{const{frontmatter:{pageComponent:e,article:t,home:r}}=n;return!(e||!1===t||!0===r)})},$sortPosts(){return(n=this.$filterPosts).sort((n,e)=>{const t=n.frontmatter.sticky,r=e.frontmatter.sticky;return t&&r?t==r?Object(Sc.a)(n,e):t-r:t&&!r?-1:!t&&r?1:Object(Sc.a)(n,e)}),n;var n},$sortPostsByDate(){return(n=this.$filterPosts).sort((n,e)=>Object(Sc.a)(n,e)),n;var n},$groupPosts(){return function(n){const e={},t={};for(let r=0,o=n.length;r<o;r++){const{frontmatter:{categories:o,tags:a}}=n[r];"array"===Object(Sc.n)(o)&&o.forEach(t=>{t&&(e[t]||(e[t]=[]),e[t].push(n[r]))}),"array"===Object(Sc.n)(a)&&a.forEach(e=>{e&&(t[e]||(t[e]=[]),t[e].push(n[r]))})}return{categories:e,tags:t}}(this.$sortPosts)},$categoriesAndTags(){return function(n){const e=[],t=[];for(let t in n.categories)e.push({key:t,length:n.categories[t].length});for(let e in n.tags)t.push({key:e,length:n.tags[e].length});return{categories:e,tags:t}}(this.$groupPosts)}}};Jt.component(wc.default),Jt.component(kc.default);function jc(n){return n.toString().padStart(2,"0")}t(243);Jt.component("Badge",()=>Promise.all([t.e(0),t.e(3)]).then(t.bind(null,394))),Jt.component("CodeBlock",()=>Promise.resolve().then(t.bind(null,93))),Jt.component("CodeGroup",()=>Promise.resolve().then(t.bind(null,94)));t(244);var Ec=[({Vue:n,options:e,router:t,siteData:r,isServer:o})=>{o||t.afterEach(()=>{var n;n=function(){setTimeout((function(){void 0===window._AdBlockInit&&function(){const n=document.getElementsByClassName("wwads-cn"),e=document.querySelector(".wwads-content");n[0]&&!e&&(n[0].innerHTML="<style>.wwads-horizontal,.wwads-vertical{background-color:#f4f8fa;padding:5px;min-height:120px;margin-top:20px;box-sizing:border-box;border-radius:3px;font-family:sans-serif;display:flex;min-width:150px;position:relative;overflow:hidden;}.wwads-horizontal{flex-wrap:wrap;justify-content:center}.wwads-vertical{flex-direction:column;align-items:center;padding-bottom:32px}.wwads-horizontal a,.wwads-vertical a{text-decoration:none}.wwads-horizontal .wwads-img,.wwads-vertical .wwads-img{margin:5px}.wwads-horizontal .wwads-content,.wwads-vertical .wwads-content{margin:5px}.wwads-horizontal .wwads-content{flex:130px}.wwads-vertical .wwads-content{margin-top:10px}.wwads-horizontal .wwads-text,.wwads-content .wwads-text{font-size:14px;line-height:1.4;color:#0e1011;-webkit-font-smoothing:antialiased}.wwads-horizontal .wwads-poweredby,.wwads-vertical .wwads-poweredby{display:block;font-size:11px;color:#a6b7bf;margin-top:1em}.wwads-vertical .wwads-poweredby{position:absolute;left:10px;bottom:10px}.wwads-horizontal .wwads-poweredby span,.wwads-vertical .wwads-poweredby span{transition:all 0.2s ease-in-out;margin-left:-1em}.wwads-horizontal .wwads-poweredby span:first-child,.wwads-vertical .wwads-poweredby span:first-child{opacity:0}.wwads-horizontal:hover .wwads-poweredby span,.wwads-vertical:hover .wwads-poweredby span{opacity:1;margin-left:0}.wwads-horizontal .wwads-hide,.wwads-vertical .wwads-hide{position:absolute;right:-23px;bottom:-23px;width:46px;height:46px;border-radius:23px;transition:all 0.3s ease-in-out;cursor:pointer;}.wwads-horizontal .wwads-hide:hover,.wwads-vertical .wwads-hide:hover{background:rgb(0 0 0 /0.05)}.wwads-horizontal .wwads-hide svg,.wwads-vertical .wwads-hide svg{position:absolute;left:10px;top:10px;fill:#a6b7bf}.wwads-horizontal .wwads-hide:hover svg,.wwads-vertical .wwads-hide:hover svg{fill:#3E4546}</style><a href='https://wwads.cn/page/whitelist-wwads' class='wwads-img' target='_blank' rel='nofollow'><img src='https://jsd.cdn.zzko.cn/gh/xugaoyi/image_store@master/blog/wwads.2a3pidhlh4ys.webp' width='130'></a><div class='wwads-content'><a href='https://wwads.cn/page/whitelist-wwads' class='wwads-text' target='_blank' rel='nofollow'>为了本站的长期运营，请将我们的网站加入广告拦截器的白名单，感谢您的支持！<span style='color: #11a8cd'>如何添加白名单?</span></a><a href='https://wwads.cn/page/end-user-privacy' class='wwads-poweredby' title='万维广告 ～ 让广告更优雅，且有用' target='_blank'><span>广告</span></a></div><a class='wwads-hide' onclick='parentNode.remove()' title='隐藏广告'><svg xmlns='http://www.w3.org/2000/svg' width='6' height='7'><path d='M.879.672L3 2.793 5.121.672a.5.5 0 11.707.707L3.708 3.5l2.12 2.121a.5.5 0 11-.707.707l-2.12-2.12-2.122 2.12a.5.5 0 11-.707-.707l2.121-2.12L.172 1.378A.5.5 0 01.879.672z'></path></svg></a>")}()}),3e3)},"complete"===document.readyState||"interactive"===document.readyState?setTimeout(n,1):document.addEventListener("DOMContentLoaded",n),setTimeout(()=>{const n=document.querySelector(".page-wwads");if(!n)return;const e=n.querySelector(".wwads-hide");e&&(e.onclick=()=>{n.style.display="none"}),"none"===n.style.display&&(n.style.display="flex")},900)})},({Vue:n,options:e,router:t,siteData:r})=>{r.pages.map(n=>{const{frontmatter:{date:e,author:t}}=n;"string"==typeof e&&"Z"===e.charAt(e.length-1)&&(n.frontmatter.date=function(n){n instanceof Date||(n=new Date(n));return`${n.getUTCFullYear()}-${jc(n.getUTCMonth()+1)}-${jc(n.getUTCDate())} ${jc(n.getUTCHours())}:${jc(n.getUTCMinutes())}:${jc(n.getUTCSeconds())}`}(e)),t?n.author=t:r.themeConfig.author&&(n.author=r.themeConfig.author)}),n.mixin(Tc)},{},({Vue:n})=>{n.mixin({computed:{$dataBlock(){return this.$options.__data__block__}}})},{},{},({router:n})=>{"undefined"!=typeof window&&(window._hmt=window._hmt||[],function(){var n=document.createElement("script");n.src="https://hm.baidu.com/hm.js?01293bffa6c3962016c08ba685c79d78";var e=document.getElementsByTagName("script")[0];e.parentNode.insertBefore(n,e)}(),n.afterEach((function(n){_hmt.push(["_trackPageview",n.fullPath])})))}],Ac=[];class Oc extends class{constructor(){this.store=new Jt({data:{state:{}}})}$get(n){return this.store.state[n]}$set(n,e){Jt.set(this.store.state,n,e)}$emit(...n){this.store.$emit(...n)}$on(...n){this.store.$on(...n)}}{}Object.assign(Oc.prototype,{getPageAsyncComponent:ss,getLayoutAsyncComponent:cs,getAsyncComponent:ls,getVueComponent:ps});var Cc={install(n){const e=new Oc;n.$vuepress=e,n.prototype.$vuepress=e}};function Ic(n,e){const t=e.toLowerCase();return n.options.routes.some(n=>n.path.toLowerCase()===t)}var Pc={props:{pageKey:String,slotKey:{type:String,default:"default"}},render(n){const e=this.pageKey||this.$parent.$page.key;return ds("pageKey",e),Jt.component(e)||Jt.component(e,ss(e)),Jt.component(e)?n(e):n("")}},$c={functional:!0,props:{slotKey:String,required:!0},render:(n,{props:e,slots:t})=>n("div",{class:["content__"+e.slotKey]},t()[e.slotKey])},qc={computed:{openInNewWindowTitle(){return this.$themeLocaleConfig.openNewWindowText||"(opens new window)"}}},zc=(t(245),t(246),Object(bc.a)(qc,(function(){var n=this._self._c;return n("span",[n("svg",{staticClass:"icon outbound",attrs:{xmlns:"http://www.w3.org/2000/svg","aria-hidden":"true",focusable:"false",x:"0px",y:"0px",viewBox:"0 0 100 100",width:"15",height:"15"}},[n("path",{attrs:{fill:"currentColor",d:"M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"}}),this._v(" "),n("polygon",{attrs:{fill:"currentColor",points:"45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"}})]),this._v(" "),n("span",{staticClass:"sr-only"},[this._v(this._s(this.openInNewWindowTitle))])])}),[],!1,null,null,null).exports),Bc={functional:!0,render(n,{parent:e,children:t}){if(e._isMounted)return t;e.$once("hook:mounted",()=>{e.$forceUpdate()})}};Jt.config.productionTip=!1,Jt.use(Vi),Jt.use(Cc),Jt.mixin(function(n,e,t=Jt){!function(n){n.locales&&Object.keys(n.locales).forEach(e=>{n.locales[e].path=e});Object.freeze(n)}(e),t.$vuepress.$set("siteData",e);const r=new(n(t.$vuepress.$get("siteData"))),o=Object.getOwnPropertyDescriptors(Object.getPrototypeOf(r)),a={};return Object.keys(o).reduce((n,e)=>(e.startsWith("$")&&(n[e]=o[e].get),n),a),{computed:a}}(n=>class{setPage(n){this.__page=n}get $site(){return n}get $themeConfig(){return this.$site.themeConfig}get $frontmatter(){return this.$page.frontmatter}get $localeConfig(){const{locales:n={}}=this.$site;let e,t;for(const r in n)"/"===r?t=n[r]:0===this.$page.path.indexOf(r)&&(e=n[r]);return e||t||{}}get $siteTitle(){return this.$localeConfig.title||this.$site.title||""}get $canonicalUrl(){const{canonicalUrl:n}=this.$page.frontmatter;return"string"==typeof n&&n}get $title(){const n=this.$page,{metaTitle:e}=this.$page.frontmatter;if("string"==typeof e)return e;const t=this.$siteTitle,r=n.frontmatter.home?null:n.frontmatter.title||n.title;return t?r?r+" | "+t:t:r||"VuePress"}get $description(){const n=function(n){if(n){const e=n.filter(n=>"description"===n.name)[0];if(e)return e.content}}(this.$page.frontmatter.meta);return n||(this.$page.frontmatter.description||this.$localeConfig.description||this.$site.description||"")}get $lang(){return this.$page.frontmatter.lang||this.$localeConfig.lang||"en-US"}get $localePath(){return this.$localeConfig.path||"/"}get $themeLocaleConfig(){return(this.$site.themeConfig.locales||{})[this.$localePath]||{}}get $page(){return this.__page?this.__page:function(n,e){for(let t=0;t<n.length;t++){const r=n[t];if(r.path.toLowerCase()===e.toLowerCase())return r}return{path:"",frontmatter:{}}}(this.$site.pages,this.$route.path)}},_c)),Jt.component("Content",Pc),Jt.component("ContentSlotsDistributor",$c),Jt.component("OutboundLink",zc),Jt.component("ClientOnly",Bc),Jt.component("Layout",cs("Layout")),Jt.component("NotFound",cs("NotFound")),Jt.prototype.$withBase=function(n){const e=this.$site.base;return"/"===n.charAt(0)?e+n.slice(1):n},window.__VUEPRESS__={version:"1.9.9",hash:"f1fccba"},async function(n){const e="undefined"!=typeof window&&window.__VUEPRESS_ROUTER_BASE__?window.__VUEPRESS_ROUTER_BASE__:_c.routerBase||_c.base,t=new Vi({base:e,mode:"history",fallback:!1,routes:xc,scrollBehavior:(n,e,t)=>t||(n.hash?!Jt.$vuepress.$get("disableScrollBehavior")&&{selector:decodeURIComponent(n.hash)}:{x:0,y:0})});!function(n){n.beforeEach((e,t,r)=>{if(Ic(n,e.path))r();else if(/(\/|\.html)$/.test(e.path))if(/\/$/.test(e.path)){const t=e.path.replace(/\/$/,"")+".html";Ic(n,t)?r(t):r()}else r();else{const t=e.path+"/",o=e.path+".html";Ic(n,o)?r(o):Ic(n,t)?r(t):r()}})}(t);const r={};try{await Promise.all(Ec.filter(n=>"function"==typeof n).map(e=>e({Vue:Jt,options:r,router:t,siteData:_c,isServer:n})))}catch(n){console.error(n)}return{app:new Jt(Object.assign(r,{router:t,render:n=>n("div",{attrs:{id:"app"}},[n("RouterView",{ref:"layout"}),n("div",{class:"global-ui"},Ac.map(e=>n(e)))])})),router:t}}(!1).then(({app:n,router:e})=>{e.onReady(()=>{n.$mount("#app")})})}]);